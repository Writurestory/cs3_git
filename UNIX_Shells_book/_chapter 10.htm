<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Chapter 10</title>
<link rel="stylesheet" type="text/css" href="docsafari.css">
<link rel="stylesheet" type="text/css" href="style.css">
</head>

<body><table width="100%" border="1" bgcolor="#EBEBFF"><tr><td width="5%" align="left" valign="middle"><a href="_chapter 9.htm"><img src="Larrow.gif" width="17" height="19" border="0"></a></td><td align="center" valign="middle"><a class="docLink" href="Front matter.htm">CONTENTS</a></td><td width="5%" align="right" valign="middle"><a href="_chapter 11.htm"><img src="Rarrow.gif" width="17" height="19" border="0"></a></td></tr></table>


<h2 class="docChapterTitle">Chapter 10. The Korn Shell</h2><ul><li>&nbsp;<a class="docLink" href="#ch10lev1sec1">10.1 Interactive Korn Shell</a></li>
<li>&nbsp;<a class="docLink" href="#ch10lev1sec2">10.2 Programming with the Korn Shell</a></li>
<li>&nbsp;<a class="docLink" href="#ch10lev1sec3">KORN SHELL LAB EXERCISES</a></li>
</ul>
<center>
<p class="docText">
<img alt="graphics/ch10.gif" src="ch10.gif" border="0" width="484" height="613"></p>
</center>
<h3 class="docSection1Title" id="ch10lev1sec1">10.1 Interactive Korn Shell</h3>
<p class="docText">Before the Korn shell displays a prompt, it is preceded by a
number of processes. See <a class="docLink" href="#ch10fig01">Figure 10.1</a>.</p>
<center>
<h5 id="ch10fig01" class="docFigureTitle">Figure 10.1. System startup and the Korn shell.</h5>
<p class="docText">
<img alt="graphics/10fig01.gif" src="10fig01.gif" border="0" width="420" height="496"></p>
</center>
<h4 class="docSection2Title" id="ch10lev2sec1">10.1.1 Startup</h4>
<p class="docText">The first process to run is called <span class="docEmphasis">
init,</span> PID 1. It gets instructions from a file called
<span class="docEmphasis">inittab</span> (System V) or spawns a
<span class="docEmphasis">getty</span> (BSD) process. These processes open up
the terminal ports, provide a place where input comes from,
<span class="docEmphasis">stdin,</span> and the place where standard output (<span class="docEmphasis">stdout</span>)
and standard error (<span class="docEmphasis">stderr</span>) go, and put a login
prompt on your screen. The <span class="docEmphasis">/bin/login</span> program
is then executed. The <span class="docEmphasis">login</span> program prompts you
for a password, encrypts and verifies the password, sets up an initial
environment, and starts up the login shell, <span class="docEmphasis">/bin/ksh,</span>
the last entry in the <span class="docEmphasis">passwd</span> file. The
<span class="docEmphasis">ksh</span> program looks for the system file,
<span class="docEmphasis">/etc/profile,</span> and executes its commands. It
then looks in the user's home directory for an initialization file called
<span class="docEmphasis">.profile,</span> and an environment file,
conventionally called <span class="docEmphasis">.kshrc.</span> After executing
commands from those files, the dollar sign prompt appears on your screen and the
Korn shell awaits commands.</p>
<h4 class="docSection2Title" id="ch10lev2sec2">10.1.2 The Environment</h4>
<p class="docText"><b>The Initialization Files.</b> After executing the commands
in <span class="docEmphasis">/etc/profile,</span> the initialization files in
the user's home directory are executed. The <span class="docEmphasis">.profile</span>
is executed, followed by the <span class="docEmphasis">ENV</span> file, commonly
called the <span class="docEmphasis">.kshrc</span> file.</p>
<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
/etc/profile</span> File.</span> The <span class="docEmphasis">/etc/profile</span>
is a systemwide readable file set up by the system administrator to perform
tasks when the user logs on and the Korn shell starts up. It is available to all
Bourne and Korn shell users on the system, and normally performs such tasks as
checking the mail spooler for new mail and displaying the message of the day
from the <span class="docEmphasis">/etc/motd</span> file. The following text is
an example of the /etc/<span class="docEmphasis">profile.</span> See
<a class="docLink" href="_chapter 8.htm">Chapter 8, &quot;The
Interactive Bourne Shell,&quot;</a> for a complete explanation of each line of
<span class="docEmphasis">/etc/profile.</span></p>
<pre>EXAMPLE
<span class="docEmphasis"># The profile that all logins get before using their own .profile</span>
    trap &quot; &quot; 2 3
    export LOGNAME PATH  <span class="docEmphasis"># Initially set by /bin/login</span>
    if [ &quot;$TERM&quot; = &quot; &quot; ]
    then
       if /bin/i386
       then     <span class="docEmphasis"># Set the terminal type</span>
          TERM=AT386
       else
          TERM=sun
       fi
       export TERM
    fi
    <span class="docEmphasis"># Login and -su shells get /etc/profile services.</span>
    <span class="docEmphasis"># -rsh is given its environment in the .profile.</span>
    case &quot;$0&quot; in
    -sh | <span class="docEmphStrong">-ksh</span> | -jsh )
        if [ ! -f .hushlogin ]
        then
          /usr/sbin/quota
       <span class="docEmphasis">#</span> Allow the user to break the Message-Of-The-Day only.
          trap &quot;trap ' ' 2&quot; 2
          /bin/cat -s /etc/motd
          <span class="docEmphasis"># Display the message of the day</span>
          trap &quot; &quot; 2
          /bin/mail -E
          case $? in
          0)        <span class="docEmphasis"># Check for new mail</span>
              echo &quot;You have new mail. &quot;
                   ;;
          2)  echo &quot;You have mail. &quot;
                   ;;
          esac
       fi
    esac
    umask 022
    trap 2 3
</pre>
<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
.profile</span> File.</span> The <span class="docEmphasis">.profile</span> file
is a user-defined initialization file, that is executed once at login (by the
Bourne and Korn shells) and is found in your home directory. It gives you the
ability to customize and modify your working environment. Environment variables
and terminal settings are normally set here, and if a window application or
<span class="docEmphasis">dbm</span> is to be initiated, it is started here. If
the <span class="docEmphasis">.profile</span> file contains a special variable
called <span class="docEmphasis">ENV,</span> the filename that is assigned to
that variable will be executed next. The <span class="docEmphasis">ENV</span>
file is often named <span class="docEmphasis">.kshrc;</span> it contains aliases
and <span class="docEmphasis">set –o</span> commands. The
<span class="docEmphasis">ENV</span> file is executed every time a
<span class="docEmphasis">ksh</span> subshell is spawned. The lines from the
following files may not be meaningful to you now, but all of the concepts, such
as exporting variables, history, the search path, and so on, will be discussed
in detail throughout the text of this book.</p>
<h5 id="ch10list01" class="docExampleTitle">Example 10.1 </h5>
<pre>1   set -o allexport
2   TERM=vt102
3   HOSTNAME=$(uname -n)
4   HISTSIZE=50
5   EDITOR=/usr/ucb/vi
6   ENV=$HOME/.kshrc
7   PATH=$HOME/bin:/usr/ucb:/usr/bin:\
    /usr/local:/etc:/bin:/usr/bin:/usr/local\
    /bin:/usr/hosts:/usr/5bin:/usr/etc:/usr/bin:.
8   PS1=&quot;$HOSTNAME ! $ &quot;
9   set +o allexport
10  alias openwin=/usr/openwin/bin/openwin
11  trap '$HOME/.logout' EXIT
12  clear
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">By setting the <span class="docEmphasis">allexport</span>
      option, all variables created will automatically be exported (made
      available to subshells).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The terminal is set to <span class="docEmphasis">vt102.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">HOSTNAME</span>
      is assigned the name of this machine, <span class="docEmphasis">$(uname
      –n).</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">HISTSIZE</span> variable
      is assigned <span class="docEmphasis">50;</span> 50 lines from the history
      file will be displayed on the terminal when the user types
      <span class="docEmphasis">history.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">EDITOR</span> variable is
      assigned the pathname for the <span class="docEmphasis">vi</span> editor.
      Programs such as <span class="docEmphasis">mail</span> allow you to select
      an editor in which to work.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ENV</span> variable is
      assigned the path to the home directory (<span class="docEmphasis">$HOME</span>)
      and the name of the file that contains further Korn shell customization
      settings. After the <span class="docEmphasis">.profile</span> is executed,
      the <span class="docEmphasis">ENV</span> file is executed. The name of the
      <span class="docEmphasis">ENV</span> file is your choice; it is commonly
      called <span class="docEmphasis">.kshrc.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The search path is defined. It is a colon-separated
      list of directories used by the shell in its search for commands typed at
      the prompt or in a script file. The shell searches each element of the
      path from left to right for the command. The dot at the end represents the
      current working directory. If the command cannot be found in any of the
      listed directories, the shell will look in the current directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The primary prompt, by default a dollar sign ($), is
      set to the name of the host machine, the number of the current command in
      the history file, and a dollar sign (<span class="docEmphasis">$</span>).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">allexport</span> option
      is turned off.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">An alias is a nickname for a command. The alias for
      <span class="docEmphasis">openwin</span> is assigned the full pathname of
      the <span class="docEmphasis">openwin</span> command, which starts Sun's
      window application.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">trap</span> command will
      execute the <span class="docEmphasis">.logout</span> file when you exit
      this shell, that is, when you log out. The <span class="docEmphasis">
      .logout</span> file is a user-defined file containing commands that are
      executed at the time of logging out. For example, you may want to record
      the time you log out, clean up a temporary file, or simply say
      <span class="docEmphasis">So long.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">clear</span> command
      clears the screen.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">ENV</span>
File.</span> The <span class="docEmphasis">ENV</span> variable is assigned the
name of a file that will be executed every time an interactive
<span class="docEmphasis">ksh</span> or <span class="docEmphasis">ksh</span>
program (script) is started. The <span class="docEmphasis">ENV</span> variable
is set in the <span class="docEmphasis">.profile</span> and is assigned the name
of the file that will contain special <span class="docEmphasis">ksh</span>
variables and aliases. The name is conventionally <span class="docEmphasis">.kshrc,</span>
but you can call it anything you want. (The <span class="docEmphasis">ENV</span>
file is not processed when the privileged option is on. See
<a class="docLink" href="#ch10table01">Table 10.1</a>.)</p>
<h5 id="ch10list02" class="docExampleTitle">Example 10.2 </h5>
<pre>1   set -o trackall
2   set -o vi
3   alias l='ls -laF'
    alias ls='ls -aF'
    alias hi='fc -l'
    alias c=clear
4   function pushd { pwd &gt; $HOME/.lastdir.$$ ; }
    function popd { cd $(&lt; $HOME/.lastdir.$$) ;
           rm $HOME/.lastdir.$$; pwd; }
    function psg { ps -ef | egrep $1 | egrep -v egrep; }
    function vg { vgrind -s11 -t $* | lpr -t ; }
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> option for
      tracked aliases is turned on. (For a complete description, see &quot;<a class="docLink" href="#ch10lev2sec8">Aliases</a>&quot;.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> option for the
      <span class="docEmphasis">vi</span> editor is turned on for in-line
      editing of the history file. (See &quot;<a class="docLink" href="#ch10lev2sec6">Command
      Line History</a>&quot;.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The aliases (nicknames) for the commands are defined.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The functions are named and defined. (See &quot;<a class="docLink" href="#ch10lev2sec16">Functions</a>&quot;.)</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">set
–o</span> Options.</span> The <span class="docEmphasis">set</span> command can
take options if the <span class="docEmphasis">–o</span> switch is used. Options
allow you to customize the shell environment. They are either on or off, and are
normally set in the <span class="docEmphasis">ENV</span> file.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>set -o option  Turns on the option.
set +o option  Turns off the option
set -[a-z] Abbreviation for an option; the minus turns it on
set +[a-z] Abbreviation for an option; the plus turns it off
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list03" class="docExampleTitle">Example 10.3 </h5>
<pre>set -o allexport
set +o allexport
set -a
set +a
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Sets the <span class="docEmphasis">allexport</span>
      option. This option causes all variables to be automatically exported to
      subshells.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Unsets the <span class="docEmphasis">allexport</span>
      option. All variables will now be local to the current shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Sets the <span class="docEmphasis">allexport</span>
      option. Same as 1. Not every option has an abbreviation (see
      <a class="docLink" href="#ch10table01">Table 10.1</a>).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Unsets the <span class="docEmphasis">allexport</span>
      option. Same as 2.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p>&nbsp;</p>
<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table01" class="docTableTitle">Table 10.1. Options</h5>
  </caption>
  <colgroup span="3" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">Name
    of Option</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Abbreviation</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">What
    It Does</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">allexport</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–a</span>
    </td>
    <td class="docTableCell" vAlign="top">Causes variables set to be
    automatically exported. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">bgnice</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Background jobs are run with a lower
    priority. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">emacs</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">For command line editing, uses the
    <span class="docEmphasis">emacs</span> built-in editor. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">errexit</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–e</span>
    </td>
    <td class="docTableCell" vAlign="top">If a command returns a nonzero exit
    status (fails), executes the <span class="docEmphasis">ERR</span> trap, if
    set, and exits. Not set when reading initialization files. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">gmacs</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">For command editing, uses the
    <span class="docEmphasis">gmacs</span> built-in editor. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ignoreeof</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Prevents logout with ^D; must type
    <span class="docEmphasis">exit</span> to exit the shell. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">markdirs</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Puts a trailing backslash (/) on
    directory names when filename expansion is used. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">monitor</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–m</span>
    </td>
    <td class="docTableCell" vAlign="top">Allows job control. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">noclobber</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Protects files from being overwritten
    when redirection is used. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">noexec</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–n</span>
    </td>
    <td class="docTableCell" vAlign="top">Reads commands, but does not execute
    them. Used to check the syntax of scripts. Not on when running
    interactively. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">noglob</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–f</span>
    </td>
    <td class="docTableCell" vAlign="top">Disables pathname expansion; i.e.,
    turns off wildcards. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">nolog</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Does not store function definitions in
    the history file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">notify</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Notifies user when background job
    finishes (only in versions newer than 1988). </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">nounset</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Displays an error when expanding a
    variable that has not been set. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">privileged</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–p</span>
    </td>
    <td class="docTableCell" vAlign="top">When set, the shell does not read the
    <span class="docEmphasis">.profile</span> or <span class="docEmphasis">ENV</span>
    file; used with <span class="docEmphasis">setuid</span> scripts. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">trackall</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Enables alias tracking. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">verbose</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–v</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns on the <span class="docEmphasis">
    verbose</span> mode for debugging. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">vi</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">For command line editing, uses the
    <span class="docEmphasis">vi</span> built-in editor. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">xtrace</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–x</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns on the echo mode for debugging.
    </td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec3">10.1.3 The Prompts</h4>
<p class="docText">The Korn shell provides four prompts.The primary and
secondary prompts are used when the Korn shell is running interactively. You can
change these prompts. The variable <span class="docEmphasis">PS1</span> is the
primary prompt, set initially to a dollar sign (<span class="docEmphasis">$</span>).
It appears when you log on and waits for you to type commands. The variable
<span class="docEmphasis">PS2</span> is the secondary prompt, initially set to
the &gt; character. It appears if you have partially typed a command and then
pressed Enter. You can change the primary and secondary prompts.</p>
<p class="docText"><b>The Primary Prompt.</b> <span class="docEmphasis">$</span>
is the default primary prompt. You can change your prompt. Normally, prompts are
defined in <span class="docEmphasis">.profile.</span></p>
<h5 id="ch10list04" class="docExampleTitle">Example 10.4 </h5>
<pre>1   $ <span class="docEmphStrong">PS1=&quot;$(uname –n) ! $ &quot;</span>
2   <span class="docEmphasis">jody 1141 $</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The default primary prompt is a
      <span class="docEmphasis">$.</span> The <span class="docEmphasis">PS1</span>
      prompt is being reset to the name of the machine <span class="docEmphasis">
      $(uname –n</span>), the number of the current history number, and the
      <span class="docEmphasis">$.</span> The exclamation point evaluates to the
      current history number. (To print an exclamation point, type two
      exclamation points (<span class="docEmphasis">!!</span>) in the
      <span class="docEmphasis">PS1</span> definition.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The new prompt is displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>The Secondary Prompt.</b> The <span class="docEmphasis">
PS2</span> prompt is the secondary prompt. Its value is displayed to standard
error (the screen). This prompt appears when you have not completed a command
and have pressed the carriage return.</p>
<h5 id="ch10list05" class="docExampleTitle">Example 10.5 </h5>
<pre>1   $ print &quot;Hello
2   &gt; there&quot;
3   <span class="docEmphasis">Hello</span>
    <span class="docEmphasis">there</span>
4   $

5   $ <span class="docEmphStrong">PS2=&quot;––––&gt; &quot;</span>
6   $ <span class="docEmphStrong">print &quot;Hi</span>
7   <span class="docEmphStrong">––––––&gt;</span>
    <span class="docEmphStrong">––––––&gt;</span>
    <span class="docEmphStrong">––––––&gt; there&quot;</span>
    <span class="docEmphasis">Hi</span>


    <span class="docEmphasis">there</span>
    $
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The double quotes must be matched after the string
      <span class="docEmphasis">&quot;Hello.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When a newline is entered, the secondary prompt
      appears. Until the closing double quotes are entered, the secondary prompt
      will be displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">print</span>
      command is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The primary prompt is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The secondary prompt is reset.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The double quotes must be matched after the string
      <span class="docEmphasis">&quot;Hi.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When a newline is entered, the new secondary prompt
      appears. Until the closing double quotes are entered, the secondary prompt
      will be displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec4">10.1.4 The Search Path</h4>
<p class="docText">To execute a command typed at the command line or within a
shell script, the Korn shell searches the directories listed in the
<span class="docEmphasis">PATH</span> variable. The <span class="docEmphasis">
PATH</span> is a colon-separated list of directories, searched by the shell from
left to right. The dot in the <span class="docEmphasis">PATH</span> represents
the current working directory. If the command is not found in any of the
directories listed in the path, the shell sends the message
<span class="docEmphasis">ksh: filename: not found</span> to standard error. It
is recommended that the path be set in the <span class="docEmphasis">.profile</span>
file. To speed up the searching process, the Korn shell has implemented tracked
aliases. See &quot;Tracked Aliases&quot; on page 455.</p>
<h5 id="ch10list06" class="docExampleTitle">Example 10.6 </h5>
<pre>$ <span class="docEmphStrong">echo $PATH</span>
<span class="docEmphasis">/home/gsa12/bin:/usr/ucb:/usr/bin:/usr/local/bin:.</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The Korn shell will search for commands starting in
    <span class="docEmphasis">/home/gsa12/bin.</span> If the command is not
    found there, <span class="docEmphasis">/usr/ucb</span> is searched, then
    <span class="docEmphasis">/usr/bin, /usr/local/bin,</span> and finally the
    user's home directory represented by the period.</td>
  </tr>
</table>

<p class="docText"><b>The Dot Command.</b> The dot command (.) is a built-in
Korn shell command. It takes a scriptname as an argument. The script will be
executed in the environment of the current shell. A child process will not be
started. The dot command is normally used to reexecute the
<span class="docEmphasis">.profile</span> file or the <span class="docEmphasis">
ENV</span> file, if either of those files has been modified. For example, if one
of the settings in either file has been changed after you have logged on, you
can use the dot command to reexecute the initialization files without logging
out and then logging back in.</p>
<h5 id="ch10list07" class="docExampleTitle">Example 10.7 </h5>
<pre>$ <span class="docEmphStrong">. .profile</span>
$ <span class="docEmphStrong">. .kshrc</span>
$ <span class="docEmphStrong">. $ENV</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">Normally a child process is started when commands are
    executed. The dot command executes each of the initialization files,
    <span class="docEmphasis">.profile,</span> the <span class="docEmphasis">ENV</span>
    file (.<span class="docEmphasis">kshrc</span>), in the current shell. Local
    and global variables in these files are defined within this shell.
    Otherwise, the user would have to log out and log back in to cause these
    files to be executed for the login shell. The dot command makes that
    unnecessary.</td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec5">10.1.5 The Command Line</h4>
<p class="docText">After logging in, the Korn shell displays its primary prompt,
a dollar sign by default. The shell is your command interpreter. When the shell
is running interactively, it reads commands from the terminal and breaks the
command line into words. A command line consists of one or more words (or
tokens), separated by whitespace (blanks and/or tabs), and terminated with a
newline, generated by pressing Enter. The first word is the command, and
subsequent words are the command's arguments. The command may be a UNIX
executable program such as <span class="docEmphasis">ls</span> or
<span class="docEmphasis">pwd,</span> a built-in command such as
<span class="docEmphasis">cd</span> or <span class="docEmphasis">jobs,</span> or
a shell script. The command may contain special characters, called
metacharacters, which the shell must interpret while parsing the command line.
If a command line is too long, the backslash character, followed by a newline,
will allow you to continue typing on the next line. The secondary prompt will
appear until the command line is terminated.</p>
<p class="docText"><b>The Order of Processing Commands.</b> The first word on
the command line is the command to be executed. The command may be a keyword, a
special built-in command or utility, a function, a script, or an executable
program. The command is executed according to its type in the following order:<span id="ENB10-1"><a class="docLink" href="#EN10-1"><sup>[1]</sup></a></span>
</p>

<span style="FONT-WEIGHT: bold">
<ol class="docList" type="1">
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Keyword (such as <span class="docEmphasis">if, while, until</span>).</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Aliases (see <span class="docEmphasis">typeset –f</span>).</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Built-in commands.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Functions.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Scripts and executables.</span></li>
</ol>
</span>
<p class="docText">The special built-in commands and functions are defined
within the shell, and therefore are executed from within the current shell,
making them much faster in execution. Scripts and executable programs such as
<span class="docEmphasis">ls</span> and <span class="docEmphasis">pwd</span> are
stored on disk, and the shell must locate them within the directory hierarchy by
searching the <span class="docEmphasis">PATH</span> environment variable; the
shell then forks a new shell that executes the script. To find out the type of
command you are using, use the built-in command, <span class="docEmphasis">
whence –v</span> , or its alias, <span class="docEmphasis">type.</span> (See
<a class="docLink" href="#ch10list08">Example 10.8</a>.)</p>
<h5 id="ch10list08" class="docExampleTitle">Example 10.8 </h5>
<pre>$ <span class="docEmphStrong">type print</span>
<span class="docEmphasis">print is a shell builtin</span>
$ <span class="docEmphStrong">type test</span>
<span class="docEmphasis">test is a shell builtin</span>
$ <span class="docEmphStrong">type ls</span>
<span class="docEmphasis">ls is a tracked alias for /usr/bin/ls</span>
$ <span class="docEmphStrong">type type</span>
<span class="docEmphasis">type is an exported alias for whence -v</span>
$ <span class="docEmphStrong">type bc</span>
<span class="docEmphasis">bc is /usr/bin/bc</span>
$ <span class="docEmphStrong">type if</span>
<span class="docEmphasis">if is a keyword</span>
</pre>
<p class="docText"><b>The Exit Status.</b> After a command or program
terminates, it returns an exit status to the parent process. The exit status is
a number between 0 and 255. By convention, when a program exits, if the status
returned is zero, the command was successful in its execution. When the exit
status is nonzero, the command failed in some way. The Korn shell status
variable <span class="docEmphasis">?</span> is set to the value of the exit
status of the last command that was executed. Success or failure of a program is
determined by the programmer who wrote the program. In shell scripts, you can
explicitly control the exit status by using the <span class="docEmphasis">exit</span>
command.</p>
<h5 id="ch10list09" class="docExampleTitle">Example 10.9 </h5>
<pre>1   $ <span class="docEmphStrong">grep &quot;ellie&quot; /etc/passwd</span>
    <span class="docEmphasis">ellie:GgMyBsSJavd16s:9496:40:Ellie Quigley:/home/jody/ellie</span>
2   $ <span class="docEmphStrong">echo $?</span>
    <span class="docEmphasis">0</span>

3   $ <span class="docEmphStrong">grep &quot;nicky&quot; /etc/passwd</span>
4   $ <span class="docEmphStrong">echo $?</span>
    <span class="docEmphasis">1</span>

5   $ <span class="docEmphStrong">grep &quot;scott&quot; /etc/passsswd</span>
    <span class="docEmphasis">grep: /etc/passsswd: No such file or directory</span>
6   $ <span class="docEmphStrong">echo $?</span>
    <span class="docEmphasis">2</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">grep</span> program
      searches for the pattern <span class="docEmphasis">ellie</span> in the
      <span class="docEmphasis">/etc/passwd</span> file and is successful. The
      line from <span class="docEmphasis">/etc/passwd</span> is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">?</span> variable is set
      to the exit value of the <span class="docEmphasis">grep</span> command.
      Zero indicates success.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">grep</span> program
      cannot find user <span class="docEmphasis">nicky</span> in the
      <span class="docEmphasis">/etc/passwd</span> file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the <span class="docEmphasis">grep</span> program
      cannot find the pattern, it returns an exit status of one.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">grep</span> fails because
      the file <span class="docEmphasis">/etc/passsswd</span> cannot be opened.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If <span class="docEmphasis">grep</span> cannot find
      the file, it returns an exit status of two.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Multiple Commands and Command Grouping.</b> A command line
can consist of multiple commands. Each command is separated by a semicolon, and
the command line is terminated with a newline.</p>
<h5 id="ch10list10" class="docExampleTitle">Example 10.10 </h5>
<pre>$ <span class="docEmphStrong">ls; pwd; date</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The commands are executed from left to right until the
    newline is reached. Commands may also be grouped so that all of the output
    is either piped to another command or redirected to a file.</td>
  </tr>
</table>

<h5 id="ch10list11" class="docExampleTitle">Example 10.11 </h5>
<pre>$ <span class="docEmphStrong">( ls ; pwd; date ) &gt; outputfile</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The output of each of the commands is sent to the file
    called <span class="docEmphasis">outputfile.</span></td>
  </tr>
</table>

<p class="docText"><b>Conditional Execution of Commands.</b> With conditional
execution, two command strings are separated by two special metacharacters,
<span class="docEmphasis">&amp;&amp;</span> and ||. The command on the right of either
of these metacharacters will or will not be executed based on the exit condition
of the command on the left.</p>
<h5 id="ch10list12" class="docExampleTitle">Example 10.12 </h5>
<pre>$ <span class="docEmphStrong">cc prgm1.c –o prgm1 &amp;&amp; prgm1</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">If the first command is <span class="docEmphasis">
    successful</span> (has a zero exit status), the command after the
    <span class="docEmphasis">&amp;&amp;</span> is executed.</td>
  </tr>
</table>

<h5 id="ch10list13" class="docExampleTitle">Example 10.13 </h5>
<pre>$ <span class="docEmphStrong">cc prog.c &gt;&amp; err || mail bob &lt; err</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">If the first command <span class="docEmphasis">fails</span>
    (has a nonzero exit status), the command after the || is executed.</td>
  </tr>
</table>

<p class="docText"><b>Commands in the Background.</b> Normally, when you execute
a command, it runs in the foreground, and the prompt does not reappear until the
command has completed execution. It is not always convenient to wait for the
command to complete. By placing an ampersand (&amp;) at the end of the command line,
the shell will return the shell prompt immediately and execute the command in
the background concurrently. You do not have to wait to start up another
command. The output from a background job will be sent to the screen as it
processes. Therefore, if you intend to run a command in the background, the
output of that command should be redirected to a file or piped to another device
such as a printer so that the output does not interfere with what you are doing.</p>
<h5 id="ch10list14" class="docExampleTitle">Example 10.14 </h5>
<pre>1   $ <span class="docEmphStrong">man ksh | lp&amp;</span>
2   <span class="docEmphasis">[1]     1557</span>
3   $
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the manual pages for the Korn shell is
      piped to the printer. The ampersand at the end of the command line puts
      the job in the background.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Two numbers appear on the screen: the number in square
      brackets indicates that this is the first job to be placed in the
      background; the second number is the PID, the process identification
      number, of this job.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The Korn shell prompt appears immediately. While your
      program is running in the background, the shell is waiting for another
      command in the foreground.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec6">10.1.6 Command Line History</h4>
<p class="docText">The history mechanism keeps a numbered record of the commands
that you have typed at the command line in a history file. You can recall a
command from the history file and reexecute it without retyping the command. The
<span class="docEmphasis">history</span> built-in command displays the history
list. The default name for the history file is <span class="docEmphasis">.sh_history,</span>
and it is located in your home directory.</p>
<p class="docText">The <span class="docEmphasis">HISTSIZE</span> variable,
accessed when <span class="docEmphasis">ksh</span> first accesses the history
file, specifies how many commands can be accessed from the history file. The
default size is 128. The <span class="docEmphasis">HISTFILE</span> variable
specifies the name of the command history file (<span class="docEmphasis">~/.sh_history</span>
is the default) where commands are stored. The history file grows from one login
session to the next; it becomes very large unless you clean it out. The history
command is a preset alias for the <span class="docEmphasis">fc –l</span>
command.</p>
<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
history</span> Command/Redisplay Commands.</span> The built-in
<span class="docEmphasis">history</span> command lists previously typed commands
preceded by a number. The command can take arguments to control the display.</p>
<h5 id="ch10list15" class="docExampleTitle">Example 10.15 </h5>
<pre>1   $ <span class="docEmphStrong">history</span>            <span class="docEmphasis"># Same as</span> fc –l
    <span class="docEmphasis">1 ls</span>
    <span class="docEmphasis">2 vi file1</span>
    <span class="docEmphasis">3 df</span>
    <span class="docEmphasis">4 ps –eaf</span>
    <span class="docEmphasis">5 history</span>
    <span class="docEmphasis">6 more /etc/passwd</span>
    <span class="docEmphasis">7 cd</span>
    <span class="docEmphasis">8 echo $USER</span>
    <span class="docEmphasis">9 set</span>
    <span class="docEmphasis">10 history</span>

2   $ <span class="docEmphStrong">history –n</span>         <span class="docEmphasis"># Print without line numbers</span>
    <span class="docEmphasis">ls</span>
    <span class="docEmphasis">vi file1</span>
    <span class="docEmphasis">df</span>
    <span class="docEmphasis">ps –eaf</span>
    <span class="docEmphasis">history</span>
    <span class="docEmphasis">more /etc/passwd</span>
    <span class="docEmphasis">cd</span>
    <span class="docEmphasis">echo $USER</span>
    <span class="docEmphasis">set</span>
    <span class="docEmphasis">history</span>
    <span class="docEmphasis">history –n</span>

3   $ <span class="docEmphStrong">history 8</span>          <span class="docEmphasis"># List from 8th command to present</span>
    <span class="docEmphasis">8   echo $USER</span>
    <span class="docEmphasis">9   set</span>
    <span class="docEmphasis">10  history</span>
    <span class="docEmphasis">11  history –n</span>
    <span class="docEmphasis">12  history 8</span>

4   $ <span class="docEmphStrong">history –3</span>         <span class="docEmphasis"># List this command and the 3 preceding it</span>
    <span class="docEmphasis">10  history</span>
    <span class="docEmphasis">11  history –n</span>
    <span class="docEmphasis">12  history 8</span>
    <span class="docEmphasis">13  history –3</span>

5   $ <span class="docEmphStrong">history –1 –5</span>      <span class="docEmphasis"># List last 5 commands, preceding this one</span>
    <span class="docEmphasis">13  history –3       # in reversed order.</span>
    <span class="docEmphasis">12  history 8</span>
    <span class="docEmphasis">11  history –n</span>
    <span class="docEmphasis">10  history</span>
    <span class="docEmphasis">9   set</span>

6   $ <span class="docEmphStrong">history –5 –1</span>      <span class="docEmphasis"># Print last 5 commands, preceding this one</span>
    <span class="docEmphasis">10  history          # in order.</span>
    <span class="docEmphasis">11  history -n</span>
    <span class="docEmphasis">12  history 8</span>
    <span class="docEmphasis">13  history -3</span>
    <span class="docEmphasis">14  history –1 –5</span>

7   $ <span class="docEmphStrong">history</span>            <span class="docEmphasis"># (Different history list)</span>
    <span class="docEmphasis">78  date</span>
    <span class="docEmphasis">79  ls</span>
    <span class="docEmphasis">80  who</span>
    <span class="docEmphasis">81  echo hi</span>
    <span class="docEmphasis">82  history</span>

<span class="docEmphStrong">8</span>   <span class="docEmphStrong">$ history ls echo</span>     <span class="docEmphasis"># Display from most recent</span> ls <span class="docEmphasis">command to</span>
    <span class="docEmphasis">79  ls                # most recent</span> echo <span class="docEmphasis">command.</span>
    <span class="docEmphasis">80  who</span>
    <span class="docEmphasis">81  echo hi</span>

9   $ <span class="docEmphStrong">history –r ls echo</span>      <span class="docEmphasis"># –r reverses the list</span>
    <span class="docEmphasis">81  echo hi</span>
    <span class="docEmphasis">80  who</span>
    <span class="docEmphasis">79  ls</span>
</pre>
<p class="docText"><span class="docEmphStrong">Reexecuting Commands with the
<span class="docEmphasis">r</span> Command.</span> The <span class="docEmphasis">
r</span> command redoes the last command typed at the command line. If the
<span class="docEmphasis">r</span> command is followed by a space and a number,
the command at that number is reexecuted. If the <span class="docEmphasis">r</span>
command is followed by a space and a letter, the last command that began with
that letter is executed. Without any arguments, the <span class="docEmphasis">r</span>
command reexecutes the most previous command on the history list.</p>
<h5 id="ch10list16" class="docExampleTitle">Example 10.16 </h5>
<pre>1   $ <span class="docEmphStrong">r date</span>
    <span class="docEmphasis">date</span>
    <span class="docEmphasis">Mon Feb 15 12:27:35 PST 2001</span>

2   $ <span class="docEmphStrong">r 3</span>   <span class="docEmphasis">redo command number 3</span>
    <span class="docEmphasis">df</span>
    <span class="docEmphasis">Filesystem   kbytes     used      avail     capacity    Mounted on</span>
    <span class="docEmphasis">/dev/sd0a    7735       6282      680       90%         /</span>
    <span class="docEmphasis">/dev/sd0g    144613     131183    0         101%        /usr</span>
    <span class="docEmphasis">/dev/sd2c    388998     211395    138704    60%         /home.</span>

3   $ <span class="docEmphStrong">r vi</span>         <span class="docEmphasis"># Redo the last command that began</span> with <span class="docEmphasis">pattern vi.</span>
4   $ <span class="docEmphStrong">r vi file1=file2</span>    <span class="docEmphasis"># Redo last command that began with vi</span>
                          <span class="docEmphasis"># and substitute the first occurrence of</span>
                          <span class="docEmphasis"># file1 with file2.</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The last command, <span class="docEmphasis">date,</span>
      is reexecuted.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The third command in the history file is executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The last command, starting with the string
      <span class="docEmphasis">vi,</span> is executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The string <span class="docEmphasis">file1</span> is
      replaced with the string <span class="docEmphasis">file2.</span> The last
      command, <span class="docEmphasis">vi file1,</span> is replaced with
      <span class="docEmphasis">vi file2.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Command Line Editing.</b> The Korn shell provides two
built-in editors, <span class="docEmphasis">emacs</span> and
<span class="docEmphasis">vi,</span> that allow you to interactively edit your
history list. To enable the <span class="docEmphasis">vi</span> editor, add the
<span class="docEmphasis">set</span> command listed below and put this line in
your <span class="docEmphasis">.profile</span> file. The
<span class="docEmphasis">emacs</span> built-in editor works on lines in the
history file one line at a time, whereas the <span class="docEmphasis">vi</span>
built-in editor works on commands consisting of more than one line. To set
<span class="docEmphasis">vi,</span> type</p>
<pre><span class="docEmphStrong">set –o vi</span>

  or

VISUAL=vi

  or

EDITOR=/usr/bin/vi
</pre>
<p class="docText">If using <span class="docEmphasis">emacs,</span> type</p>
<pre><span class="docEmphStrong">set –o emacs</span>

   or

VISUAL=emacs

   or

EDITOR=/usr/bin/emacs
</pre>
<p class="docText">Note that <span class="docEmphasis">set –o</span>
<span class="docEmphasis">vi</span> overrides <span class="docEmphasis">VISUAL,</span>
and <span class="docEmphasis">VISUAL</span> overrides <span class="docEmphasis">
EDITOR.</span></p>
<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">vi</span>
Built-In Editor.</span> To edit the history list, press the Esc key and use the
standard keys that you would use in <span class="docEmphasis">vi</span> for
moving up and down, left and right, deleting, inserting, and changing text. See
<a class="docLink" href="#ch10table02">Table 10.2</a>. After making the edit,
press the Enter key. The command will be executed and added to the bottom of the
history list. To scroll upward in the history file, press the Esc key and then
the K key.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table02" class="docTableTitle">Table 10.2. <span class="docEmphasis">vi</span>
  Commands</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Moving Through the History File</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc k <span class="docEmphasis">or</span>
    + </td>
    <td class="docTableCell" vAlign="top">Move up the history list. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc j <span class="docEmphasis">or</span>
    - </td>
    <td class="docTableCell" vAlign="top">Move down the history list. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">G</span>
    </td>
    <td class="docTableCell" vAlign="top">Move to first line in history file.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">5G</span>
    </td>
    <td class="docTableCell" vAlign="top">Move to fifth command in history file
    for <span class="docEmphasis">string.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">/string</span>
    </td>
    <td class="docTableCell" vAlign="top">Search upward through history file.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">?</span>
    </td>
    <td class="docTableCell" vAlign="top">String search downward through history
    file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Moving Around on a Line</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">h</span>
    </td>
    <td class="docTableCell" vAlign="top">Move left on a line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">l</span>
    </td>
    <td class="docTableCell" vAlign="top">Move right on a line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">b</span>
    </td>
    <td class="docTableCell" vAlign="top">Move backward a word. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">e</span> or
    <span class="docEmphasis">w</span> </td>
    <td class="docTableCell" vAlign="top">Move forward a word. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">^</span> or
    <span class="docEmphasis">0</span> </td>
    <td class="docTableCell" vAlign="top">Move to beginning of first character
    on the line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$</span>
    </td>
    <td class="docTableCell" vAlign="top">Move to end of line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Editing with vi</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">a A</span>
    </td>
    <td class="docTableCell" vAlign="top">Append text. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">i I</span>
    </td>
    <td class="docTableCell" vAlign="top">Insert text. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Editing with vi</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">dd dw x</span>
    </td>
    <td class="docTableCell" vAlign="top">Delete text into a buffer (line, word,
    or character). </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">cc C</span>
    </td>
    <td class="docTableCell" vAlign="top">Change text. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">u U</span>
    </td>
    <td class="docTableCell" vAlign="top">Undo. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">yy Y</span>
    </td>
    <td class="docTableCell" vAlign="top">Yank (copy a line into buffer). </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">p P</span>
    </td>
    <td class="docTableCell" vAlign="top">Put yanked or deleted line down below
    or above the line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">r R</span>
    </td>
    <td class="docTableCell" vAlign="top">Replace a letter or any amount of text
    on a line. </td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
emacs</span> Built-In Editor.</span> To start moving backward through the
history file, press ^P. To move forward, press ^N . Use
<span class="docEmphasis">emacs</span> editing commands to change or correct
text, then press Enter and the command will be reexecuted. See
<a class="docLink" href="#ch10table03">Table 10.3</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table03" class="docTableTitle">Table 10.3. <span class="docEmphasis">emacs</span>
  Commands</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Moving Through the History File</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-P </td>
    <td class="docTableCell" vAlign="top">Move up history file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-N </td>
    <td class="docTableCell" vAlign="top">Move down history file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-B </td>
    <td class="docTableCell" vAlign="top">Move backward one character. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-R </td>
    <td class="docTableCell" vAlign="top">Search backwards for string. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc B </td>
    <td class="docTableCell" vAlign="top">Move back one word. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-F </td>
    <td class="docTableCell" vAlign="top">Move forward one character. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc F </td>
    <td class="docTableCell" vAlign="top">Move forward one word. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-A </td>
    <td class="docTableCell" vAlign="top">Move to the beginning of the line.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-E </td>
    <td class="docTableCell" vAlign="top">Move to the end of the line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc &lt; </td>
    <td class="docTableCell" vAlign="top">Move to the first line of the history
    file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc &gt; </td>
    <td class="docTableCell" vAlign="top">Move to the last line of the history
    file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Editing with emacs</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-U </td>
    <td class="docTableCell" vAlign="top">Delete the line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-Y </td>
    <td class="docTableCell" vAlign="top">Put the line back. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-K </td>
    <td class="docTableCell" vAlign="top">Delete from cursor to the end line.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-D </td>
    <td class="docTableCell" vAlign="top">Delete a letter. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc D </td>
    <td class="docTableCell" vAlign="top">Delete one word forward. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc H </td>
    <td class="docTableCell" vAlign="top">Delete one word backward. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Esc space </td>
    <td class="docTableCell" vAlign="top">Set a mark at cursor position. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-X Ctrl-X </td>
    <td class="docTableCell" vAlign="top">Exchange cursor and mark. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Ctrl-P Ctrl-Y </td>
    <td class="docTableCell" vAlign="top">Push region from cursor to mark into a
    buffer (Ctrl-P) and put it down (Ctrl-Y). </td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong"><span class="docEmphasis">FCEDIT</span></span><span id="ENB10-2"><a class="docLink" href="#EN10-2"><sup>[2]</sup></a></span>
<span class="docEmphStrong">and Editing Commands.</span> The
<span class="docEmphasis">fc</span> command is a built-in command that can be
used with the <span class="docEmphasis">FCEDIT</span> variable (typically set in
the <span class="docEmphasis">.profile</span> file) to invoke the editor of your
choice for editing the history file. This can be any editor on your system. The
<span class="docEmphasis">FCEDIT</span> variable is set to the full pathname of
your favorite editor. If <span class="docEmphasis">FCEDIT</span> is not set, the
default editor, <span class="docEmphasis">/bin/ed,</span> is invoked when you
type the <span class="docEmphasis">fc</span> command. </p>

<p class="docText">The <span class="docEmphasis">FCEDIT</span> variable should
be set to the chosen editor. You can specify a number of items from the history
list that you want to edit. After you edit the commands, the Korn shell will
execute the whole file. Any commands that are preceded by a pound sign (#) will
be treated as comments and will not be executed. See
<a class="docLink" href="#ch10table04">Table 10.4</a> for more on commenting and
filename expansion.</p>
<h5 id="ch10list17" class="docExampleTitle">Example 10.17 </h5>
<p class="docText">
<img alt="graphics/10prfig01.gif" src="10prfig01.gif" border="0" width="500" height="365"></p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">FCEDIT</span> variable
      can be assigned the pathname for any of the UNIX text editors you have on
      your system, such as <span class="docEmphasis">vi, emacs, textedit,</span>
      etc. If not set, the <span class="docEmphasis">ed</span> editor is the
      default.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">pwd</span> command is
      typed at the command line. It will be placed in the
      <span class="docEmphasis">history</span> file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fc</span> command caused
      the editor (set in <span class="docEmphasis">FCEDIT</span>) to be invoked
      with the last command typed in the editor window. If the user writes and
      quits the editor, any commands typed there will be executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">history</span> command
      lists recently typed commands.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fc</span> command is used
      to start up the editor with the last three commands from the
      <span class="docEmphasis">history</span> file in the editor's buffer.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec7">10.1.7 Commenting and Filename Expansion</h4>
<p class="docText">Filename expansion is a mechanism that allows the user to
type part of a filename and press the escape key to see the rest of the
filename(s). In the examples, [Esc] represents the escape key.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table04" class="docTableTitle">Table 10.4. Using the Esc Key and Filename Expansion</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Combination</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Result</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">command
    [Esc]#</span> </td>
    <td class="docTableCell" vAlign="top"># precedes <span class="docEmphasis">
    command</span> with a #; puts it on the history list commented;
    <span class="docEmphasis">command</span> will not be executed. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">command
    [Esc]_</span> </td>
    <td class="docTableCell" vAlign="top">Underscore inserts the last word of
    the last <span class="docEmphasis">command</span> at the cursor position.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">command
    [Esc] 2_</span> </td>
    <td class="docTableCell" vAlign="top">Inserts the second word of the last
    <span class="docEmphasis">command</span> at the cursor position. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">word[Esc] *</span>
    </td>
    <td class="docTableCell" vAlign="top">*replaces the current
    <span class="docEmphasis">word</span> with all files matched. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">word[Esc] \</span>
    </td>
    <td class="docTableCell" vAlign="top">\ replaces the current
    <span class="docEmphasis">word</span> with the first filename that starts
    with the same characters; filename expansion. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">word[Esc]=</span>
    </td>
    <td class="docTableCell" vAlign="top">Displays all filenames beginning with
    the same character as the current <span class="docEmphasis">word</span> and
    displays them in a numbered list. </td>
  </tr>
</table>

<h5 id="ch10list18" class="docExampleTitle">Example 10.18 </h5>
<pre>    (Press the Esc Key for [Esc].

1   $ <span class="docEmphStrong">ls a[Esc]=</span>
    <span class="docEmphasis">1) abc</span>
    <span class="docEmphasis">2) abc1</span>
    <span class="docEmphasis">3) abc122</span>
    <span class="docEmphasis">4) abc123</span>
    <span class="docEmphasis">5) abc2</span>

2   $ <span class="docEmphStrong">ls a[Esc]*</span>
    <span class="docEmphasis">ls abc abc1 abc122 abc123 abc2</span>
    <span class="docEmphasis">abc   abc1  abc122 abc123 abc2</span>

3   $ <span class="docEmphStrong">print apples pears peaches</span>
    <span class="docEmphasis">apples pears peaches</span>

4   $ <span class="docEmphStrong">print [Esc]_</span>
    <span class="docEmphasis">print peaches</span>
    <span class="docEmphasis">peaches</span>

5   $ <span class="docEmphStrong">print apples pears peaches plums</span>
   <span class="docEmphasis">apples pears peaches</span>

6   $ <span class="docEmphStrong">print [Esc]2_</span>
    <span class="docEmphasis">print pears</span>
    <span class="docEmphasis">pears</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">By typing an <span class="docEmphasis">a,</span>
      followed by the Esc key and an equal sign (=), all files starting with
      <span class="docEmphasis">a</span> are numbered and listed. (The numbers
      do not really serve any special purpose.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">By typing an <span class="docEmphasis">a,</span> then
      the Esc key and an asterisk (*), the filenames starting with
      <span class="docEmphasis">a</span> are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> command
      displays its arguments: <span class="docEmphasis">apples, pears,</span>
      and <span class="docEmphasis">peaches.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The Esc key, followed by an underscore (_), is replaced
      with the last argument.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> command
      displays its arguments: <span class="docEmphasis">apples, pears,</span>
      and <span class="docEmphasis">peaches.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The Esc key, followed by the number
      <span class="docEmphasis">2</span> and an underscore, is replaced by the
      second argument. The command (<span class="docEmphasis">print</span>) is
      the first argument, starting at word zero.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec8">10.1.8 Aliases</h4>
<p class="docText">An alias is a Korn shell or user-defined abbreviation for a
command. The alias name contains alphanumeric characters. Default aliases are
provided by the shell and can be redefined or unset. Unlike the C shell aliases,
the Korn shell does not support passing arguments. (If you need to use
arguments, see &quot;<a class="docLink" href="#ch10lev2sec16">Functions</a>&quot;.)</p>
<p class="docText">Aliases can be exported to subshells by storing them in the
<span class="docEmphasis">ENV</span> file. (The commands in the
<span class="docEmphasis">ENV</span> file are executed every time a new shell is
spawned.) In the 1988 version of the Korn shell, the <span class="docEmphasis">
–x</span> option allows aliases to be exported to subshells as long as the new
shell is not a separate invocation of <span class="docEmphasis">ksh.</span>
Tracked aliases are provided by the Korn shell to speed up the time it takes the
shell to search the path. Aliases can alias themselves; that is, they are
recursive.</p>
<p class="docText"><b>Listing Aliases.</b> The alias built-in command lists all
set aliases.</p>
<h5 id="ch10list19" class="docExampleTitle">Example 10.19 </h5>
<pre>1   $ <span class="docEmphStrong">alias</span>
2   autoload=typeset –fu
3   false=let 0
4   functions=typeset –f
5   hash=alias –t
6   history=fc –l
7   integer=typset –i
8   r=fc –e –
9   stop=kill –STOP
10  suspend=kill –STOP $$
11  true=:
12  type=whence –v
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">alias</span> command,
      without arguments, lists all aliases. This is a list of preset aliases,
      including those you have set.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">autoload</span> alias is
      used for invoking functions dynamically.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">false</span> alias is
      used in expressions testing for a false condition.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">functions</span> alias
      lists all functions and their definitions.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">hash</span> alias lists
      all tracked aliases.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">history</span> alias
      lists all commands in the history file, <span class="docEmphasis">.sh_history,</span>
      preceded by a number.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">integer</span> alias
      allows you to create integer-type variables.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">r</span> alias lets you
      redo a previous command from the history list.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">stop</span> alias causes
      a process to be suspended if a job number or PID is provided to the
      <span class="docEmphasis">kill</span> command. The job can be resumed in
      the foreground by typing <span class="docEmphasis">fg.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">suspend</span> alias
      suspends the current job by sending the <span class="docEmphasis">STOP</span>
      signal and the PID (<span class="docEmphasis">$$</span>) of this process
      to the <span class="docEmphasis">kill</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">true</span> alias is set
      to the do-nothing command, often used to start an infinite loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">type</span> alias
      indicates the type of command you are executing: an alias, a binary
      executable, and so forth.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Creating an Alias.</b> The user can create aliases in the
Korn shell. An alias is a nickname for an existing command or commands. The real
command(s) is substituted for the alias when the shell evaluates the command
line.</p>
<h5 id="ch10list20" class="docExampleTitle">Example 10.20 </h5>
<pre>1   $ <span class="docEmphStrong">alias cl='clear'</span>
2   $ <span class="docEmphStrong">alias l='ls –laF'</span>
3   $ <span class="docEmphStrong">alias ls='ls -aF'</span>
4   $ <span class="docEmphStrong">\ls ..</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The alias <span class="docEmphasis">cl</span> is an
      alias for <span class="docEmphasis">clear.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The alias is <span class="docEmphasis">l.</span> The
      letter <span class="docEmphasis">l</span> is a nickname for the command
      <span class="docEmphasis">ls –laF.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The alias <span class="docEmphasis">ls</span> is
      assigned the command <span class="docEmphasis">ls –aF.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The backslash turns off the meaning of the alias for
      the execution of this line. The real <span class="docEmphasis">ls</span>
      command, not the alias, is executed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Removing an Alias.</b> The <span class="docEmphasis">
unalias</span> command deletes an alias.</p>
<h5 id="ch10list21" class="docExampleTitle">Example 10.21 </h5>
<pre><span class="docEmphStrong">unalias cl</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The alias <span class="docEmphasis">cl</span> is removed
    from the list of set aliases.</td>
  </tr>
</table>

<p class="docText"><b>Tracked Aliases.</b> To reduce the amount of time needed
to do a search of the path, the Korn shell creates an alias when a command is
first encountered and sets the alias equal to the full pathname of the command.
This is called a <span class="docEmphasis">tracked alias.</span><span id="ENB10-3"><a class="docLink" href="#EN10-3"><sup>[3]</sup></a></span>
</p>

<p class="docText">The Korn shell has some preset tracked aliases that are
defined when it is installed. To use tracked aliases, the
<span class="docEmphasis">set –o trackall</span> command is issued; it is
normally set in the <span class="docEmphasis">ENV</span> file. To see all
tracked aliases, type <span class="docEmphasis">alias –t.</span></p>
<h5 id="ch10list22" class="docExampleTitle">Example 10.22 </h5>
<pre>$ <span class="docEmphStrong">alias –t</span>
<span class="docEmphasis">chmod=/bin/chmod</span>
<span class="docEmphasis">ls=/bin/ls</span>
<span class="docEmphasis">vi=/usr/ucb/vi</span>
<span class="docEmphasis">who=/bin/who</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The <span class="docEmphasis">–t</span> option to the
    built-in <span class="docEmphasis">alias</span> command displays those
    commands that have been aliased via the tracking mechanism. When the user
    types any of these commands, the shell will not search the path, but use the
    alias definition to invoke the command.</td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec9">10.1.9 Job Control</h4>
<p class="docText">Job control is used to control the execution of background
and foreground jobs.</p>
<p class="docText">To use Korn shell job control, the monitor option (<span class="docEmphasis">set
–o monitor</span>) must be set on systems that do not support job control. See
<a class="docLink" href="#ch10table05">Table 10.5</a> for job control commands.</p>
<h5 id="ch10list23" class="docExampleTitle">Example 10.23 </h5>
<pre>1   $ <span class="docEmphStrong">vi</span>
    <span class="docEmphasis">[1]  + Stopped           # vi</span>

2   $ <span class="docEmphStrong">sleep 25&amp;</span>
    <span class="docEmphasis">[2] 4538</span>


3   $ <span class="docEmphStrong">jobs</span>
    <span class="docEmphasis">[2] +  Running           # sleep 25&amp;</span>
    <span class="docEmphasis">[1] –  Stopped           # vi</span>

4   $ <span class="docEmphStrong">jobs –l</span>
    <span class="docEmphasis">[2] + 4538   Running     # sleep 25&amp;</span>
    <span class="docEmphasis">[1] – 4537   Stopped     # vi</span>

5   $ <span class="docEmphStrong">fg %1</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">After the <span class="docEmphasis">vi</span> editor is
      invoked, you can press ^Z (Control-Z) to suspend the
      <span class="docEmphasis">vi</span> session. The editor will be suspended
      in the background, and after the message <span class="docEmphasis">Stopped</span>
      appears, the shell prompt will appear immediately.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The ampersand at the end of the command causes the
      <span class="docEmphasis">sleep</span> command, with an argument of
      <span class="docEmphasis">25,</span> to execute in the background. The
      notation [<span class="docEmphasis">2</span>] means that this is the
      second job to be run in the background and the PID of this job is
      <span class="docEmphasis">4538.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">jobs</span> command
      displays the jobs currently in the background.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">jobs</span> command with
      the <span class="docEmphasis">–l</span> option displays the processes
      (jobs) running in the background and the PID numbers of those jobs.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fg</span> command
      followed by a percent sign and the job number will bring that numbererd
      job into the foreground. Without a number, <span class="docEmphasis">fg</span>
      brings the most recently backgrounded job back into the foreground.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p>&nbsp;</p>
<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table05" class="docTableTitle">Table 10.5. Job Control Commands</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">jobs</span>
    </td>
    <td class="docTableCell" vAlign="top">Lists all unfinished processes in a
    numerically ordered list where the number of the job is enclosed in
    brackets. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">jobs –l</span>
    </td>
    <td class="docTableCell" vAlign="top">Same as <span class="docEmphasis">
    jobs,</span> but includes the PID number of the job. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">^Z</span>
    </td>
    <td class="docTableCell" vAlign="top">Stops the current job. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fg %n</span>
    </td>
    <td class="docTableCell" vAlign="top">Runs background job in foreground.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">bg %n</span>
    </td>
    <td class="docTableCell" vAlign="top">Runs job in background. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">wait %n</span>
    </td>
    <td class="docTableCell" vAlign="top">Waits for job number
    <span class="docEmphasis">n</span> to finish. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">kill %n</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Kills</span>
    job number <span class="docEmphasis">n.</span> </td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec10">10.1.10 Metacharacters</h4>
<p class="docText">Metacharacters are special characters used to represent
something other than themselves. <a class="docLink" href="#ch10table06">Table
10.6</a> lists some common Korn shell metacharacters and their functions.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table06" class="docTableTitle">Table 10.6. Shell Metacharacters</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\</span>
    </td>
    <td class="docTableCell" vAlign="top">Literal interpretation of the
    following character. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&amp;</span>
    </td>
    <td class="docTableCell" vAlign="top">Background processing. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">;</span>
    </td>
    <td class="docTableCell" vAlign="top">Command separator. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$</span>
    </td>
    <td class="docTableCell" vAlign="top">Variable substitution. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">?</span>
    </td>
    <td class="docTableCell" vAlign="top">Match for a single character. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">[abc]</span>
    </td>
    <td class="docTableCell" vAlign="top">Match for one from a set of
    characters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">[!abc]</span>
    </td>
    <td class="docTableCell" vAlign="top">Match for one
    <span class="docEmphasis">not</span> from the set of characters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">*</span>
    </td>
    <td class="docTableCell" vAlign="top">Match for zero or more characters.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">(cmds )</span>
    </td>
    <td class="docTableCell" vAlign="top">Execute commands in a subshell. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">{cmds}</span>
    </td>
    <td class="docTableCell" vAlign="top">Execute commands in current shell.
    </td>
  </tr>
</table>

<h5 id="ch10list24" class="docExampleTitle">Example 10.24 </h5>
<pre>1   $ <span class="docEmphStrong">ls -d *</span>    <span class="docEmphasis">all files are displayed</span>
    <span class="docEmphasis">abc   abc122   abc2  file1.bak file2.bak nonsense  nothing one</span>
    <span class="docEmphasis">abc1 abc123   file1   file2   none    noone</span>

2   $ <span class="docEmphStrong">print hello \</span>     <span class="docEmphasis"># The carriage return is escaped</span>
    &gt; <span class="docEmphStrong">there</span>
    <span class="docEmphasis">hello there</span>

3   $ <span class="docEmphStrong">rusers&amp;</span>           <span class="docEmphasis"># Process the rusers command in the background</span>
    <span class="docEmphasis">[1]   4334</span>
    $

4   $ <span class="docEmphStrong">who; date; uptime</span>     <span class="docEmphasis"># Commands are executed one at a time</span>
    <span class="docEmphasis">ellie  console Feb 10 10:46</span>
    <span class="docEmphasis">ellie  ttyp0   Feb 15 12:41</span>
    <span class="docEmphasis">ellie  ttyp1   Feb 10 10:47</span>
    <span class="docEmphasis">ellie  ttyp2   Feb 5  10:53</span>
    <span class="docEmphasis">Mon Feb 15 17:16:43 PST 2001</span>
    <span class="docEmphasis">5:16pm up 5 days, 6:32, 1 user, load average: 0.28, 0.23, 0.01</span>

5   $ <span class="docEmphStrong">print $HOME</span>       <span class="docEmphasis"># The value of the HOME variable is printed</span>
    <span class="docEmphasis">/home/jody/ellie</span>

6   $ <span class="docEmphStrong">print $LOGNAME</span>  <span class="docEmphasis"># The value of the LOGNAME variable is printed</span>
    <span class="docEmphasis">ellie</span>

7   $ <span class="docEmphStrong">( pwd; cd / ; pwd )</span>
    <span class="docEmphasis">/home/jody/ellie</span>
    <span class="docEmphasis">/</span>
    $ <span class="docEmphStrong">pwd</span>
    <span class="docEmphasis">/home/jody/ellie</span>

8   $ <span class="docEmphStrong">{ pwd; cd /; pwd; }</span>
    <span class="docEmphasis">/home/jody/ellie</span>
    <span class="docEmphasis">/</span>
    $ <span class="docEmphStrong">pwd</span>
    /

9   $ <span class="docEmphStrong">( date; pwd; ls ) &gt; outfile</span>
    $ <span class="docEmphStrong">cat outfile</span>
    <span class="docEmphasis">Mon Feb 15 15:56:34 PDT 2001</span>
    <span class="docEmphasis">/home/jody/ellie</span>
    <span class="docEmphasis">foo1</span>
    <span class="docEmphasis">foo2</span>
    <span class="docEmphasis">foo3</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The asterisk matches all the files in the current
      directory. (The –<span class="docEmphasis">d</span> option to the
      <span class="docEmphasis">ls</span> command prevents the contents of
      subdirectories from being displayed.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The backslash escapes the newline so that the command
      line can be continued on the next line.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The ampersand (<span class="docEmphasis">&amp;</span>)
      causes the <span class="docEmphasis">rusers</span> program to be executed
      in the background; the shell prompt returns immediately. Both processes
      will run concurrently.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Each command is separated by a semicolon. Each command
      will be executed one at a time.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If a dollar sign precedes the variable, the shell will
      perform variable substitution. The value of the <span class="docEmphasis">
      env</span> variable, <span class="docEmphasis">HOME,</span> is displayed.
      The <span class="docEmphasis">HOME</span> variable contains the full
      pathname of the user's home directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Again, the dollar sign precedes the variable name. The
      value of the <span class="docEmphasis">LOGNAME</span> variable is the
      user's login name.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The parentheses indicate that the enclosed commands
      will be executed in a subshell. The <span class="docEmphasis">cd</span>
      command is built into the shell, so that each shell that is invoked has
      its own copy of <span class="docEmphasis">cd.</span> The
      <span class="docEmphasis">pwd</span> command prints the present working
      directory, <span class="docEmphasis">/home/jody/ellie.</span> After
      <span class="docEmphasis">cd</span>ing to the <span class="docEmphasis">
      root</span> directory, the <span class="docEmphasis">pwd</span> command
      displays that the new directory is <span class="docEmphasis">root.</span>
      After the subshell exits, the output of the <span class="docEmphasis">pwd</span>
      command in the parent shell indicates that the directory is still set to
      <span class="docEmphasis">/home/jody/ellie</span> as it was before
      entering the subshell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The curly braces indicate that the enclosed commands
      will be executed in the current shell. The <span class="docEmphasis">pwd</span>
      command prints the present working directory, <span class="docEmphasis">
      /home/jody/ellie.</span> After <span class="docEmphasis">cd</span>ing to
      the <span class="docEmphasis">root</span> directory, the
      <span class="docEmphasis">pwd</span> command displays that the new
      directory is <span class="docEmphasis">root.</span> After the commands
      within the curly braces exit, the output of the <span class="docEmphasis">
      pwd</span> command indicates that the directory is still set to the root
      directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The parentheses are used to group the commands so that
      the output of all three commands is sent to <span class="docEmphasis">
      outfile.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec11">10.1.11 Filename Substitution (Wildcards)</h4>
<p class="docText">When evaluating the command line, the shell uses
metacharacters to abbreviate filenames or pathnames that match a certain set of
characters, often called <span class="docEmphasis">wildcards.</span> The
filename substitution metacharacters listed in
<a class="docLink" href="#ch10table07">Table 10.7</a> are expanded into an
alphabetically listed set of filenames. The process of expanding a metacharacter
into filenames is also called filename substitution, or
<span class="docEmphasis">globbing.</span> If a metacharacter is used and there
is no filename that matches it, the Korn shell treats the metacharacter as a
literal character.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table07" class="docTableTitle">Table 10.7. Shell Metacharacters and Filename
  Substitution</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Metacharacter</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">*</span>
    </td>
    <td class="docTableCell" vAlign="top">Matches zero or more characters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">?</span>
    </td>
    <td class="docTableCell" vAlign="top">Matches exactly one character. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">[abc]</span>
    </td>
    <td class="docTableCell" vAlign="top">Matches one character in the set,
    <span class="docEmphasis">a,</span> <span class="docEmphasis">b,</span> or
    <span class="docEmphasis">c.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">[a–z]</span>
    </td>
    <td class="docTableCell" vAlign="top">Matches one character in the range:
    any character in the set between <span class="docEmphasis">a</span> and
    <span class="docEmphasis">z.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">~</span>
    </td>
    <td class="docTableCell" vAlign="top">Substitutes the user's home directory
    for ~. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\</span>
    </td>
    <td class="docTableCell" vAlign="top">Escapes or disables the metacharacter.
    </td>
  </tr>
</table>

<p class="docText"><b>The Asterisk.</b> The asterisk is a wildcard that matches
for zero or more of any character in a filename.</p>
<h5 id="ch10list25" class="docExampleTitle">Example 10.25 </h5>
<pre>1   $ <span class="docEmphStrong">ls *</span>
    <span class="docEmphasis">abc abc1 abc122 abc123 abc2 file1 file1.bak file2 file2.bak none</span>
    <span class="docEmphasis">nonsense noone nothing nowhere one</span>

2   $ <span class="docEmphStrong">ls *.bak</span>
    <span class="docEmphasis">file1.bak file2.bak</span>

3   $ <span class="docEmphStrong">print a*c</span>
    <span class="docEmphasis">abc</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The asterisk expands to all of the files in the present
      working directory. All of the files are passed to
      <span class="docEmphasis">ls</span> and displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All files starting with zero or more characters and
      ending with <span class="docEmphasis">.bak</span> are matched and listed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All files starting with <span class="docEmphasis">a,</span>
      followed by zero or more characters, and ending in
      <span class="docEmphasis">c</span> are matched and passed as arguments to
      the <span class="docEmphasis">print</span> command.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>The Question Mark.</b> The question mark represents a
single character in a filename. When a filename contains one or more question
marks, the shell performs filename substitution by replacing the question mark
with the character it matches in the filename.</p>
<h5 id="ch10list26" class="docExampleTitle">Example 10.26 </h5>
<pre>1   $ <span class="docEmphStrong">ls</span>
    <span class="docEmphasis">abc abc1 abc122 abc123 abc2 file1 file1.bak file2 file2.bak</span>
    <span class="docEmphasis">none nonsense noone nothing nowhere one</span>

2   $ <span class="docEmphStrong">ls a?c?</span>
    <span class="docEmphasis">abc1 abc2</span>

3   $ <span class="docEmphStrong">ls ??</span>
    <span class="docEmphasis">?? not found</span>

4   $ <span class="docEmphStrong">print abc???</span>
    <span class="docEmphasis">abc122 abc123</span>

5   $ <span class="docEmphStrong">print ??</span>
    <span class="docEmphasis">??</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The files in the current directory are listed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Filenames containing four characters are matched and
      listed if the filename starts with an <span class="docEmphasis">a,</span>
      followed by a single character, followed by a <span class="docEmphasis">c</span>
      and a single character.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Filenames containing exactly two characters are listed.
      There are none, so the two question marks are treated as literal
      characters. Since there is no file in the directory called
      <span class="docEmphasis">??,</span> the shell sends the message
      <span class="docEmphasis">?? not found.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Filenames containing six characters are matched and
      printed, starting with <span class="docEmphasis">abc</span> and followed
      by exactly three of any character.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ksh</span>
      <span class="docEmphasis">print</span> function gets the two question
      marks as an argument. The shell tries to match for any filenames with
      exactly two characters. There are no files in the directory that contain
      exactly two characters. The shell treats the question mark as a literal
      question mark if it cannot find a match. The two literal question marks
      are passed as arguments to the <span class="docEmphasis">print</span>
      command.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>The Square Brackets.</b> Brackets are used to match
filenames containing <span class="docEmphasis">one</span> character from a set
or range of characters.</p>
<h5 id="ch10list27" class="docExampleTitle">Example 10.27 </h5>
<pre>1   $ <span class="docEmphStrong">ls</span>
    <span class="docEmphasis">abc abc1 abc122 abc123 abc2 file1 file1.bak file2 file2.bak</span>
    <span class="docEmphasis">none nonsense noone nothing nowhere one</span>
2   $ <span class="docEmphStrong">ls abc[123]</span>
    <span class="docEmphasis">abc1 abc2</span>

3   $ <span class="docEmphStrong">ls abc[1–3]</span>
    <span class="docEmphasis">abc1 abc2</span>

4   $ <span class="docEmphStrong">ls [a–z][a–z][a–z]</span>
    <span class="docEmphasis">abc one</span>

5   $ <span class="docEmphStrong">ls [!f–z]???</span>
    <span class="docEmphasis">abc1 abc2</span>

6   $ <span class="docEmphStrong">ls abc12[2-3]</span>
    <span class="docEmphasis">abc122 abc123</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All of the files in the present working directory are
      listed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All four-character names are matched and listed if the
      filename starts with <span class="docEmphasis">abc,</span> followed by
      <span class="docEmphasis">1,</span> <span class="docEmphasis">2,</span> or
      <span class="docEmphasis">3.</span> Only one character from the set in the
      brackets is matched for a filename.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All four-character filenames are matched and listed if
      the filename starts with <span class="docEmphasis">abc,</span> and is
      followed by a number in the range from <span class="docEmphasis">1</span>
      to <span class="docEmphasis">3.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All three-character filenames are matched and listed,
      if the filename contains exactly three lowercase alphabetic characters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All four-character files are listed if the first
      character is <span class="docEmphasis">not</span> a letter between
      <span class="docEmphasis">f</span> and <span class="docEmphasis">z,</span>
      followed by three of any character (<span class="docEmphasis">???</span>).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Files are listed if the filenames contain
      <span class="docEmphasis">abc12,</span> followed by
      <span class="docEmphasis">2</span> or <span class="docEmphasis">3.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Escaping the Metacharacters.</b> To use a metacharacter as
a literal character, use the backslash to prevent the metacharacter from being
interpreted.</p>
<h5 id="ch10list28" class="docExampleTitle">Example 10.28 </h5>
<pre>1   $ <span class="docEmphStrong">ls</span>
    <span class="docEmphasis">abc file1 youx</span>

2   $ <span class="docEmphStrong">print How are you?</span>
    <span class="docEmphasis">How are youx</span>

3   $ <span class="docEmphStrong">print How are you\?</span>
    <span class="docEmphasis">How are you?</span>

4   $ <span class="docEmphStrong">print When does this line \</span>
    <span class="docEmphStrong">&gt; ever end\?</span>
    <span class="docEmphasis">When does this line ever end?</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The files in the present working directory are listed.
      Note the file <span class="docEmphasis">youx.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The shell will perform filename expansion on the
      question mark. Any files in the current directory starting with
      <span class="docEmphasis">y</span>-<span class="docEmphasis">o</span>-<span class="docEmphasis">u</span>
      and followed by exactly one character are matched and substituted in the
      string. The filename <span class="docEmphasis">youx</span> will be
      substituted in the string to read, <span class="docEmphasis">How are youx</span>
      (probably not what you wanted to happen).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">By preceding the question mark (<span class="docEmphasis">?</span>)
      with a backslash, it is escaped, meaning that the shell will not try to
      interpret it as a wildcard.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The newline is escaped by preceding it with a
      backslash. The secondary prompt is displayed until the string is
      terminated with a newline. The question mark (<span class="docEmphasis">?</span>)
      is escaped to protect it from filename expansion.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Tilde and Hyphen Expansion.</b> The tilde character was
adopted by the Korn shell (from the C shell ) for pathname expansion. The tilde
by itself evaluates to the full pathname of the user's home directory. When the
tilde is appended with a username, it expands to the full pathname of that user</p>
<p class="docText">The hyphen character refers to the previous working
directory; <span class="docEmphasis">OLDPWD</span> also refers to the previous
working directory.</p>
<h5 id="ch10list29" class="docExampleTitle">Example 10.29 </h5>
<pre>1   $ <span class="docEmphStrong">echo ~</span>
    <span class="docEmphasis">/home/jody/ellie</span>

2   $ <span class="docEmphStrong">echo ~joe</span>
    <span class="docEmphasis">/home/joe</span>

3   $ <span class="docEmphStrong">echo ~+</span>
    <span class="docEmphasis">/home/jody/ellie/perl</span>

4   $ <span class="docEmphStrong">echo ~–</span>
    <span class="docEmphasis">/home/jody/ellie/prac</span>

5   $ <span class="docEmphStrong">echo $OLDPWD</span>
    <span class="docEmphasis">/home/jody/ellie/prac</span>

6   $ <span class="docEmphStrong">cd –</span>
    <span class="docEmphasis">/home/jody/ellie/prac</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The tilde evaluates to the full pathname of the user's
      home directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The tilde preceding the username evaluates to the full
      pathname of <span class="docEmphasis">joe's</span> home directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">~+</span> notation
      evaluates to the full pathname of the working directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">~–</span> notation
      evaluates to the previous working directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">OLDPWD</span> variable
      contains the previous working directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The hyphen refers to the previous working directory;
      <span class="docEmphasis">cd</span> to go to the previous working
      directory and display the directory.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">New <span class="docEmphasis">ksh</span>
Metacharacters.</span> The new Korn shell metacharacters are used for filename
expansion in a way that is similar to the regular expression metacharacters of
<span class="docEmphasis">egrep</span> and <span class="docEmphasis">awk.</span>
The metacharacter preceding the characters enclosed in parentheses controls what
the pattern matches. See <a class="docLink" href="#ch10table08">Table 10.8</a>.</p>
<h5 id="ch10list30" class="docExampleTitle">Example 10.30 </h5>
<pre>1   $ <span class="docEmphStrong">ls</span>
    <span class="docEmphasis">abc abc1 abc122 abc123 abc2 file1 file1.bak file2 file2.bak none</span>
    <span class="docEmphasis">nonsense noone nothing nowhere one</span>

2   $ <span class="docEmphStrong">ls abc?(1|2)</span>
    <span class="docEmphasis">abc  abc1 abc2</span>

3   <span class="docEmphStrong">$ ls abc*([1–5])</span>
    <span class="docEmphasis">abc   abc1  abc122 abc123 abc2</span>

4   $ <span class="docEmphStrong">ls abc+([1–5])</span>
    <span class="docEmphasis">abc1  abc122 abc123 abc2</span>

5   $ <span class="docEmphStrong">ls no@(thing|ne)</span>
    <span class="docEmphasis">none   nothing</span>

6   $ <span class="docEmphStrong">ls no!(one|nsense)</span>
    <span class="docEmphasis">none  nothing nowhere</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All the files in the present working directory are
      listed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Matches filenames starting with
      <span class="docEmphasis">abc</span> and followed by
      <span class="docEmphasis">zero characters or one</span> of either of the
      patterns in parentheses. Matches <span class="docEmphasis">abc</span> ,
      <span class="docEmphasis">abc1,</span> or <span class="docEmphasis">abc2.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Matches filenames starting with
      <span class="docEmphasis">abc</span> and followed by
      <span class="docEmphasis">zero or more</span> numbers between
      <span class="docEmphasis">1</span> and <span class="docEmphasis">5.</span>
      Matches <span class="docEmphasis">abc, abc1, abc122, abc123,</span> and
      <span class="docEmphasis">abc2.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Matches filenames starting with
      <span class="docEmphasis">abc</span> and followed by
      <span class="docEmphasis">one or more</span> numbers between
      <span class="docEmphasis">1</span> and <span class="docEmphasis">5.</span>
      Matches <span class="docEmphasis">abc1, abc122, abc123,</span> and
      <span class="docEmphasis">abc2.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Matches filenames starting with
      <span class="docEmphasis">no</span> and followed by
      <span class="docEmphasis">exactly</span> <span class="docEmphasis">thing</span>
      or <span class="docEmphasis">ne.</span> Matches <span class="docEmphasis">
      nothing</span> or <span class="docEmphasis">none.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Matches filenames starting with
      <span class="docEmphasis">no</span> and followed by anything except
      <span class="docEmphasis">one</span> or <span class="docEmphasis">nsense.</span>
      Matches <span class="docEmphasis">none, nothing,</span> and
      <span class="docEmphasis">nowhere.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p>&nbsp;</p>
<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table08" class="docTableTitle">Table 10.8. Regular Expression Wildcards</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Regular Expression</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">abc?(2|9)1</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">?</span>
    matches zero or one occurrences of any pattern in the parentheses. The
    vertical bar represents an <span class="docEmphasis">or</span> condition;
    e.g., either <span class="docEmphasis">2</span> or <span class="docEmphasis">
    9.</span> Matches <span class="docEmphasis">abc21,</span>
    <span class="docEmphasis">abc91,</span> or <span class="docEmphasis">abc1.</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">abc*([0–9])</span>
    </td>
    <td class="docTableCell" vAlign="top">* matches zero or more occurrences of
    any pattern in the parentheses. Matches <span class="docEmphasis">abc</span>
    followed by zero or more digits; e.g., <span class="docEmphasis">abc,</span>
    <span class="docEmphasis">abc1234,</span> <span class="docEmphasis">abc3,</span>
    <span class="docEmphasis">abc2,</span> etc. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">abc+([0–9])</span>
    </td>
    <td class="docTableCell" vAlign="top">+ matches one or more occurrences of
    any pattern in the parentheses. Matches <span class="docEmphasis">abc</span>
    followed by one or more digits; e.g., <span class="docEmphasis">abc3,</span>
    <span class="docEmphasis">abc123,</span> etc. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">no@(one|ne)</span>
    </td>
    <td class="docTableCell" vAlign="top">@ matches exactly one occurrence of
    any pattern in the parentheses. Matches <span class="docEmphasis">noone</span>
    or <span class="docEmphasis">none.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">
    no!(thing|where)</span> </td>
    <td class="docTableCell" vAlign="top">! matches all strings
    <span class="docEmphasis">except</span> those matched by any of the pattern
    in the parentheses. Matches <span class="docEmphasis">no,</span>
    <span class="docEmphasis">nobody,</span> or <span class="docEmphasis">noone,</span>
    but not <span class="docEmphasis">nothing</span> or
    <span class="docEmphasis">nowhere.</span> </td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The
<span class="docEmphBoldItalic">noglob</span> Variable.</span> If the
<span class="docEmphasis">noglob</span> variable is set, filename substitution
is turned off, meaning that all metacharacters represent themselves; they are
not used as wildcards. This can be useful when searching for patterns containing
metacharacters in programs like <span class="docEmphasis">grep, sed,</span> or
<span class="docEmphasis">awk.</span> If <span class="docEmphasis">noglob</span>
is not set, all metacharacters must be escaped with a backslash if they are not
to be interpreted.</p>
<h5 id="ch10list31" class="docExampleTitle">Example 10.31 </h5>
<pre>1   % <span class="docEmphStrong">set -o noglob</span>       <span class="docEmphasis"># or set -f</span>

2   % <span class="docEmphStrong">print * ?? [] ~ $LOGNAME</span>
    <span class="docEmphasis">* ?? [] /home/jody/ellie ellie</span>

3   % <span class="docEmphStrong">set +o noglob</span>   <span class="docEmphasis"># or set +f</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">noglob</span> variable is
      set. It turns off the special meaning of the wildcards for filename
      expansion. You can use the <span class="docEmphasis">–f</span> option to
      set the command to achieve the same results.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The filename expansion metacharacters are displayed as
      themselves without any interpretation. Note that the tilde and the dollar
      sign are still expanded.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">noglob</span> option is
      reset. Filename metacharacters will be expanded.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec12">10.1.12 Variables</h4>
<p class="docText"><b>Local Variables.</b> Local variables are given values that
are known only to the shell in which they are created. Variable names must begin
with an alphabetic or underscore character. The remaining characters can be
alphabetic, decimal digits zero to nine, or an underscore character. Any other
characters mark the termination of the variable name.</p>
<p class="docText"><b>Setting and Referencing Local Variables.</b> When
assigning a value to a variable, there can be no whitespace surrounding the
equal sign. To set the variable to null, the equal sign is followed by nothing.
If more than one word is assigned to a variable, it must be quoted to protect
the whitespace; otherwise, the shell prints an error message and the variable is
undefined.</p>
<p class="docText">If a dollar sign is prepended to the variable name, the value
assigned to that variable can be referenced. If other characters are attached to
a variable name, curly braces are used to shield the name of the variable from
the extra characters.</p>
<h5 id="ch10list32" class="docExampleTitle">Example 10.32 </h5>
<pre>1   $ <span class="docEmphStrong">state=Cal</span>
    $ echo $state
    <span class="docEmphasis">Cal</span>
2   $ <span class="docEmphStrong">name=&quot;Peter Piper&quot;</span>
    $ echo $name
    <span class="docEmphasis">Peter Piper</span>

3   $ <span class="docEmphStrong">x=</span>
    $ <span class="docEmphStrong">echo $x</span>
<span class="docEmphasis"># Blank line appears when a variable is either unset or set to null</span>

    $
4   $ <span class="docEmphStrong">state=Cal</span>
    $ <span class="docEmphStrong">print ${state}ifornia</span>
    <span class="docEmphasis">California</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">state</span> is
      assigned the value <span class="docEmphasis">Cal</span> . When the shell
      encounters the dollar sign preceding a variable name, it performs variable
      substitution. The value of the variable is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">name</span> is
      assigned the value <span class="docEmphasis">&quot;Peter Piper&quot;.</span> The
      quotes are needed to hide the whitespace so that the shell will not split
      the string into separate words when it parses the command line. The value
      of the variable is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">x</span> is not
      assigned a value. It will be assigned a null string. The null value, an
      empty string, is displayed. The same output would be displayed if the
      variable had not been set at all.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">state</span> is
      assigned the value <span class="docEmphasis">Cal.</span> The variable is
      enclosed in curly braces to shield it from the characters that are
      appended. The value of the variable <span class="docEmphasis">Cal</span>
      is displayed with <span class="docEmphasis">ifornia</span> appended.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>The Scope of Local Variables.</b> A local variable is
known only to the shell in which it was created. It is not passed on to
subshells. The <span class="docEmphasis">$$</span> variable is a special
variable containing the PID (process identification number) of the current
shell.</p>
<h5 id="ch10list33" class="docExampleTitle">Example 10.33 </h5>
<pre>1   $ <span class="docEmphStrong">echo $$</span>
    <span class="docEmphasis">1313</span>

2   $ <span class="docEmphStrong">round=world</span>
    $ <span class="docEmphStrong">echo $round</span>
    <span class="docEmphasis">world</span>

3   $ <span class="docEmphStrong">ksh</span>     <span class="docEmphasis"># Start a subshell</span>

4   $ <span class="docEmphStrong">echo $$</span>
    <span class="docEmphasis">1326</span>

5   $ <span class="docEmphStrong">echo $round</span>

6   $ <span class="docEmphStrong">exit</span>       <span class="docEmphasis"># Exits this shell, returns to parent shell</span>

7   $ <span class="docEmphStrong">echo $$</span>
    <span class="docEmphasis">1313</span>

8   $ <span class="docEmphStrong">echo $round</span>
    <span class="docEmphasis">world</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the <span class="docEmphasis">$$</span>
      variable evaluates to the PID of the current shell. The PID of this shell
      is <span class="docEmphasis">1313.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The local variable <span class="docEmphasis">round</span>
      is assigned the string value <span class="docEmphasis">world</span> and
      the value of the variable is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A new Korn shell is invoked. This is called a
      <span class="docEmphasis">subshell,</span> or <span class="docEmphasis">
      child shell.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The PID of this shell is <span class="docEmphasis">
      1326.</span> The parent shell's PID is <span class="docEmphasis">1313.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">round</span> is
      not defined in this shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">exit</span> command
      terminates this shell and returns to the parent shell. If the
      <span class="docEmphasis">ignoreeof</span> option is not set, Control-D
      will also exit this shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The parent shell returns. Its PID is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the variable is displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Setting Read-Only Variables.</b> A read-only variable
cannot be redefined or unset. It can be set with the <span class="docEmphasis">
readonly</span> or <span class="docEmphasis">typeset –r</span> built-in
commands. You may want to set variables to <span class="docEmphasis">readonly</span>
for security reasons when running in privileged mode.</p>
<h5 id="ch10list34" class="docExampleTitle">Example 10.34 </h5>
<pre>1   $ <span class="docEmphStrong">readonly name=Tom</span>
    $ <span class="docEmphStrong">print $name</span>
    <span class="docEmphasis">Tom</span>

2   $ <span class="docEmphStrong">unset name</span>
    <span class="docEmphasis">ksh: name: is read only</span>

3   $ <span class="docEmphStrong">name=Joe</span>
    <span class="docEmphasis">ksh name: is read only</span>

4   $ <span class="docEmphStrong">typeset -r PATH</span>
    $ <span class="docEmphStrong">PATH=${PATH}:/usr/local/bin</span>
    <span class="docEmphasis">ksh: PATH: is read only</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">readonly</span> local
      variable <span class="docEmphasis">name</span> is assigned the value
      <span class="docEmphasis">Tom.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A <span class="docEmphasis">readonly</span> variable
      cannot be unset.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A <span class="docEmphasis">readonly</span> variable
      cannot be redefined.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">PATH</span> variable is
      set to be <span class="docEmphasis">readonly.</span> Any effort to unset
      or change the variable will produce an error message.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Environment Variables.</b> Environment variables are
available to the shell in which they are created and any subshells or processes
spawned from that shell. By convention, environment variables are capitalized.</p>
<p class="docText">The shell in which a variable is created is called the
<span class="docEmphasis">parent shell.</span> If a new shell is started from
the parent shell, it is called the <span class="docEmphasis">child shell.</span>
Some of the environment variables, such as <span class="docEmphasis">HOME,</span>
<span class="docEmphasis">LOGNAME,</span> <span class="docEmphasis">PATH,</span>
and <span class="docEmphasis">SHELL,</span> are set before you log in by the
<span class="docEmphasis">/bin/login</span> program. Normally, environment
variables are set in the <span class="docEmphasis">.profile</span> file in the
user's home directory.</p>
<p class="docText"><b>Setting Environment Variables.</b> To set environment
variables, the <span class="docEmphasis">export</span> command is used either
after assigning a value or when the variable is set. All variables in a script
can be exported by turning on the <span class="docEmphasis">allexport</span>
option to the <span class="docEmphasis">set</span> command.</p>
<h5 id="ch10list35" class="docExampleTitle">Example 10.35 </h5>
<pre>1   $ <span class="docEmphStrong">TERM=wyse ; export TERM</span>
2   $ <span class="docEmphStrong">export NAME =&quot;John Smith&quot;</span>
    $ <span class="docEmphStrong">print $NAME</span>
    <span class="docEmphasis">John Smith</span>
3   $ <span class="docEmphStrong">print $$</span>
    <span class="docEmphasis">319</span>
4   $ <span class="docEmphStrong">ksh</span>
5   $ <span class="docEmphStrong">print $$</span>
    <span class="docEmphasis">340</span>
6   $ <span class="docEmphStrong">print $NAME</span>
    <span class="docEmphasis">John Smith</span>
7   $ <span class="docEmphStrong">NAME=&quot;April Jenner&quot;</span>
    $ <span class="docEmphStrong">print $NAME</span>
    <span class="docEmphasis">April Jenner</span>
8   $ <span class="docEmphStrong">exit</span>
9   $ <span class="docEmphStrong">print $$</span>
    <span class="docEmphasis">319</span>
10  $ <span class="docEmphStrong">print $NAME</span>
    <span class="docEmphasis">John Smith</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">TERM</span> variable is
      assigned <span class="docEmphasis">wyse.</span> The variable is exported.
      Now processes started from this shell will inherit the variable.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable is exported and defined in the same step.
      (New with the Korn shell.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of this shell's PID is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A new Korn shell is started. The new shell is called
      the <span class="docEmphasis">child.</span> The original shell is its
      <span class="docEmphasis">parent.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The PID of the new Korn shell, stored in the
      <span class="docEmphasis">$$</span> (<span class="docEmphasis">340</span>)
      variable, is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable was exported to the new shell and is
      displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable is reset to <span class="docEmphasis">
      April Jenner</span> and displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This Korn child shell is exited. The parent shell will
      return.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The PID of the parent, <span class="docEmphasis">319,</span>
      is displayed again.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">NAME</span>
      contains its original value. Variables retain their values when exported
      from parent to child. The child cannot change the value of a variable for
      its parent.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Special Environment Variables.</b> The Korn shell assigns
default values to the environment variables, <span class="docEmphasis">PATH,</span>
<span class="docEmphasis">PS1,</span> <span class="docEmphasis">PS2,</span>
<span class="docEmphasis">PS3,</span> <span class="docEmphasis">PS4,</span>
<span class="docEmphasis">MAILCHECK,</span> <span class="docEmphasis">FCEDIT,</span>
<span class="docEmphasis">TMOUT,</span> and <span class="docEmphasis">IFS.</span>
The <span class="docEmphasis">SHELL,</span> <span class="docEmphasis">LOGNAME,</span>
<span class="docEmphasis">USER,</span> and <span class="docEmphasis">HOME</span>
are set by the <span class="docEmphasis">/bin/login</span> program. You can
change the values of the defaults and set the others listed in
<a class="docLink" href="#ch10table09">Table 10.9</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table09" class="docTableTitle">Table 10.9. Korn Shell Environment Variables</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Variable Name</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">_ (underscore) </td>
    <td class="docTableCell" vAlign="top">The last argument of the previous
    command. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">CDPATH</span>
    </td>
    <td class="docTableCell" vAlign="top">The search path for the
    <span class="docEmphasis">cd</span> command. A colon-separated list of
    directories used to find a directory if the / , ./, or ../ is not at the
    beginning of the pathname. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">COLUMNS</span>
    </td>
    <td class="docTableCell" vAlign="top">If set, defines the width of the edit
    window for shell edit modes and the select command. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">EDITOR</span>
    </td>
    <td class="docTableCell" vAlign="top">Pathname for a built-in editor:
    <span class="docEmphasis">emacs,</span> <span class="docEmphasis">gmacs,</span>
    or <span class="docEmphasis">vi.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ENV</span>
    </td>
    <td class="docTableCell" vAlign="top">A variable set to the name of a file,
    containing functions and aliases, that the Korn shell will invoke when the
    <span class="docEmphasis">ksh</span> program is invoked. On versions newer
    than 1988, this file is only executed when <span class="docEmphasis">ksh</span>
    is invoked interactively, not for noninteractive shells. The variable is not
    expanded if the privileged option is turned on. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ERRNO</span>
    </td>
    <td class="docTableCell" vAlign="top">System error number. Its value is the
    error number of the most recently failed system call. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">FCEDIT</span>
    </td>
    <td class="docTableCell" vAlign="top">Default editor name for the
    <span class="docEmphasis">fc</span> command. On versions newer than 1988,
    this variable is called <span class="docEmphasis">HISTEDIT,</span> and the
    <span class="docEmphasis">fc</span> command is <span class="docEmphasis">
    hist.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">FPATH</span>
    </td>
    <td class="docTableCell" vAlign="top">A colon-separated list of directories
    that defines the search path for directories containing auto-loaded
    functions. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">HISTEDIT</span>
    </td>
    <td class="docTableCell" vAlign="top">For versions of the Korn shell newer
    than 1988, the new name for <span class="docEmphasis">FCEDIT.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">HISTFILE</span>
    </td>
    <td class="docTableCell" vAlign="top">Specifies file in which to store
    command history. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">HISTSIZE</span>
    </td>
    <td class="docTableCell" vAlign="top">Maximum number of commands from the
    history that can be accessed; default is 128. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">HOME</span>
    </td>
    <td class="docTableCell" vAlign="top">Home directory; used by
    <span class="docEmphasis">cd</span> when no directory is specified. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">IFS</span>
    </td>
    <td class="docTableCell" vAlign="top">Internal field separators, normally
    SPACE, TAB, and NEWLINE, used for field splitting of words resulting from
    command substitution, lists in loop constructs, and reading input. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">LINENO</span>
    </td>
    <td class="docTableCell" vAlign="top">Current line number in script. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">LINES</span>
    </td>
    <td class="docTableCell" vAlign="top">Used in select loops for vertically
    displaying menu items; default is 24. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">MAIL</span>
    </td>
    <td class="docTableCell" vAlign="top">If this parameter is set to the name
    of a mail file and the <span class="docEmphasis">MAILPATH</span> parameter
    is not set, the shell informs the user of the arrival of mail in the
    specified file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">MAILCHECK</span>
    </td>
    <td class="docTableCell" vAlign="top">This parameter specifies how often (in
    seconds) the shell will check for the arrival of mail in the files specified
    by the <span class="docEmphasis">MAILPATH</span> or
    <span class="docEmphasis">MAIL</span> parameters. The default value is 600
    seconds (10 minutes). If set to zero, the shell will check before issuing
    each primary prompt. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">MAILPATH</span>
    </td>
    <td class="docTableCell" vAlign="top">A colon-separated list of filenames.
    If this parameter is set, the shell informs the user of the arrival of mail
    in any of the specified files. Each filename can be followed by a % and a
    message that will be printed when the modification time changes. The default
    message is Y<span class="docEmphasis">ou have mail.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">OLDPWD</span>
    </td>
    <td class="docTableCell" vAlign="top">Last working directory. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">PATH</span>
    </td>
    <td class="docTableCell" vAlign="top">The search path for commands; a
    colon-separated list of directories the shell uses to search for the command
    you want to execute. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">PWD</span>
    </td>
    <td class="docTableCell" vAlign="top">Present working directory; set by
    <span class="docEmphasis">cd.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">PPID</span>
    </td>
    <td class="docTableCell" vAlign="top">Process <span class="docEmphasis">ID</span>
    of the parent process. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">PS1</span>
    </td>
    <td class="docTableCell" vAlign="top">Primary prompt string, by default $.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">PS2</span>
    </td>
    <td class="docTableCell" vAlign="top">Secondary prompt string, by default &gt;.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">PS3</span>
    </td>
    <td class="docTableCell" vAlign="top">Selection prompt string used with the
    select command, by default #?. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">PS4</span>
    </td>
    <td class="docTableCell" vAlign="top">Debug prompt string used when tracing
    is turned on, by default +. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">RANDOM</span>
    </td>
    <td class="docTableCell" vAlign="top">Random number generated each time the
    variable is referenced. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">REPLY</span>
    </td>
    <td class="docTableCell" vAlign="top">Set when read is not supplied
    arguments. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SHELL</span>
    </td>
    <td class="docTableCell" vAlign="top">When the shell is invoked, it scans
    the environment for this name. The shell gives default values to
    <span class="docEmphasis">PATH,</span> <span class="docEmphasis">PS1,</span>
    <span class="docEmphasis">PS2,</span> <span class="docEmphasis">MAILCHECK,</span>
    and <span class="docEmphasis">IFS.</span> <span class="docEmphasis">HOME</span>
    and <span class="docEmphasis">MAIL</span> are set by
    <span class="docEmphasis">login.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">TMOUT</span>
    </td>
    <td class="docTableCell" vAlign="top">Specifies number of seconds to wait
    for input before exiting. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">VISUAL</span>
    </td>
    <td class="docTableCell" vAlign="top">Specifies editor for in-line command
    editing: <span class="docEmphasis">emacs,</span> <span class="docEmphasis">
    gmacs,</span> or <span class="docEmphasis">vi.</span> </td>
  </tr>
</table>

<p class="docText"><b>Listing Set Variables.</b> There are three built-in
commands that print the value of variables: <span class="docEmphasis">set, env,</span>
and <span class="docEmphasis">typeset.</span> The <span class="docEmphasis">set</span>
command prints all variables, local and global. The <span class="docEmphasis">
env</span> command prints only global variables. The <span class="docEmphasis">
typeset</span> command prints all variables, integers, functions, and exported
variables. The <span class="docEmphasis">set -o</span> command prints all
options set for the Korn shell.</p>
<h5 id="ch10list36" class="docExampleTitle">Example 10.36 </h5>
<pre>1   $ <span class="docEmphStrong">env</span>       <span class="docEmphasis"># Partial list</span>
    <span class="docEmphasis">LOGNAME=ellie</span>
    <span class="docEmphasis">TERMCAP=sun–cmd:te=\E[&gt;4h:ti=\E[&gt;4l:tc=sun:</span>
    <span class="docEmphasis">USER=ellie</span>
    <span class="docEmphasis">DISPLAY=:0.0</span>
    <span class="docEmphasis">SHELL=/bin/ksh</span>
    <span class="docEmphasis">HOME=/home/jody/ellie</span>
    <span class="docEmphasis">TERM=sun–cmd</span>
    <span class="docEmphasis">LD_LIBRARY_PATH=/usr/local/OW3/lib</span>
    <span class="docEmphasis">PWD=/home/jody/ellie/perl</span>

2   $ <span class="docEmphStrong">typeset</span>
    <span class="docEmphasis">export MANPATH</span>
    <span class="docEmphasis">export PATH</span>
    <span class="docEmphasis">integer ERRNO</span>
    <span class="docEmphasis">export FONTPATH</span>
    <span class="docEmphasis">integer OPTIND</span>
    <span class="docEmphasis">function LINENO</span>
    <span class="docEmphasis">export OPENWINHOME</span>
    <span class="docEmphasis">export LOGNAME</span>
    <span class="docEmphasis">function SECONDS</span>
    <span class="docEmphasis">integer PPID</span>
    <span class="docEmphasis">PS3</span>
    <span class="docEmphasis">PS2</span>
    <span class="docEmphasis">export TERMCAP</span>
    <span class="docEmphasis">OPTARG</span>
    <span class="docEmphasis">export USER</span>
    <span class="docEmphasis">export DISPLAY</span>
    <span class="docEmphasis">function RANDOM</span>
    <span class="docEmphasis">export SHELL</span>
    <span class="docEmphasis">integer TMOUT</span>
    <span class="docEmphasis">integer MAILCHECK</span>

3   $ <span class="docEmphStrong">set</span>
    <span class="docEmphasis">DISPLAY=:0.0</span>
    <span class="docEmphasis">ERRNO=10</span>
    <span class="docEmphasis">FCEDIT=/bin/ed</span>
    <span class="docEmphasis">FMHOME=/usr/local/Frame–2.1X</span>
    <span class="docEmphasis">FONTPATH=/usr/local/OW3/lib/fonts</span>
    <span class="docEmphasis">HELPPATH=/usr/local/OW3/lib/locale:/usr/local/OW3/lib/help</span>
    <span class="docEmphasis">HOME=/home/jody/ellie</span>
    <span class="docEmphasis">IFS=</span>
    <span class="docEmphasis">LD_LIBRARY_PATH=/usr/local/OW3/lib</span>
    <span class="docEmphasis">LINENO=1</span>
    <span class="docEmphasis">LOGNAME=ellie</span>
    <span class="docEmphasis">MAILCHECK=600</span>
    <span class="docEmphasis">MANPATH=/usr/local/OW3/share/man:/usr/local/OW3/man:/</span>
    <span class="docEmphasis">usr/local/man:/usr/local/doctools/man:/usr/man</span>
    <span class="docEmphasis">OPTIND=1</span>
    <span class="docEmphasis">PATH=/home/jody/ellie:/usr/local/OW3/bin:/usr/ucb:/</span>
    <span class="docEmphasis">usr/local/doctools/bin:/usr/bin:/usr/local:/usr/etc:/etc:/</span>
    <span class="docEmphasis">usr/spool/news/bin:/home/jody/ellie/bin:/usr/lo</span>
    <span class="docEmphasis">PID=1332</span>
    <span class="docEmphasis">PS1=$</span>
    <span class="docEmphasis">PS2=&gt;</span>
    <span class="docEmphasis">PS3=#?</span>
    <span class="docEmphasis">PS4=+</span>
    <span class="docEmphasis">PWD=/home/jody/ellie/kshprog/joke</span>
    <span class="docEmphasis">RANDOM=4251</span>
    <span class="docEmphasis">SECONDS=36</span>
    <span class="docEmphasis">SHELL=/bin/ksh</span>
    <span class="docEmphasis">TERM=sun–cmd</span>
    <span class="docEmphasis">TERMCAP=sun–cmd:te=\E[&gt;4h:ti=\E[&gt;4l:tc=sun:</span>
        <span class="docEmphasis">TMOUT=0</span>
    <span class="docEmphasis">USER=ellie</span>
    <span class="docEmphasis">_=pwd</span>
    <span class="docEmphasis">name=Joe</span>
    <span class="docEmphasis">place=San Francisco</span>
    <span class="docEmphasis">x=</span>

4   <span class="docEmphStrong">set -o</span>
    <span class="docEmphasis">allexport      off</span>
    <span class="docEmphasis">bgnice        on</span>
    <span class="docEmphasis">emacs         off</span>
    <span class="docEmphasis">errexit       off</span>
    <span class="docEmphasis">gmacs         off</span>
    <span class="docEmphasis">ignoreeof     off</span>
    <span class="docEmphasis">interactive   on</span>
    <span class="docEmphasis">keyword       off</span>
    <span class="docEmphasis">markdirs      off</span>
    <span class="docEmphasis">monitor       on</span>
    <span class="docEmphasis">noexec        off</span>
    <span class="docEmphasis">noclobber     off</span>
    <span class="docEmphasis">noglob        off</span>
    <span class="docEmphasis">nolog         off</span>
    <span class="docEmphasis">nounset       off</span>
    <span class="docEmphasis">privileged    off</span>
    <span class="docEmphasis">restricted    off</span>
    <span class="docEmphasis">trackall      off</span>
    <span class="docEmphasis">verbose       off</span>
    <span class="docEmphasis">viraw         off</span>
    <span class="docEmphasis">xtrace        off</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">env</span> command lists
      all environment (exported) variables. These variables are, by convention,
      named with uppercase letters. They are passed from the process in which
      they are created to any of the child processes.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      displays all variables and their attributes, functions, and integers. The
      <span class="docEmphasis">typeset</span> command with the + option
      displays only the names of the variables.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command,
      without options, prints all set variables, local and exported, including
      variables set to null.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command with
      the <span class="docEmphasis">–o</span> option lists all built-in
      variables that are set to <span class="docEmphasis">on</span> or
      <span class="docEmphasis">off.</span> To turn options off, use the plus
      sign (+), and to turn options on, use the minus sign (-); for example,
      <span class="docEmphasis">set -o allexport</span> turns on the
      <span class="docEmphasis">allexport</span> option.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Unsetting Variables.</b> Both local and environment
variables can be unset by using the <span class="docEmphasis">unset</span>
command (unless the variables are set to <span class="docEmphasis">readonly</span>).</p>
<h5 id="ch10list37" class="docExampleTitle">Example 10.37 </h5>
<pre><span class="docEmphStrong">unset name; unset TERM</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The variables <span class="docEmphasis">name</span> and
    <span class="docEmphasis">Term</span> are no longer defined for this shell.</td>
  </tr>
</table>

<p class="docText"><b>Printing the Values of Variables.</b> The
<span class="docEmphasis">echo</span> command (used in Bourne and C shells) is
still effective in this shell, but the <span class="docEmphasis">print</span>
command has more options and is more efficient. Both the
<span class="docEmphasis">echo</span> command and <span class="docEmphasis">
print</span> command are built-in to the shell. The <span class="docEmphasis">
print</span> command has a number of options to control its output. They are
listed in <a class="docLink" href="#ch10table10">Table 10.10</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table10" class="docTableTitle">Table 10.10. Print Options</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Option</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–r</span>
    </td>
    <td class="docTableCell" vAlign="top">Prevents escape sequences. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–R</span>
    </td>
    <td class="docTableCell" vAlign="top">Prevents <span class="docEmphasis">ksh</span>
    from treating a <span class="docEmphasis">–2</span> or
    <span class="docEmphasis">–x</span> as a <span class="docEmphasis">print</span>
    argument; turns off the dash if preceding an argument (except
    <span class="docEmphasis">–n</span>); <span class="docEmphasis">\t, \c, \c</span>
    are not recognized as special and appear unchanged when printed without the
    \. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–un</span>
    </td>
    <td class="docTableCell" vAlign="top">Redirects output to file descriptor
    <span class="docEmphasis">n.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–n</span>
    </td>
    <td class="docTableCell" vAlign="top">No newline in output; like echo
    <span class="docEmphasis">–n.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–p</span>
    </td>
    <td class="docTableCell" vAlign="top">Sends output to a coprocess or pipe
    (&amp;|) rather than to standard output. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–s</span>
    </td>
    <td class="docTableCell" vAlign="top">Output is appended to the history file
    as a command rather than to standard output. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–</span>
    </td>
    <td class="docTableCell" vAlign="top">Any arguments that follow are not
    print options. The dash allows arguments that contain a hyphen, e.g., –2.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–f</span>
    </td>
    <td class="docTableCell" vAlign="top">For versions newer than 1988, used to
    emulate <span class="docEmphasis">printf.</span> </td>
  </tr>
</table>

<h5 id="ch10list38" class="docExampleTitle">Example 10.38 </h5>
<pre>1   $ <span class="docEmphStrong">print Hello my friend and neighbor!</span>
    <span class="docEmphasis">Hello my friend and neighbor!</span>

2   $ <span class="docEmphStrong">print &quot;Hello         friends&quot;</span>
    <span class="docEmphasis">Hello       friends</span>

3   $ <span class="docEmphStrong">print –r &quot;\n&quot;</span>
    <span class="docEmphasis">\n</span>

4   $ <span class="docEmphStrong">print -s &quot;date +%H&quot;</span>
    $ <span class="docEmphStrong">history -2</span>
    <span class="docEmphasis">132 print -s &quot;date +%H&quot;</span>
    <span class="docEmphasis">133 date +%H</span>
    <span class="docEmphasis">134 history -2</span>
    $ <span class="docEmphStrong">r 133</span>
    <span class="docEmphasis">09</span>

5   $ <span class="docEmphStrong">print –n $HOME</span>
    <span class="docEmphasis">/home/jody/ellie</span>

6   $ <span class="docEmphStrong">var=world</span>
    $ <span class="docEmphStrong">print ${var}wide</span>
    <span class="docEmphasis">worldwide</span>

7   $ <span class="docEmphStrong">print –x is an option</span>
    <span class="docEmphasis">ksh: print: bad option(s)</span>

8   $ <span class="docEmphStrong">print  – –x is an option</span>
    <span class="docEmphasis">–x is an option</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The shell parses the command line, breaks the command
      line into words (tokens) separated by space, and passes the words as
      arguments to the <span class="docEmphasis">print</span> command. The shell
      removes all the extra whitespace between words.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The quotes create a single string. The shell evaluates
      the string as a single word and the whitespace is preserved.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This is the raw option. Any escape sequences, such as
      <span class="docEmphasis">\r,</span> are not interpreted.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–s</span> option appends
      the <span class="docEmphasis">print</span> command's arguments to the
      history file as a command. The string &quot;<span class="docEmphasis">date +%H&quot;</span>
      is the argument to the <span class="docEmphasis">print</span> command. The
      <span class="docEmphasis">date</span> string is appended to the history
      list as a command and then executed with the <span class="docEmphasis">r</span>
      command (history's <span class="docEmphasis">redo</span> command).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–n</span> option
      suppresses the newline. The Korn shell prompt is on the same line as the
      output from the <span class="docEmphasis">print</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The local variable is assigned the value
      <span class="docEmphasis">world.</span> The braces insulate the variable
      from characters appended to it.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When the first argument to the
      <span class="docEmphasis">print</span> function begins with a dash, the
      <span class="docEmphasis">print</span> command interprets the argument as
      one of its options, unless an additional preceding dash is provided.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The dash as an option allows you to use a dash as the
      first character in the string to be printed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Escape Sequences.</b> Escape sequences consist of a
character preceded by a backslash and have a special meaning when enclosed
within quotes. (See <a class="docLink" href="#ch10table11">Table 10.11</a>.)</p>
<p class="docText">The <span class="docEmphasis">print</span> command, without
the <span class="docEmphasis">-r</span> and <span class="docEmphasis">-R</span>
options, formats output when any of the following escape sequences are placed
within a string. The string must be enclosed in double or single quotes.</p>
<h5 id="ch10list39" class="docExampleTitle">Example 10.39 </h5>
<pre>1   $ <span class="docEmphStrong">print '\t\t\tHello\n'</span>
           <span class="docEmphasis">Hello</span>

    $

2   $ <span class="docEmphStrong">print &quot;\aTea \tTime!\n\n&quot;</span>
    <span class="docEmphasis">Ding ( bell rings )</span> Tea     Time!
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The backslash characters must be quoted with either
      single or double quotes. The <span class="docEmphasis">\t</span> escape
      sequence represents a tab, and <span class="docEmphasis">\n</span>
      represents a newline. The output is three tabs, followed by the string
      <span class="docEmphasis">Hello,</span> and a newline.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">\a</span> escape sequence
      causes a bell to ring (\07) and the <span class="docEmphasis">\t</span>
      creates a tab. The two <span class="docEmphasis">\n</span> sequences will
      print two newline characters.</span></li>
    </ol>
    </span></td>
  </tr>
</table>
<p>&nbsp;</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table11" class="docTableTitle">Table 10.11. Escape Sequences</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Backslash Character</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\a</span>
    </td>
    <td class="docTableCell" vAlign="top">Bell character. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\b</span>
    </td>
    <td class="docTableCell" vAlign="top">Backspace. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\c</span>
    </td>
    <td class="docTableCell" vAlign="top">Suppress newline and ignore any
    arguments that follow <span class="docEmphasis">\c.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\f</span>
    </td>
    <td class="docTableCell" vAlign="top">Formfeed. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\n</span>
    </td>
    <td class="docTableCell" vAlign="top">Newline. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\r</span>
    </td>
    <td class="docTableCell" vAlign="top">Return. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\t</span>
    </td>
    <td class="docTableCell" vAlign="top">Tab. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\v</span>
    </td>
    <td class="docTableCell" vAlign="top">Vertical tab. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\\</span>
    </td>
    <td class="docTableCell" vAlign="top">Backslash. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\0x</span>
    </td>
    <td class="docTableCell" vAlign="top">Eight-bit character with a 1-, 2-, or
    3-digit ASCII value, as in print <span class="docEmphasis">\0124.</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">\E</span>
    </td>
    <td class="docTableCell" vAlign="top">Only on versions newer than 1988; used
    for an escape sequence. </td>
  </tr>
</table>

<p class="docText"><b>Variable Expressions and Expansion Modifiers.</b> Variable
expressions can be tested and modified by using special modifiers. The modifier
provides a shortcut conditional test to check whether a variable has been set,
and then, depending on the modifier, may assign a default value to the variable.
These expressions can be used with conditional constructs such as
<span class="docEmphasis">if</span> and <span class="docEmphasis">elif.</span>
See <a class="docLink" href="#ch10table12">Table 10.12</a>.</p>
<p class="docText">The colon does not have to be used with the modifier. Using
the colon with the modifier checks whether the variable is not set or is
<span class="docEmphasis">null;</span> without the colon, a variable set to null
is considered a set variable.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table12" class="docTableTitle">Table 10.12. Variable Expressions and Modifiers</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Expression</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">
    ${variable:–word}</span> </td>
    <td class="docTableCell" vAlign="top">If <span class="docEmphasis">variable</span>
    is set and is nonnull, substitute its value; otherwise, substitute
    <span class="docEmphasis">word.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">
    ${variable:=word}</span> </td>
    <td class="docTableCell" vAlign="top">If <span class="docEmphasis">variable</span>
    is not set or is null, set it to <span class="docEmphasis">word;</span> the
    value of <span class="docEmphasis">variable</span> is substituted
    permanently. Positional parameters may not be assigned in this way. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">${variable:+word}</span>
    </td>
    <td class="docTableCell" vAlign="top">If <span class="docEmphasis">variable</span>
    is set and is nonnull, substitute <span class="docEmphasis">word;</span>
    otherwise substitute nothing. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">${variable:?word}</span>
    </td>
    <td class="docTableCell" vAlign="top">If <span class="docEmphasis">variable</span>
    is set and is nonnull, substitute its value; otherwise, print
    <span class="docEmphasis">word</span> and exit from the shell. If
    <span class="docEmphasis">word</span> is omitted, the message
    <span class="docEmphasis">parameter null or not set</span> is printed. </td>
  </tr>
</table>

<h5 id="ch10list40" class="docExampleTitle">Example 10.40 </h5>
<pre>(Using Temporary Default Values)
1   $ <span class="docEmphStrong">fruit</span>=<span class="docEmphStrong">peach</span>

2   $ <span class="docEmphStrong">print ${fruit:–plum}</span>
    <span class="docEmphasis">peach</span>

3   $ <span class="docEmphStrong">print ${newfruit:–apple}</span>
    <span class="docEmphasis">apple</span>

4   $ <span class="docEmphStrong">print $newfruit</span>

5   $ <span class="docEmphStrong">print ${TERM:-vt120}</span>
    <span class="docEmphasis">sun-cmd</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">fruit</span> is
      assigned the value <span class="docEmphasis">peach.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The special modifier will check to see if the variable
      <span class="docEmphasis">fruit</span> has been set. If it has, the value
      <span class="docEmphasis">peach</span> is printed; if not,
      <span class="docEmphasis">plum</span> is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">newfruit</span>
      has not been set. The value <span class="docEmphasis">apple</span> will be
      printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">newfruit</span>
      was not set, so nothing prints. In step 3, the expression was simply
      replaced with the word <span class="docEmphasis">apple</span> and printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the <span class="docEmphasis">TERM</span> variable
      has not been set, a default value <span class="docEmphasis">vt120</span>
      will be displayed. In this example, the terminal has already been set to
      <span class="docEmphasis">sun–cmd,</span> a Sun workstation.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list41" class="docExampleTitle">Example 10.41 </h5>
<pre>(Assigning Permanent Default Values)
1   $ <span class="docEmphStrong">name=</span>

2   $ <span class="docEmphStrong">print ${name:=Patty}</span>
    <span class="docEmphasis">Patty</span>

3   $ <span class="docEmphStrong">print $name</span>
    <span class="docEmphasis">Patty</span>

4   $ <span class="docEmphStrong">print ${TERM:=vt120}</span>
    <span class="docEmphasis">vt120</span>

    $ <span class="docEmphStrong">print $TERM</span>
    <span class="docEmphasis">vt120</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">name</span> is
      assigned the value <span class="docEmphasis">null.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The special modifier <span class="docEmphasis">:=</span>
      will check to see if the variable name has been set to some value other
      than null. If it has been set, it will not be changed; if it is either
      null or not set, it will be assigned the value to the right of the equal
      sign. <span class="docEmphasis">Patty</span> is assigned to
      <span class="docEmphasis">name</span> since the variable is set to null.
      The setting is permanent.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">name</span>
      still contains the value <span class="docEmphasis">Patty.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the variable <span class="docEmphasis">TERM</span>
      is not set, it will be assigned the default value
      <span class="docEmphasis">vt120</span> permanently.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list42" class="docExampleTitle">Example 10.42 </h5>
<pre><span class="docEmphasis">(Assigning Temporary Alternate Value)</span>
1   $ <span class="docEmphStrong">foo=grapes</span>
2   $ <span class="docEmphStrong">print ${foo:+pears}</span>
    <span class="docEmphasis">pears</span>
    $ <span class="docEmphStrong">print $foo</span>
    <span class="docEmphasis">grapes</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">foo</span> has
      been assigned the value <span class="docEmphasis">grapes.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The special modifier <span class="docEmphasis">:+</span>
      will check to see if the variable has been set. If it has been set, it
      will temporarily be reset to <span class="docEmphasis">grapes.</span> If
      it has not been set, null is returned.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list43" class="docExampleTitle">Example 10.43 </h5>
<pre>(Creating Error Messages Based on Default Values)
1   $ <span class="docEmphStrong">print ${namex:?&quot;namex is undefined&quot;}</span>
    <span class="docEmphasis">ksh: namex: namex is undefined</span>

2   $ <span class="docEmphStrong">print ${y?}</span>
    <span class="docEmphasis">ksh: y: parameter null or not set</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">:?</span> modifier will
      check to see if the variable has been set. If not, the string to the right
      of the <span class="docEmphasis">?</span> is printed to standard error,
      after the name of the variable. If in a script, the script exits.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If a message is not provided after the
      <span class="docEmphasis">?,</span> the Korn shell sends a default message
      to standard error. Without the colon, the <span class="docEmphasis">?</span>
      modifier would consider a variable set to null a set variable, and the
      message would not be printed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list44" class="docExampleTitle">Example 10.44 </h5>
<pre>(Line from a System Script)
<span class="docEmphStrong">if [ &quot;${uid:=0}&quot; -ne 0 ]</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">If the UID (user ID) has a value, it will not be changed;
    if it does not have a value, it will be assigned the value zero (superuser).
    The value of the variable will be tested for nonzero. This line was taken
    from the <span class="docEmphasis">/etc/shutdown</span> program
    (SVR4/Solaris 2.5). It is here to give you an example of how variable
    modifiers are used.</td>
  </tr>
</table>

<p class="docText"><b>Variable Expansion of Substrings.</b> Pattern matching
arguments are used to strip off certain portions of a string from either the
front or end of the string. The most common use for these operators is stripping
off pathname elements from the head or tail of the path. See
<a class="docLink" href="#ch10table13">Table 10.13</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table13" class="docTableTitle">Table 10.13. Variable Expansion Substrings</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Expression</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">${variable%pattern}</span>
    </td>
    <td class="docTableCell" vAlign="top">Matches the <span class="docEmphasis">
    smallest trailing portion</span> of the value of <span class="docEmphasis">
    variable</span> to <span class="docEmphasis">pattern</span> and removes it.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">${variable%%pattern}</span>
    </td>
    <td class="docTableCell" vAlign="top">Matches the <span class="docEmphasis">
    largest trailing portion</span> of the value of <span class="docEmphasis">
    variable</span> to <span class="docEmphasis">pattern</span> and removes it.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">
    ${variable#pattern}</span> </td>
    <td class="docTableCell" vAlign="top">Matches the <span class="docEmphasis">
    smallest leading portion</span> of the value of <span class="docEmphasis">
    variable</span> to <span class="docEmphasis">pattern</span> and removes it.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">
    ${variable##pattern}</span> </td>
    <td class="docTableCell" vAlign="top">Matches the <span class="docEmphasis">
    largest leading portion</span> of the value of <span class="docEmphasis">
    variable</span> to <span class="docEmphasis">pattern</span> and removes it.
    </td>
  </tr>
</table>

<h5 id="ch10list45" class="docExampleTitle">Example 10.45 </h5>
<pre>1   $ <span class="docEmphStrong">pathname=&quot;/usr/bin/local/bin&quot;</span>
2   $ <span class="docEmphStrong">print ${pathname%/bin*}</span>
    <span class="docEmphasis">/usr/bin/local</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The local variable <span class="docEmphasis">pathname</span>
      is assigned <span class="docEmphasis">/usr/bin/local/bin.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">%</span> removes the
      <span class="docEmphasis">smallest trailing portion</span> of
      <span class="docEmphasis">pathname</span> containing the pattern
      <span class="docEmphasis">/bin,</span> followed by zero or more
      characters; that is, it strips off <span class="docEmphasis">/bin.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list46" class="docExampleTitle">Example 10.46 </h5>
<pre>1   $ <span class="docEmphStrong">pathname=&quot;usr/bin/local/bin&quot;</span>
2   $ <span class="docEmphStrong">print</span> <span class="docEmphStrong">${pathname%%/bin*}</span>
    <span class="docEmphasis">/usr</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The local variable <span class="docEmphasis">pathname</span>
      is assigned <span class="docEmphasis">/usr/bin/local/bin.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">%%</span> removes the
      <span class="docEmphasis">largest trailing portion</span> of
      <span class="docEmphasis">pathname</span> containing the pattern
      <span class="docEmphasis">/bin,</span> followed by zero or more
      characters; that is, it strips off <span class="docEmphasis">
      /bin/local/bin</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list47" class="docExampleTitle">Example 10.47 </h5>
<pre>1   $ <span class="docEmphStrong">pathname=/home/lilliput/jake/.cshrc</span>
2   $ <span class="docEmphStrong">print ${pathname#/home}</span>
    <span class="docEmphasis">/lilliput/jake/.cshrc</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The local variable <span class="docEmphasis">pathname</span>
      is assigned <span class="docEmphasis">/home/liliput/jake/.cshrc.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">#</span> removes the
      <span class="docEmphasis">smallest leading portion</span> of
      <span class="docEmphasis">pathname</span> containing the pattern
      <span class="docEmphasis">/home;</span> that is, <span class="docEmphasis">
      /home</span> is stripped from the beginning of the path variable.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list48" class="docExampleTitle">Example 10.48 </h5>
<pre>1   $ <span class="docEmphStrong">pathname=/home/liliput/jake/.cshrc</span>
2   $ <span class="docEmphStrong">print ${pathname##*/</span>}
    <span class="docEmphasis">.cshrc</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The local variable <span class="docEmphasis">pathname</span>
      is assigned <span class="docEmphasis">/home/liliput/jake/.cshrc.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The ## removes the <span class="docEmphasis">largest
      leading portion</span> of <span class="docEmphasis">pathname</span>
      containing zero or more characters up to and including the last slash;
      that is, it strips off <span class="docEmphasis">/home/lilliput/jake</span>
      from the path variable.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">Variable Attributes: The
<span class="docEmphasis">typeset</span> Command.</span> The attributes of a
variable, such as its case, width, and left or right justification, can be
controlled by the <span class="docEmphasis">typeset</span> command. When the
<span class="docEmphasis">typeset</span> command changes the attributes of a
variable, the change is permanent. The <span class="docEmphasis">typeset</span>
function has a number of other functions. See
<a class="docLink" href="#ch10table14">Table 10.14</a>.</p>
<h5 id="ch10list49" class="docExampleTitle">Example 10.49 </h5>
<pre>1   $ <span class="docEmphStrong">typeset –u name=&quot;john doe&quot;</span>
    $ print &quot;$name&quot;
    <span class="docEmphasis">JOHN DOE             #</span> <span class="docEmphasis">Changes all characters to uppercase.</span>

2   $ <span class="docEmphStrong">typeset –l name</span>
    $ print $name
    <span class="docEmphasis">john doe             #</span> <span class="docEmphasis">Changes all characters to lowercase.</span>

3   $ <span class="docEmphStrong">typeset –L4 name</span>
    $ print $name
    <span class="docEmphasis">john</span>              <span class="docEmphasis">#</span> <span class="docEmphasis">Left-justified fixed-width 4-character field.</span>
4   $ <span class="docEmphStrong">typeset –R2 name</span>
    $ print $name     <span class="docEmphasis">#</span> <span class="docEmphasis">Right-justified fixed-width 2-character field.</span>
    <span class="docEmphasis">hn</span>

5   $ <span class="docEmphStrong">name=&quot;John Doe&quot;</span>
    $ <span class="docEmphStrong">typeset –Z15 name</span>        <span class="docEmphasis">#</span> <span class="docEmphasis">Null–padded sting, 15-space field.</span>
           <span class="docEmphasis">width</span>
    $ <span class="docEmphStrong">print &quot;$name&quot;</span>
     <span class="docEmphasis">John Doe</span>

6   $ <span class="docEmphStrong">typeset –LZ15 name</span>       <span class="docEmphasis">#</span> <span class="docEmphasis">Left-justified, 15-space field width.</span>
    $ <span class="docEmphStrong">print &quot;$name$name&quot;</span>
    <span class="docEmphasis">John Doe       John Doe</span>

7   $ <span class="docEmphStrong">integer n=25</span>
    $ <span class="docEmphStrong">typeset -Z15 n</span>            <span class="docEmphasis">#</span> <span class="docEmphasis">Left-justified, zero-padded integer.</span>
    $ <span class="docEmphStrong">print &quot;$n&quot;</span>
    <span class="docEmphasis">000000000000025</span>

8   $ <span class="docEmphStrong">typeset –lL1 answer=Yes</span>   <span class="docEmphasis">#</span> <span class="docEmphasis">Left justify one lowercase letter.</span>
    $ print $answer
    <span class="docEmphasis">y</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–u</span> option to the
      <span class="docEmphasis">typeset</span> command converts all characters
      in a variable to uppercase.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–l</span> option to the
      <span class="docEmphasis">typeset</span> command converts all characters
      in a variable to lowercase.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–L</span> option to the
      <span class="docEmphasis">typeset</span> command converts the variable
      <span class="docEmphasis">name</span> to a left-justified, four-character
      string, <span class="docEmphasis">john.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–R</span> option to the
      <span class="docEmphasis">typeset</span> command converts the variable
      <span class="docEmphasis">name</span> to a right-justified, two-character
      string, <span class="docEmphasis">hn.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">name</span> is
      set to <span class="docEmphasis">John Doe.</span> The
      <span class="docEmphasis">–Z</span> option to the
      <span class="docEmphasis">typeset</span> command will convert the string
      to a null-padded, 15-space string. The variable is quoted to preserve
      whitespace.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">name</span> is
      converted to a left-justified, 15-space, null-padded string.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">n</span> is an
      integer (see <span class="docEmphasis">typeset –i,</span>
      <a class="docLink" href="#ch10table14">Table 10.14</a>) assigned the value
      <span class="docEmphasis">25.</span> The <span class="docEmphasis">typeset</span>
      command will convert the integer <span class="docEmphasis">n</span> to a
      zero-filled, 15-space, left-justified number.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">answer</span> is
      assigned the value <span class="docEmphasis">Yes</span> and converted to a
      lowercase, left-justified, one-character string. (This can be very useful
      when handling user input in a script.)</span></li>
    </ol>
    </span></td>
  </tr>
</table>
<p>&nbsp;</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table14" class="docTableTitle">Table 10.14. Other Uses of the
  <span class="docEmphasis">typeset</span> Command</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">What
    It Does</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset</span>
    </td>
    <td class="docTableCell" vAlign="top">Displays all variables. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –i
    num</span> </td>
    <td class="docTableCell" vAlign="top">Will only accept integer values for
    <span class="docEmphasis">num.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –x</span>
    </td>
    <td class="docTableCell" vAlign="top">Displays exported variables. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset a b
    c</span> </td>
    <td class="docTableCell" vAlign="top">If defined in a function, creates
    <span class="docEmphasis">a,</span> <span class="docEmphasis">b,</span> and
    <span class="docEmphasis">c</span> to be local variables. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –r
    x=foo</span> </td>
    <td class="docTableCell" vAlign="top">Sets <span class="docEmphasis">x</span>
    to <span class="docEmphasis">foo</span> and then makes it read-only. </td>
  </tr>
</table>

<p class="docText"><b>Positional Parameters.</b> Normally, the special built-in
variables, often called <span class="docEmphasis">positional parameters,</span>
are used in shell scripts when passing arguments from the command line, or used
in functions to hold the value of arguments passed to the function. The
variables are called positional parameters because they are referenced by
numbers 1, 2, 3, and so on, representing their respective positions in the
parameter list. See <a class="docLink" href="#ch10table15">Table 10.15</a>.</p>
<p class="docText">The name of the shell script is stored in the
<span class="docEmphasis">$0</span> variable. The positional parameters can be
set and reset with the <span class="docEmphasis">set</span> command.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table15" class="docTableTitle">Table 10.15. Positional Parameters</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Expression</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$0</span>
    </td>
    <td class="docTableCell" vAlign="top">References the name of the current
    shell script. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$1–$9</span>
    </td>
    <td class="docTableCell" vAlign="top">Positional parameters
    <span class="docEmphasis">1</span>–<span class="docEmphasis">9.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">${10}</span>
    </td>
    <td class="docTableCell" vAlign="top">Positional parameter
    <span class="docEmphasis">10.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$#</span>
    </td>
    <td class="docTableCell" vAlign="top">Evaluates to the number of positional
    parameters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$*</span>
    </td>
    <td class="docTableCell" vAlign="top">Evaluates to all the positional
    parameters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$@</span>
    </td>
    <td class="docTableCell" vAlign="top">Same as <span class="docEmphasis">$*,</span>
    except when double quoted. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&quot;$*&quot;</span>
    </td>
    <td class="docTableCell" vAlign="top">Evaluates to &quot;<span class="docEmphasis">$1
    $2 $3&quot;,</span> etc. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&quot;$@&quot;</span>
    </td>
    <td class="docTableCell" vAlign="top">Evaluates to &quot;<span class="docEmphasis">$1</span>&quot;
    &quot;<span class="docEmphasis">$2</span>&quot; &quot;<span class="docEmphasis">$3&quot;,</span>
    etc. </td>
  </tr>
</table>

<h5 id="ch10list50" class="docExampleTitle">Example 10.50 </h5>
<pre>1   $ <span class="docEmphStrong">set tim bill ann fred</span>
    $ <span class="docEmphStrong">print $*</span>           <span class="docEmphasis"># Prints all the positional parameters.</span>
    <span class="docEmphasis">tim bill ann fred</span>

2   $ <span class="docEmphStrong">print $1</span>           <span class="docEmphasis"># Prints the first position.</span>
    <span class="docEmphasis">tim</span>

<span class="docEmphasis">3</span>   $ <span class="docEmphStrong">print $2 $3</span>        <span class="docEmphasis"># Prints the second and third position.</span>
    <span class="docEmphasis">bill ann</span>

4   $ <span class="docEmphStrong">print $#</span>           <span class="docEmphasis"># Prints the total number of positional</span>
    <span class="docEmphasis">4                    # parameters.</span>

5   $ <span class="docEmphStrong">set a b c d e f g h i j k l m</span>
    $ <span class="docEmphStrong">print $10</span>          <span class="docEmphasis"># Prints the first positional parameter</span>
    <span class="docEmphasis">a0                   # followed by a 0.</span>

    $ <span class="docEmphStrong">print ${10}</span> <span class="docEmphStrong">${11}</span>  <span class="docEmphasis"># Prints the 10th and 11th positions.</span>
    <span class="docEmphasis">j k</span>

6   $ <span class="docEmphStrong">print $#</span>
    <span class="docEmphasis">13</span>

7   $ <span class="docEmphStrong">print $*</span>
    <span class="docEmphasis">a b c d e f g h i j k l m</span>

8   $ <span class="docEmphStrong">set file1 file2 file3</span>
    $ <span class="docEmphStrong">print \$$#</span>
    <span class="docEmphasis">$3</span>

9   $ <span class="docEmphStrong">eval print \$$#</span>
    <span class="docEmphasis">file3</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command
      assigns values to positional parameters. The <span class="docEmphasis">$*</span>
      special variable contains all of the parameters set.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the first positional parameter,
      <span class="docEmphasis">tim,</span> is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the second and third parameters,
      <span class="docEmphasis">bill</span> and <span class="docEmphasis">ann,</span>
      are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">$#</span> special
      variable contains the number of positional parameters currently set.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command resets
      all of the positional parameters. The original parameter list is cleared.
      To print any positional parameters beyond 9, the curly braces are used to
      keep the two digits together. Otherwise, the value of the first positional
      parameter is printed, followed by the number appended to it.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The number of positional parameters is now
      <span class="docEmphasis">13.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The values of all the positional parameters are
      printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The dollar sign is escaped; $# is the number of
      arguments. The <span class="docEmphasis">print</span> command displays
      <span class="docEmphasis">$3,</span> a literal dollar sign followed by the
      number of positional parameters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">eval</span> command
      parses the command line a second time before executing the command. The
      first time parsed by the shell, the print would display
      <span class="docEmphasis">$3;</span> the second time, after
      <span class="docEmphasis">eval,</span> the <span class="docEmphasis">print</span>
      displays the value of <span class="docEmphasis">$3,</span>
      <span class="docEmphasis">file3.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec13">10.1.13 Other Special Variables</h4>
<p class="docText">The Korn shell has some special built-in variables, as shown
in <a class="docLink" href="#ch10table16">Table 10.16</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table16" class="docTableTitle">Table 10.16. Special Variables</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Variable</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$$</span>
    </td>
    <td class="docTableCell" vAlign="top">PID of the shell. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$–</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ksh</span>
    options currently set. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$?</span>
    </td>
    <td class="docTableCell" vAlign="top">Exit value of last executed command.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$!</span>
    </td>
    <td class="docTableCell" vAlign="top">PID of last job put in background.
    </td>
  </tr>
</table>

<h5 id="ch10list51" class="docExampleTitle">Example 10.51 </h5>
<pre>1   $ <span class="docEmphStrong">print The pid of this shell is $$</span>
    <span class="docEmphasis">The pid of this shell is 4725</span>

2   $ <span class="docEmphStrong">print The options for this korn shell are $–</span>
    <span class="docEmphasis">The options for this korn shell are ismh</span>

3   $ <span class="docEmphStrong">grep dodo /etc/passwd</span>
    $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">1</span>

4   $ <span class="docEmphStrong">sleep 25&amp;</span>
    <span class="docEmphasis">[1]    400</span>
    $ <span class="docEmphStrong">print $!</span>
    <span class="docEmphasis">400</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">$$</span> variable holds
      the value of the PID for this process.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">$–</span> variable lists
      all options for this interactive Korn shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">grep</span> command
      searches for the string <span class="docEmphasis">dodo</span> in the
      <span class="docEmphasis">/etc/passwd</span> file. The
      <span class="docEmphasis">?</span> variable holds the exit status of the
      last command executed. Since the value returned from
      <span class="docEmphasis">grep</span> is one, <span class="docEmphasis">
      grep</span> is assumed to have failed in its search. An exit status of
      zero indicates a successful exit.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">&amp;</span> appended to the
      <span class="docEmphasis">sleep</span> command causes the command to be
      executed in the background. The <span class="docEmphasis">$!</span>
      variable holds the PID number of the last command placed in the
      background.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec14">10.1.14 Quotes</h4>
<p class="docText">Quotes are used to protect special metacharacters from
interpretation. They can cause major debugging hassles in all shell scripts.
Single quotes must be matched. They protect special metacharacters from being
interpreted by the shell. Double quotes also must be matched. They protect most
characters from interpretation by the shell, but allow variable and command
substitution characters to be processed. Single quotes will protect double
quotes, and double quotes will protect single quotes. The Korn shell, unlike the
Bourne shell, will inform you if you have mismatched quotes by sending an error
message to standard error with the line where it detects that the quotes were
mismatched.</p>
<p class="docText"><b>The Backslash.</b> The backslash is used to protect (or
escape) a single character from interpretation.</p>
<h5 id="ch10list52" class="docExampleTitle">Example 10.52 </h5>
<pre>1   $ <span class="docEmphStrong">print Where are you going\?</span>
    <span class="docEmphasis">Where are you going?</span>
2   $ <span class="docEmphStrong">print Start on this line and \</span>
    &gt; <span class="docEmphStrong">go to the next line.</span>
    <span class="docEmphasis">Start on this line and go to the next line.</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The special metacharacter <span class="docEmphasis">?</span>
      is escaped with the backslash. It will not be interpreted for filename
      expansion by the shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The newline is escaped. The next line will become part
      of the first line. The <span class="docEmphasis">&gt;</span> is the Korn
      shell's secondary prompt.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Single Quotes.</b> Single quotes must be matched. They
protect all metacharacters from interpretation. To print a single quote, it must
be enclosed in double quotes or escaped with a backslash.</p>
<h5 id="ch10list53" class="docExampleTitle">Example 10.53 </h5>
<pre>    $ <span class="docEmphStrong">print 'hi there</span>
    <span class="docEmphStrong">&gt; how are you?</span>
    <span class="docEmphStrong">&gt; When will this end?</span>
    <span class="docEmphStrong">&gt; When the quote is matched</span>
    <span class="docEmphStrong">&gt; oh'</span>
    <span class="docEmphasis">hi there</span>
    <span class="docEmphasis">how are you?</span>
    <span class="docEmphasis">When will this end?</span>
    <span class="docEmphasis">When the quote is matched</span>
    <span class="docEmphasis">oh</span>

2   $ <span class="docEmphStrong">print 'Do you need $5.00?'</span>
    <span class="docEmphasis">Do you need $5.00?</span>

3   $ <span class="docEmphStrong">print 'Mother yelled, &quot;Time to eat!&quot;'</span>
    <span class="docEmphasis">Mother yelled, &quot;Time to eat!&quot;</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The single quote is not matched on the line. The Korn
      shell produces a secondary prompt. It is waiting for the quote to be
      matched.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The single quotes protect all metacharacters from
      interpretation. In this example, the <span class="docEmphasis">$</span>
      and the <span class="docEmphasis">?</span> are protected from the shell
      and will be treated as literals.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The single quotes protect the double quotes in this
      string. The double quotes here are conversational quotes.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Double Quotes.</b> Double quotes must be matched, will
allow variable and command substitution, and protect any other special
metacharacters from being interpreted by the shell.<span id="ENB10-4"><a class="docLink" href="#EN10-4"><sup>[4]</sup></a></span>
</p>

<h5 id="ch10list54" class="docExampleTitle">Example 10.54 </h5>
<pre>1   $ name=Jody
2   $ <span class="docEmphStrong">print &quot;Hi $name, I'm glad to meet you!&quot;</span>
    <span class="docEmphasis">Hi Jody, I'm glad to meet you!</span>

3   $ <span class="docEmphStrong">print &quot;Hey $name, the time is 'date'&quot;</span>
    <span class="docEmphasis">Hey Jody, the time is Fri Dec 18 14:04:11 PST 2001</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">name</span> is
      assigned the string <span class="docEmphasis">Jody.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The double quotes surrounding the string will protect
      all special metacharacters from interpretation, with the exception of
      <span class="docEmphasis">$</span> in <span class="docEmphasis">$name.</span>
      Variable substitution is performed within double quotes.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Variable substitution and command substitution are both
      performed when enclosed within double quotes. The variable
      <span class="docEmphasis">name</span> is expanded and the command in
      backquotes, <span class="docEmphasis">date,</span> is executed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec15">10.1.15 Command Substitution</h4>
<p class="docText">Command substitution is used when assigning the output of a
command to a variable, or when substituting the output of a command into a
string. The Bourne and C shells use backquotes to perform command substitution.
The Korn shell does allow the backquote format (calling it &quot;obsolescent&quot;), but
placing the command in parentheses is the preferred method because it has
simpler quoting rules and makes nesting commands easier.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>'Unix command'      <span class="docEmphasis"># Old method with backquotes</span>

$(Unix command)     <span class="docEmphasis"># New method</span>
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list55" class="docExampleTitle">Example 10.55 </h5>
<pre>(Old Way)
1   $ <span class="docEmphStrong">print &quot;The hour is 'date +%H'&quot;</span>
    <span class="docEmphasis">The hour is 09</span>

2   $ <span class="docEmphStrong">name='nawk –F: ''{print $1}' database'</span>
    $ <span class="docEmphStrong">print $name</span>
    <span class="docEmphasis">Ebenezer Scrooge</span>

3   $ <span class="docEmphStrong">ls 'ls /etc'</span>
    <span class="docEmphasis">shutdown</span>

4   $ <span class="docEmphStrong">set 'date'</span>

5   $ <span class="docEmphStrong">print $*</span>
    <span class="docEmphasis">Sat Oct 13 09:35:21 PDT 2001</span>

6   $ <span class="docEmphStrong">print $2 $6</span>
    <span class="docEmphasis">Oct 2001</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">date</span>
      command is substituted into the string.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">nawk</span>
      command is assigned to the variable <span class="docEmphasis">name,</span>
      and displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">ls</span>
      command, enclosed in backquotes, is a list of files from the
      <span class="docEmphasis">/etc</span> directory. The filenames will be
      arguments to the first <span class="docEmphasis">ls</span> command. All
      files with the same name in <span class="docEmphasis">/etc</span> as are
      in the current directory are listed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command
      assigns the output of the <span class="docEmphasis">date</span> command to
      positional parameters. Whitespace separates the list of words into its
      respective parameters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">$*</span> variable holds
      all of the parameters. The output of the <span class="docEmphasis">date</span>
      command was stored in the <span class="docEmphasis">$*</span> variable.
      Each parameter is separated by whitespace.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The second and sixth parameters are printed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText">The <span class="docEmphasis">ksh alternate</span> for using
backquotes in command substitution is presented in
<a class="docLink" href="#ch10list56">Example 10.56</a>.</p>
<h5 id="ch10list56" class="docExampleTitle">Example 10.56 </h5>
<pre>(The New ksh Way)
1   $ <span class="docEmphStrong">d=$(date)</span>
    <span class="docEmphStrong">print $d</span>
    <span class="docEmphasis">Sat Oct 20 09:35:21 PDT 2001</span>

2   $ <span class="docEmphStrong">line = $(&lt; filex)</span>

3   $ <span class="docEmphStrong">print The time is $(date +%H)</span>
    <span class="docEmphasis">The time is 09</span>
4   <span class="docEmphStrong">$ machine=$(uname –n)</span>
    <span class="docEmphStrong">$ print $machine</span>
    <span class="docEmphasis">jody</span>

5   <span class="docEmphStrong">$ dirname=&quot;$(basename $(pwd)) &quot;</span>      <span class="docEmphasis"># Nesting commands</span>
    <span class="docEmphStrong">$ print $dirname</span>
    <span class="docEmphasis">bin</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">date</span> command is
      enclosed within parentheses. The output of the command is returned to the
      expression, assigned to the variable <span class="docEmphasis">d,</span>
      and displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The input from the file is assigned to the variable
      <span class="docEmphasis">line.</span> The <span class="docEmphasis">&lt;
      filex</span> notation has the same effect as <tt>'</tt><span class="docEmphasis">cat
      filex</span><tt>'</tt><span class="docEmphasis">.</span> Command
      substitution is performed within the parentheses when the parentheses are
      preceded with a dollar sign.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The UNIX <span class="docEmphasis">date</span> command
      and its hour argument, <span class="docEmphasis">+%H,</span> are enclosed
      within parentheses. Command substitution is performed, and the results are
      placed within the <span class="docEmphasis">print</span> string.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Command substitution has been performed. The output of
      the UNIX <span class="docEmphasis">uname</span> command is assigned to the
      variable <span class="docEmphasis">machine.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">To set the variable <span class="docEmphasis">dirname</span>
      to the name (only) of the present working directory, command substitution
      is nested. The <span class="docEmphasis">pwd</span> command is executed
      first, passing the full pathname of the present working directory as an
      argument to the UNIX command <span class="docEmphasis">basename.</span>
      The <span class="docEmphasis">basename</span> command strips off all but
      the last element of a pathname. Nesting commands within backquotes is not
      allowed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec16">10.1.16 Functions</h4>
<p class="docText">This section introduces functions so that you can use them
interactively or store them in your initialization files. Later, when discussing
scripts, functions will be covered in more depth. Functions can be used when an
alias is not enough, that is, for passing arguments. Functions are often defined
in the user's initialization file, <span class="docEmphasis">.profile.</span>
They are like mini-scripts, but unlike scripts, functions run in the current
environment; that is, the shell does not fork a child process to execute a
function. All variables are shared with the shell that invoked the function.
Often functions are used to improve the modularity of a script. Once defined,
they can be used repeatedly and even stored in another directory.</p>
<p class="docText">Functions must be defined before they are invoked; there are
two formats used to define them. One format came from the Bourne shell and the
other is new with the Korn shell. Functions can be exported from one invocation
of the shell to the next. The <span class="docEmphasis">typeset</span> function
and <span class="docEmphasis">unset</span> command can be used to list and unset
functions. See <a class="docLink" href="#ch10table17">Table 10.17</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table17" class="docTableTitle">Table 10.17. The <span class="docEmphasis">typeset</span>
  Command and Functions</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –f</span>
    </td>
    <td class="docTableCell" vAlign="top">Lists functions and their definitions;
    <span class="docEmphasis">functions</span> is an alias for
    <span class="docEmphasis">typeset –f.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset +f</span>
    </td>
    <td class="docTableCell" vAlign="top">Lists only function names. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">unset –f
    name</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Unset</span>
    a function. </td>
  </tr>
</table>

<p class="docText"><b>Defining Functions.</b> There are two acceptable formats
for defining functions: the Bourne shell format (still allowed for upward
compatibility) and the new Korn shell format. A function must be defined before
it can be used.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>(Bourne Shell)
functionname() { commands ; commands; }<span id="ENB10-5"><a class="docLink" href="#EN10-5"><sup>[5]</sup></a></span>

(Korn Shell)
function functionname { commands; commands; }
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list57" class="docExampleTitle">Example 10.57 </h5>
<pre>1   $ <span class="docEmphStrong">function fun { pwd; ls; date; }</span>

2   $ <span class="docEmphStrong">fun</span>
    <span class="docEmphasis">/home/jody/ellie/prac</span>
    <span class="docEmphasis">abc      abc123   file1.bak  none      nothing  tmp</span>
    <span class="docEmphasis">abc1     abc2     file2      nonsense  nowhere  touch</span>
    <span class="docEmphasis">abc122   file1    file2.bak  noone     one</span>
    <span class="docEmphasis">Tue Feb 9 11:15:48 PST 2001</span>

3   $ <span class="docEmphStrong">function greet { print &quot;Hi $1 and $2&quot;; }</span>

4    <span class="docEmphStrong">greet tom joe</span>              <span class="docEmphasis">#</span> <span class="docEmphasis">Here</span> <span class="docEmphasis">$1 is tom and $2 is joe</span>
    <span class="docEmphasis">Hi tom and joe</span>

5   $ <span class="docEmphStrong">set jane nina lizzy</span>
6   $ <span class="docEmphStrong">print $*</span>
    <span class="docEmphasis">jane nina lizzy</span>

7   $ <span class="docEmphStrong">greet tom joe</span>
    <span class="docEmphasis">Hi tom and joe</span>

8   $ <span class="docEmphStrong">print $1 $2</span>
    <span class="docEmphasis">jane nina</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">fun</span> is
      named and defined<span class="docEmphasis">.</span> The name is followed
      by a list of commands enclosed in curly braces. Each command is separated
      by a semicolon. There must be a space after the first curly brace or you
      will get a syntax error such as <span class="docEmphasis">ksh: syntax
      error:</span> <span class="docEmphasis">`}' unexpected.</span> A function
      must be defined before it can be used.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function behaves like a script or an alias when
      invoked. Each of the commands in the function definition is executed in
      turn.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">There are two positional parameters used in the
      function <span class="docEmphasis">greet.</span> When arguments are given
      to the function, the positional parameters are assigned those values.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The arguments to the function <span class="docEmphasis">
      tom</span> and <span class="docEmphasis">joe</span> are assigned to
      <span class="docEmphasis">$1</span> and <span class="docEmphasis">$2,</span>
      respectively. The positional parameters in a function are private to the
      function and will not interfere with any used outside the function.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The positional parameters are set at the command line.
      These variables have nothing to do with the ones set in the function.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$*</span> displays the values
      of the currently set positional parameters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">greet</span> is
      called. The values assigned to the positional parameters
      <span class="docEmphasis">$1</span> and <span class="docEmphasis">$2</span>
      are <span class="docEmphasis">tom</span> and <span class="docEmphasis">joe,</span>
      respectively.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The positional variables assigned at the command line
      are unaffected by those set in the function.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Functions and Aliases.</b> When processing the command
line, the shell looks for aliases before special built-in commands and for
special built-ins before functions. If a function has the same name as a
built-in, the built-in will take priority over the function. An alias for a
special built-in can be defined, and then the function name can be given the
name of the alias to override the order of processing.</p>
<h5 id="ch10list58" class="docExampleTitle">Example 10.58 </h5>
<pre>(The ENV File)
1   alias cd=_cd
2   function _cd {
3   \cd $1
4   print $(basename $PWD)
5   }

(The Command Line)
$ <span class="docEmphStrong">cd /</span>
<span class="docEmphasis">/</span>
$ <span class="docEmphStrong">cd $HOME/bin</span>
<span class="docEmphasis">bin</span>
$ <span class="docEmphStrong">cd ..</span>
<span class="docEmphasis">ellie</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The alias for <span class="docEmphasis">cd</span> is
      assigned <span class="docEmphasis">_cd.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">_cd</span> is
      defined. The opening curly brace marks the start of the function
      definition.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If an alias is preceded by a backslash, alias
      substitution is not performed. The backslash precedes
      <span class="docEmphasis">cd</span> to execute the built-in
      <span class="docEmphasis">cd</span> command, not the alias. Without the
      backslash, the function would be recursive and the shell would display an
      error message: <span class="docEmphasis">cd_: recursion too dee</span>p.
      <span class="docEmphasis">$1</span> is the argument (name of a directory )
      passed to <span class="docEmphasis">cd.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The name of the directory (not the full pathname) is
      printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The closing curly brace marks the end of the function
      definition.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Listing Functions.</b> To list functions and their
definitions, use the <span class="docEmphasis">typeset</span> command.</p>
<h5 id="ch10list59" class="docExampleTitle">Example 10.59 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">typeset –f</span>
    <span class="docEmphasis">function fun</span>
    <span class="docEmphasis">{</span>
    <span class="docEmphasis">pwd; ls; date; }</span>
    <span class="docEmphasis">function greet</span>
    <span class="docEmphasis">{</span>
    <span class="docEmphasis">print &quot;hi $1 and $2&quot;; }</span>

2   $ <span class="docEmphStrong">typeset +f</span>
    <span class="docEmphasis">fun</span>
    <span class="docEmphasis">greet</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command,
      with the <span class="docEmphasis">–f</span> option, lists the function
      and its definition.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command,
      with the <span class="docEmphasis">+f</span> option, lists only the names
      of defined functions.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Unsetting Functions.</b> When a function is unset, it will
be removed from the shell's memory.</p>
<h5 id="ch10list60" class="docExampleTitle">Example 10.60 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">typeset –f</span>
    <span class="docEmphasis">function fun</span>
    <span class="docEmphasis">{</span>
        <span class="docEmphasis">pwd; ls; date; }</span>
    <span class="docEmphasis">function greet</span>
    <span class="docEmphasis">{</span>
    <span class="docEmphasis">print &quot;hi $1 and $2&quot;; }</span>
2   $ <span class="docEmphStrong">unset -f fun</span>

3   $ <span class="docEmphStrong">typeset –f</span>
    <span class="docEmphasis">function greet</span>
    <span class="docEmphasis">{</span>
    <span class="docEmphasis">print &quot;hi $1 and $2&quot;; }</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset –f</span> command
      displays the function and its definition. Two functions,
      <span class="docEmphasis">fun</span> and <span class="docEmphasis">greet,</span>
      are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The built-in command <span class="docEmphasis">unset,</span>
      with the <span class="docEmphasis">–f</span> option, undefines the
      <span class="docEmphasis">fun</span> function, removing it from the
      shell's memory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fun</span> function is no
      longer shown as one of the functions defined when the
      <span class="docEmphasis">typeset –f</span> command is executed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec17">10.1.17 Standard I/O and Redirection</h4>
<p class="docText">The shell opens three files (called <span class="docEmphasis">
streams</span>) whenever a program is started: <span class="docEmphasis">stdin,
stdout,</span> and <span class="docEmphasis">stderr.</span> Standard input
normally comes from the keyboard and is associated with file descriptor 0.
Standard output normally goes to the screen, file descriptor 1. Standard error
normally goes to the screen, file descriptor 2. Standard input, output, and
error can be redirected to or from a file. See
<a class="docLink" href="#ch10table18">Table 10.18</a> for a list of redirection
operators.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table18" class="docTableTitle">Table 10.18. Redirection</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Operator</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&lt;</span>
    </td>
    <td class="docTableCell" vAlign="top">Redirect input. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&gt;</span>
    </td>
    <td class="docTableCell" vAlign="top">Redirect output. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&gt;&gt;</span>
    </td>
    <td class="docTableCell" vAlign="top">Append output. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">2&gt;</span>
    </td>
    <td class="docTableCell" vAlign="top">Redirect error. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">1&gt;&amp;2</span>
    </td>
    <td class="docTableCell" vAlign="top">Redirect output to where error is
    going. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">2&gt;&amp;1</span>
    </td>
    <td class="docTableCell" vAlign="top">Redirect error to where output is
    going. </td>
  </tr>
</table>

<h5 id="ch10list61" class="docExampleTitle">Example 10.61 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">tr '[A-Z]' '[a-z]' &lt; myfile</span>   <span class="docEmphasis"># Redirect input</span>

2   $ <span class="docEmphStrong">ls &gt; lsfile</span>         <span class="docEmphasis"># Redirect output</span>
    $ <span class="docEmphStrong">cat lsfile</span>
    <span class="docEmphasis">dir1</span>
    <span class="docEmphasis">dir2</span>
    <span class="docEmphasis">file1</span>
    <span class="docEmphasis">file2</span>
    <span class="docEmphasis">file3</span>

3   $ <span class="docEmphStrong">date &gt;&gt; lsfile</span>      <span class="docEmphasis"># Redirect and append output</span>
    $ <span class="docEmphStrong">cat lsfile</span>
    <span class="docEmphasis">dir1</span>
    <span class="docEmphasis">dir2</span>
    <span class="docEmphasis">file1</span>
    <span class="docEmphasis">file2</span>
    <span class="docEmphasis">file3</span>
    <span class="docEmphasis">Mon Sept 17 12:57:22 PDT 2001</span>

4   $ <span class="docEmphStrong">cc prog.c 2&gt; errfile</span>           <span class="docEmphasis"># Redirect error</span>

5   $ <span class="docEmphStrong">find . –name \*.c –print &gt; founditfile 2&gt; /dev/null</span>

6   $ <span class="docEmphStrong">find . –name \*.c –print &gt; foundit 2&gt;&amp;1</span>

7   $ <span class="docEmphStrong">print &quot;File needs an argument&quot; 1&gt;&amp;2</span>

8   $ <span class="docEmphStrong">function usage { print &quot;Usage: $0 [-y] [-g] filename&quot; 1&gt;&amp;2 ;</span>
           <span class="docEmphStrong">exit 1; }</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The standard input is redirected from the file
      <span class="docEmphasis">myfile</span> to the UNIX
      <span class="docEmphasis">tr</span> command. All uppercase letters are
      converted to lowercase letters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ls</span> command
      redirects its output to the file <span class="docEmphasis">lsfile.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">date</span>
      command is redirected and appended to <span class="docEmphasis">lsfile.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The file <span class="docEmphasis">prog.c</span> is
      compiled. If the compile fails, standard error is redirected to
      <span class="docEmphasis">errfile.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">find</span> command
      starts searching in the current working directory for filenames ending in
      <span class="docEmphasis">.c</span> and prints the files to a filenamed
      <span class="docEmphasis">founditfile.</span> Errors from the
      <span class="docEmphasis">find</span> command are sent to
      <span class="docEmphasis">/dev/null.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">find</span> command
      starts searching in the current working directory for filenames ending in
      <span class="docEmphasis">.c</span> and prints the files to a filenamed
      <span class="docEmphasis">foundit.</span> The standard error (file
      descriptor 2) is being sent to the same place that the standard output
      (file descriptor 1) is being sent, to the file called
      <span class="docEmphasis">foundit.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> command
      sends its message to standard error. Standard output is merged with
      standard error; that is, standard output is being redirected to the place
      where standard error goes, the terminal. This makes it possible to
      separate error messages from &quot;good&quot; output.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">usage</span> is
      defined. This function, when called, will print a usage message, send the
      output to standard error, and exit. This type of function is often used in
      scripts.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
exec</span> Command and Redirection.</span> The <span class="docEmphasis">exec</span>
command can be used to replace the current program with the one being
<span class="docEmphasis">exec</span>ed. Another use for the
<span class="docEmphasis">exec</span> command is to change standard output or
input without creating a subshell. If a file is opened with
<span class="docEmphasis">exec,</span> subsequent <span class="docEmphasis">read</span>
commands will move the file pointer down the file a line at a time until end of
file. The file must be closed to start reading from the beginning again.
However, if using UNIX utilities such as <span class="docEmphasis">cat</span>
and <span class="docEmphasis">sort,</span> the operating system closes the file
after each command has completed. See <a class="docLink" href="#ch10table19">
Table 10.19</a> for <span class="docEmphasis">exec</span> functionality.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table19" class="docTableTitle">Table 10.19. <span class="docEmphasis">exec</span>
  Commands</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec ls</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ls</span>
    will execute in place of the shell. When <span class="docEmphasis">ls</span>
    is finished, the shell in which it was started does not return. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec &lt; filea</span>
    </td>
    <td class="docTableCell" vAlign="top">Open <span class="docEmphasis">filea</span>
    for reading standard input. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec &gt; filex</span>
    </td>
    <td class="docTableCell" vAlign="top">Open <span class="docEmphasis">filex</span>
    for writing standard output. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec 2&gt;
    errors</span> </td>
    <td class="docTableCell" vAlign="top">Open <span class="docEmphasis">errors</span>
    for writing standard error. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec 2&gt;
    /dev/console</span> </td>
    <td class="docTableCell" vAlign="top">Sends all error messages to the
    <span class="docEmphasis">console.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec 3&lt;
    datfile</span> </td>
    <td class="docTableCell" vAlign="top">Open <span class="docEmphasis">datfile</span>
    as file descriptor 3 for reading input. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">sort &lt;&amp;3</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">datfile</span>
    is sorted. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec 4&gt;newfile</span>
    </td>
    <td class="docTableCell" vAlign="top">Open <span class="docEmphasis">newfile</span>
    as file descriptor 4 for writing. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ls &gt;&amp;4</span>
    </td>
    <td class="docTableCell" vAlign="top">Output of <span class="docEmphasis">ls</span>
    is redirected to <span class="docEmphasis">newfile.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec 5&lt;&amp;4</span>
    </td>
    <td class="docTableCell" vAlign="top">Make <span class="docEmphasis">fd 5</span>
    a copy of <span class="docEmphasis">fd 4.</span> Both descriptors refer to
    <span class="docEmphasis">newfile.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec 3&lt;&amp;–</span>
    </td>
    <td class="docTableCell" vAlign="top">Close file descriptor 3,
    <span class="docEmphasis">datfile.</span> </td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec18">10.1.18 Redirection and the Child Shell</h4>
<p class="docText">When the output of a command is redirected from the screen to
a file, the Korn shell creates a child (fork) shell to rearrange the file
descriptors, as shown in <a class="docLink" href="#ch10fig02">Figure 10.2</a>.</p>
<center>
<h5 id="ch10fig02" class="docFigureTitle">Figure 10.2. Redirection of standard output and
errors.</h5>
<p class="docText">
<img alt="graphics/10fig02.gif" src="10fig02.gif" border="0" width="500" height="601"></p>
</center>
<h4 class="docSection2Title" id="ch10lev2sec19">10.1.19 Pipes</h4>
<p class="docText">A pipe takes the output from the command on the left-hand
side of the pipe symbol and sends it to the input of a command on the right-hand
side of the pipe symbol. A pipeline can consist of more than one pipe.</p>
<h5 id="ch10list62" class="docExampleTitle">Example 10.62 </h5>
<pre>1   $ <span class="docEmphStrong">who &gt; tmp</span>

2   $ <span class="docEmphStrong">wc –l tmp</span>
    <span class="docEmphasis">4 tmp</span>

3   $ <span class="docEmphStrong">rm tmp</span>

4   $ <span class="docEmphStrong">who | wc -l</span>      <span class="docEmphasis"># Using the pipe</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The purpose of lines 1 through 3 is to count the number
    of people logged on (<span class="docEmphasis">who</span>), save the output
    of the command in a file (<span class="docEmphasis">tmp</span>), use the
    <span class="docEmphasis">wc –l</span> to count the number of lines in the
    tmp file (<span class="docEmphasis">wc –l</span>), and then remove the tmp
    file; that is, find the number of people logged on. The pipe performs the
    same task in one command.</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">who</span>
      command is redirected to the <span class="docEmphasis">tmp</span> file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">wc –l</span> command
      displays the number of lines in <span class="docEmphasis">tmp.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">tmp</span> file is
      removed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">With the pipe facility, you can perform all three of
      the above steps, 1,2, and 3, in one step. The output of the
      <span class="docEmphasis">who</span> command is sent to an anonymous
      kernel buffer (instead of to a temporary file that requires disk space);
      the <span class="docEmphasis">wc –l</span> command reads from the buffer
      and sends its output to the screen.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list63" class="docExampleTitle">Example 10.63 </h5>
<pre>1   $ <span class="docEmphStrong">ls | more</span>
    <span class="docEmphasis">&lt; lists (ls) all files one page at a time (more) &gt;</span>

2   $ <span class="docEmphStrong">du ~ | sort –n | sed –n '$p'</span>
    <span class="docEmphasis">72388  /home/jody/ellie</span>

3   $ <span class="docEmphStrong">cat | lp</span> <span class="docEmphasis">or</span>  <span class="docEmphStrong">cat | lpr</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ls</span> output is piped
      to the <span class="docEmphasis">more</span> command, which accepts input.
      Output is displayed one page at a time.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">du</span>
      command (disk usage) is sorted numerically and piped to the
      <span class="docEmphasis">sed</span> command (stream editor), which
      displays only the last line (<span class="docEmphasis">$p</span>).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">cat</span> command reads
      from standard input; its output is piped to the line printer (<span class="docEmphasis">lp</span>
      in SVR4 and <span class="docEmphasis">lpr</span> in BSD).</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec20">10.1.20 The <span class="docEmphasis">here</span>
<span class="docEmphasis">document</span> and Redirecting Input</h4>
<p class="docText">A <span class="docEmphasis">here document</span> captures
in-line input for programs such as <span class="docEmphasis">mail, sort,</span>
and <span class="docEmphasis">cat.</span> Input is placed between two words or
symbols. The first word is preceded by a UNIX command and the &lt;&lt; symbol. The
next line(s) consist of the input to be received by the command. The last line
consists of a second word that exactly matches the first word. This word is
called the final terminator and marks the end of input. It is used in the same
way Control-D is used to terminate input. There can be no spaces surrounding the
final terminator. If the first word is preceded by the &lt;&lt;–, leading tabs (and
only tabs) may precede the final terminator. Normally, <span class="docEmphasis">
here</span> <span class="docEmphasis">documents</span> are used in shell
scripts, rather than interactively. A good use for a <span class="docEmphasis">
here</span> <span class="docEmphasis">document</span> is to create a menu in a
script.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>UNIX command &lt;&lt; TERMINATOR
   lines of input
   input
TERMINATOR
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list64" class="docExampleTitle">Example 10.64 </h5>
<pre>(The Command Line)
1   $ cat &lt;&lt; <span class="docEmphStrong">FINISH</span><span class="docEmphasis"># FINISH is a user-defined terminator</span>
2   &gt; Hello there $LOGNAME
3   &gt; The time is $(date)
    &gt; I can't wait to see you!!!
4   &gt; <span class="docEmphStrong">FINISH</span>
5   <span class="docEmphasis">Hello there ellie</span>
    <span class="docEmphasis">The time is Sun Feb 7 19:42:16 PST 2001</span>
    <span class="docEmphasis">I can't wait to see you!!</span>
6   $
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The UNIX <span class="docEmphasis">cat</span> program
      will accept input until the word <span class="docEmphasis">FINISH</span>
      appears on a line by itself.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Variable substitution is performed within the
      <span class="docEmphasis">here document.</span> The
      <span class="docEmphasis">&gt;</span> is the Korn shell's secondary prompt.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Command substitution is performed within the
      <span class="docEmphasis">here document.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user-defined terminator, <span class="docEmphasis">
      FINISH,</span> marks the end of input for the <span class="docEmphasis">
      cat</span> program. It cannot have any spaces before or after it and is on
      a line by itself.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output from the <span class="docEmphasis">cat</span>
      program is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The shell prompt reappears.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list65" class="docExampleTitle">Example 10.65 </h5>
<pre>(From the .profile File)
1   print &quot;Select a terminal type&quot;
2   <span class="docEmphStrong">cat &lt;&lt; EOF</span>
      <span class="docEmphStrong">[1] sun</span>
      <span class="docEmphStrong">[2] ansi</span>
      <span class="docEmphStrong">[3] wyse50</span>
3   <span class="docEmphStrong">EOF</span>
4   read TERM
    ...
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked to select a terminal type.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The menu will appear on the screen. This is a
      <span class="docEmphasis">here document,</span> meaing from
      <span class="docEmphasis">here</span> until the matching
      <span class="docEmphasis">EOF</span> on line 3 is reached, input will be
      given to the <span class="docEmphasis">cat</span> command. You could use a
      series of echo commands to get the same results, but visually, the
      <span class="docEmphasis">here</span> <span class="docEmphasis">document</span>
      is nicer.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">EOF</span> is a user-defined
      terminator, marking the end of the <span class="docEmphasis">here</span>
      <span class="docEmphasis">document.</span> It must be at the left margin
      with no spaces surrounding it.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user input will be read in from the keyboard and
      assigned to <span class="docEmphasis">TERM.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list66" class="docExampleTitle">Example 10.66 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">cat &lt;&lt;– DONE</span>
    &gt;Hello there
    &gt;What's up?
    &gt;Bye now The time is $(date).

2   &gt;    <span class="docEmphStrong">DONE</span>
3   <span class="docEmphasis">Hello there</span>
    <span class="docEmphasis">What's up?</span>
    <span class="docEmphasis">Bye now The time is Sun Feb 7 19:48:23 PST 2001.</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">cat</span> program
      accepts input until <span class="docEmphasis">DONE</span> appears on a
      line by itself. The &lt;&lt;– operator allows the final terminator to be
      preceded by one or more tabs. (The &gt; is the shell's secondary prompt.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The final matching <span class="docEmphasis">DONE</span>
      terminator is preceded by a tab. From the first <span class="docEmphasis">
      DONE</span> on line 1 to the last <span class="docEmphasis">DONE</span> on
      this line, the text in between is sent as input to the
      <span class="docEmphasis">cat</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">cat</span>
      program is displayed on the screen.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec21">10.1.21 Timing Commands</h4>
<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
time</span> Command.</span> The <span class="docEmphasis">time</span> command is
a <span class="docEmphasis">ksh</span> built-in command. The
<span class="docEmphasis">time</span> command prints the following to standard
error: elapsed time, the user time, and the system time used to execute a
command.</p>
<h5 id="ch10list67" class="docExampleTitle">Example 10.67 </h5>
<pre>1   $ <span class="docEmphStrong">time sleep 3</span>
    <span class="docEmphasis">real  0m3.15s   took 3.15 seconds to run</span>
    <span class="docEmphasis">user  0m0.01s   sleep used its own code for .01 seconds</span>
    <span class="docEmphasis">sys   0m0.08s   and kernel code for .08 seconds</span>

2   $ <span class="docEmphStrong">time ps –ef | wc –l</span>    <span class="docEmphasis"># time is measured for all commands in</span>
    <span class="docEmphasis">38                       # the pipeline</span>
    <span class="docEmphasis">real  0m1.03s</span>
    <span class="docEmphasis">user  0m0.01s</span>
    <span class="docEmphasis">sys   0m0.10s</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">time</span> command will
      display the total amount of time elapsed to run the command, the time the
      user part of the program took to run, and the time the kernel spent
      running the program. The <span class="docEmphasis">sleep</span> command
      took <span class="docEmphasis">3.15</span> seconds to run.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The time is measured for the <span class="docEmphasis">
      ps</span> command and <span class="docEmphasis">wc</span> command.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec22">10.1.22 The <span class="docEmphasis">TMOUT</span>
Variable</h4>
<p class="docText">The <span class="docEmphasis">TMOUT</span> variable is an
integer type. It can be set to force users to type commands within a certain
period of time. <span class="docEmphasis">TMOUT,</span> by default, is set to
zero, allowing the user an infinite amount of time to type commands after the
<span class="docEmphasis">PS1</span> prompt. If <span class="docEmphasis">TMOUT</span>
is set to a value greater than zero, the shell will terminate after the time has
expired. Sixty additional seconds will be allotted as the grace period before
actually exiting the shell.</p>
<h5 id="ch10list68" class="docExampleTitle">Example 10.68 </h5>
<pre>$ <span class="docEmphStrong">TMOUT=600</span>
<span class="docEmphasis">time out in 60 seconds due to inactivity</span>
<span class="docEmphasis">ksh: timed out waiting for input</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The <span class="docEmphasis">TMOUT</span> variable is
    set to <span class="docEmphasis">600</span> seconds. If the user does
    nothing for 600 seconds, a message will appear on the screen and then an
    additional 60 seconds grace period will be allotted before the shell exits.
    If you do this at the prompt, your current shell exits.</td>
  </tr>
</table>
<h3 class="docSection1Title" id="ch10lev1sec2">10.2 Programming with the Korn Shell</h3>
<p class="docText">Writing shell scripts requires a few steps, as outlined in
the following section.</p>
<h4 class="docSection2Title" id="ch10lev2sec23">10.2.1 The Steps in Creating a Shell Script</h4>
<p class="docText">A shell script is normally written in an editor and consists
of commands interspersed with comments. Comments are preceded by a pound sign.</p>
<p class="docText"><b>The First Line.</b> At the top-left corner, to indicate
the program that will be executing the lines in the script,
<span class="docEmphasis">#!/bin/ksh</span> is commonly used. The
<span class="docEmphasis">#!</span> is called a magic number and is used by the
kernel to identify the program that should be interpreting the lines in the
script. This line must be the top line of your script. The Korn shell also
provides a number of invocation options that control how the shell behaves.
These options are listed at the end of this chapter.</p>
<p class="docText"><b>Comments.</b> Comments are lines preceded by a pound sign.
They are used to document your script. It is sometimes difficult to understand
what the script is supposed to do if it is not commented. Although comments are
important, they are often too sparse or not even used at all. Try to get used to
commenting what you are doing, not only for someone else, but also for yourself.</p>
<p class="docText"><b>Executable Statements and Korn Shell Constructs.</b> A
Korn shell program consists of a combination of UNIX commands, Korn shell
commands, programming constructs, and comments.</p>
<p class="docText"><b>Naming and Storing Scripts.</b> When naming scripts, it is
a good idea to give the script a meaningful name and one that does not conflict
with other UNIX commands or aliases. For example, you may want to call the
script <span class="docEmphasis">test</span> because it is merely performing
some simple test procedure, but <span class="docEmphasis">test</span> is a
built-in command and you may find you are executing the wrong
<span class="docEmphasis">test.</span> Additionally, if you name the file
<span class="docEmphasis">foo, goo, boobar,</span> and so forth, in a few days
or even hours you may not have any idea what is in that script!</p>
<p class="docText">After you have tested your script and found it &quot;bug-free,&quot;
make a directory where you can store the scripts, then set the path so that your
scripts can be executed from anywhere in the directory hierarchy.</p>
<h5 id="ch10list69" class="docExampleTitle">Example 10.69 </h5>
<pre>1   $ <span class="docEmphStrong">mkdir ~/bin</span>
2   $ <span class="docEmphStrong">mv myscript ~/bin</span>

(In <span class="docEmphasis">.profile</span>)
3   export PATH=${PATH}:~/bin

4   $ <span class="docEmphStrong">. .profile</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A common place to store scripts is in a directory under
      your home directory called <span class="docEmphasis">bin.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The script, called <span class="docEmphasis">myscript,</span>
      is moved into the new <span class="docEmphasis">bin</span> directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The new directory is added to the
      <span class="docEmphasis">PATH</span> variable in the
      <span class="docEmphasis">.profile</span> initialization file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">dot</span> command causes
      the <span class="docEmphasis">.profile</span> file to be executed in the
      current environment so that you do not have to log out and then back in to
      enable the new setting.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Making a Script Executable.</b> When you create a file, it
is not automatically given execute permission (regardless of how
<span class="docEmphasis">umask</span> is set). You need this permission to run
your script. Use the <span class="docEmphasis">chmod</span> command to turn on
execute permission.</p>
<h5 id="ch10list70" class="docExampleTitle">Example 10.70 </h5>
<pre>1   $ <span class="docEmphStrong">chmod +x myscript</span>
2   $ <span class="docEmphStrong">ls -lF myscript</span>
    <span class="docEmphasis">-rwxr--xr--x  1 ellie      0 Jul 12 13:00 joker*</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">chmod</span> command is
      used to turn on execute permission for the user, group, and others.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of the <span class="docEmphasis">ls</span>
      command indicates that all users have execute permission on the
      <span class="docEmphasis">joker</span> file. The asterisk at the end of
      the filename also indicates that this is an executable program.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">Using a Script as an Argument to
<span class="docEmphasis">ksh</span>.</span> If you don't make a script
executable, you can execute it by passing it as an argument to the
<span class="docEmphasis">ksh</span> command:</p>
<h5 id="ch10list71" class="docExampleTitle">Example 10.71 </h5>
<pre>(The Command Line)
$ <span class="docEmphStrong">ksh myscript</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">If the <span class="docEmphasis">ksh</span> program is
    given a scriptname as its argument, it will execute the script and the
    <span class="docEmphasis">#!</span> line is not necessary or even used.</td>
  </tr>
</table>

<p class="docText"><b>A Scripting Session.</b> In
<a class="docLink" href="#ch10list72">Example 10.72</a>, the user will create a
script in the editor. After saving the file, the execute permissions are turned
on, and the script is executed. If there are errors in the program, the Korn
shell will respond immediately.</p>
<h5 id="ch10list72" class="docExampleTitle">Example 10.72 </h5>
<pre>(The Script)
1   #!/bin/ksh
2   <span class="docEmphasis"># This is the first Korn shell program of the day.</span>
    <span class="docEmphasis"># Scriptname: greetings</span>
    <span class="docEmphasis"># Written by: Karen Korny</span>
3   print &quot;Hello $LOGNAME, it's nice talking to you.&quot;
4   print &quot;Your present working directory is $(pwd).&quot;
    print &quot;You are working on a machine called $(uname -n).&quot;
    print &quot;Here is a list of your files.&quot;
5   ls     <span class="docEmphasis"># List files in the present working directory</span>
    print &quot;Bye for now $LOGNAME. The time is $(date +%T)!&quot;

(The Command Line)
    $ <span class="docEmphStrong">chmod +x greetings</span>
    $ <span class="docEmphStrong">greetings</span>
3   <span class="docEmphasis">Hello karen, it's nice talking to you.</span>
4   <span class="docEmphasis">Your present working directory is /home/lion/karen/junk</span>
    <span class="docEmphasis">Your are working on a machine called lion.</span>
    <span class="docEmphasis">Here is a list of your files.</span>
5   <span class="docEmphasis">Afile        cplus  letter    prac</span>
    <span class="docEmphasis">Answerbook  cprog   library   prac1</span>
    <span class="docEmphasis">bourne       joke   notes     perl5</span>
    <span class="docEmphasis">Bye for now karen. The time is 18:05:07!</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The first line of the script, <span class="docEmphasis">
      #!/bin/ksh,</span> lets the kernel know what interpreter will execute the
      lines in this program.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The comments are nonexecutable lines preceded by a #.
      They can be on a line by themselves or inserted in a line after a command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> command
      displays the line on the screen, after variable substitution is performed
      by the shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> command
      displays the line on the screen, after command substitution is performed
      by the shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ls</span> command is
      executed. The comment, any text on the line after the pound sign (#), will
      be ignored by the shell.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec24">10.2.2 Reading User Input</h4>
<p class="docText">The <span class="docEmphasis">read</span> command is used to
take input from the terminal or from a file until the newline is reached. The
Korn shell provides some additional options for the <span class="docEmphasis">
read</span> command. See <a class="docLink" href="#ch10table20">Table 10.20</a>
for different <span class="docEmphasis">read</span> formats. See
<a class="docLink" href="#ch10table21">Table 10.21</a> for
<span class="docEmphasis">read</span> options.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table20" class="docTableTitle">Table 10.20. The <span class="docEmphasis">read</span>
  Format</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Format</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">read answer</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Reads</span>
    a line from standard input and assigns it to the variable
    <span class="docEmphasis">answer.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">read first
    last</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Reads</span>
    a line from standard input to the first whitespace or newline, putting the
    first word typed into the variable <span class="docEmphasis">first</span>
    and the rest of the line into the variable <span class="docEmphasis">last.</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">read
    response?&quot;Do you feel okay?&quot;</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Displays</span>
    the string <span class="docEmphasis">Do you feel okay?</span> to standard
    error and waits for user to type a reply, then puts the reply in the
    variable <span class="docEmphasis">response.</span> This form of
    <span class="docEmphasis">read</span> requires and accepts only one
    variable. Whatever the user types, until the newline, will be stored in
    <span class="docEmphasis">response.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">read –u3
    line</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Reads</span>
    a line from file descriptor <span class="docEmphasis">3</span> into variable
    <span class="docEmphasis">line.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">read</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Reads</span>
    input into a built-in variable, <span class="docEmphasis">REPLY.</span> </td>
  </tr>
</table>

<p>&nbsp;</p>
<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table21" class="docTableTitle">Table 10.21. The <span class="docEmphasis">read</span>
  Options</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Options</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–r</span>
    </td>
    <td class="docTableCell" vAlign="top">Treats newline character, the
    <span class="docEmphasis">\n,</span> as a literal. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–s</span>
    </td>
    <td class="docTableCell" vAlign="top">Copies a line into the history file.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–un</span>
    </td>
    <td class="docTableCell" vAlign="top">Reads from file descriptor
    <span class="docEmphasis">n;</span> the default is <span class="docEmphasis">
    fd 0,</span> or standard input. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–p</span>
    </td>
    <td class="docTableCell" vAlign="top">Reads a line of input from a coprocess.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">On Versions of ksh Newer than 1988:</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–A</span>
    </td>
    <td class="docTableCell" vAlign="top">Stores the fields as an array, index
    starting at zero. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–t sec</span>
    </td>
    <td class="docTableCell" vAlign="top">Puts a limit of seconds on the user's
    response time. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–d char</span>
    </td>
    <td class="docTableCell" vAlign="top">Used as an alternate delimiter for
    terminating input; newline is the default. </td>
  </tr>
</table>

<h5 id="ch10list73" class="docExampleTitle">Example 10.73 </h5>
<pre><span class="docEmphasis">(The Script)</span>
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: nosy</span>
    print –n &quot;Are you happy? &quot;
1   <span class="docEmphStrong">read answer</span>
    print &quot;$answer is the right response.&quot;
    print –n &quot;What is your full name? &quot;

2   <span class="docEmphStrong">read first middle last</span>
    print &quot;Hello $first&quot;
    print –n &quot;Where do you work? &quot;
3   <span class="docEmphStrong">read</span>

4   print I guess $REPLY keeps you busy!

5   <span class="docEmphStrong">read place?&quot;Where do you live? &quot;</span>
    <span class="docEmphasis"># New ksh read and print combined</span>
    print Welcome to $place, $first $last


<span class="docEmphasis">(The Output)</span>
    $ <span class="docEmphStrong">nosy</span>
    <span class="docEmphasis">Are you happy?</span> <span class="docEmphBoldItalic">Yes</span>
1   <span class="docEmphasis">Yes is the right response.</span>
2   <span class="docEmphasis">What is your full name?</span> <span class="docEmphBoldItalic">Jon Jake Jones</span>
    <span class="docEmphasis">Hello Jon</span>
3   <span class="docEmphasis">Where do you work?</span> <span class="docEmphBoldItalic">Tandem</span>
4   <span class="docEmphasis">I guess Tandem keeps you busy!</span>
5   <span class="docEmphasis">Where do you live?</span> <span class="docEmphBoldItalic">Timbuktu</span>
    <span class="docEmphasis">Welcome to Timbuktu, Jon Jones</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command
      accepts a line of user input and assigns the input to the variable
      <span class="docEmphasis">answer.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command
      accepts input from the user and assigns the first word of input to the
      variable <span class="docEmphasis">first,</span> assigns the second word
      of input to the variable <span class="docEmphasis">middle,</span> and all
      the rest of the words to the end of the line to the variable
      <span class="docEmphasis">last.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command,
      without an argument, accepts a line of input from the user and assigns the
      input to the built-in variable <span class="docEmphasis">REPLY.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">After the shell has performed variable substitution,
      the <span class="docEmphasis">print</span> function prints the string,
      showing the value of the built-in <span class="docEmphasis">REPLY</span>
      variable.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the variable following the <span class="docEmphasis">
      read</span> command is appended with a question mark (<span class="docEmphasis">?</span>),
      the string after the question mark is displayed as a prompt. The user
      input is stored in the variable <span class="docEmphasis">place.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Read and File Descriptors.</b> When the system boots up,
three files called streams (<span class="docEmphasis">stdin, stdout,</span> and
<span class="docEmphasis">stderr</span>) are opened and assigned to an array of
file descriptors. The first three file descriptors, 0, 1, and 2, are for
standard input, standard output, and standard error, respectively. The next file
descriptor available is file descriptor 3. The <span class="docEmphasis">–u</span>
option allows the <span class="docEmphasis">read</span> command to read directly
from the file descriptor.</p>
<h5 id="ch10list74" class="docExampleTitle">Example 10.74 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">cat filex</span>
    <span class="docEmphasis">Captain Kidd</span>
    <span class="docEmphasis">Scarlett O'Hara</span>

2   $ <span class="docEmphStrong">exec 3&lt; filex</span>
    <span class="docEmphasis"># filex is assigned to file descriptor 3 for reading</span>

3   $ <span class="docEmphStrong">read –u3 name1</span>
    <span class="docEmphasis"># read from filex and store input in variable, name1</span>

4   $ print $name1
    <span class="docEmphasis">Captain Kidd</span>

5   $ <span class="docEmphStrong">read –u3 name2</span>
    $ print $name2
    <span class="docEmphasis">Scarlett O'Hara</span>

6   $ <span class="docEmphStrong">exec 3&lt;&amp;-</span>               <span class="docEmphasis"># Close file descriptor 3</span>

7   $ <span class="docEmphStrong">read -u3 line</span>
    <span class="docEmphasis">ksh: read: bad file unit number</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The contents of <span class="docEmphasis">filex</span>
      are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">exec</span> command is
      used to open file descriptor <span class="docEmphasis">3</span> for
      reading from <span class="docEmphasis">filex.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command reads
      one line directly from unit <span class="docEmphasis">3</span> (file
      descriptor <span class="docEmphasis">3,</span> <span class="docEmphasis">
      filex</span>) and assigns that line to the variable
      <span class="docEmphasis">name1.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The line stored in <span class="docEmphasis">name1</span>
      is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The file <span class="docEmphasis">filex</span> is
      still open, and this <span class="docEmphasis">read</span> command reads
      the next line from the file and stores that line in the variable
      <span class="docEmphasis">name2.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">File descriptor 3 (unit 3) is closed.
      <span class="docEmphasis">filex</span> is no longer open.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Since file descriptor 3 (<span class="docEmphasis">filex</span>)
      has been closed, the <span class="docEmphasis">read</span> command fails
      when attempting to read input from that descriptor into variable
      <span class="docEmphasis">line.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Reading through Files.</b>
<a class="docLink" href="#ch10list75">Example 10.75</a> uses the
<span class="docEmphasis">read</span> command with a <span class="docEmphasis">
while</span> loop. The loop will iterate through the file one line at a time.
When end of file is reached, the loop terminates. The files are opened with
descriptors (units) for reading.</p>
<h5 id="ch10list75" class="docExampleTitle">Example 10.75 </h5>
<pre>(The Files)
1   $ <span class="docEmphStrong">cat names</span>
    <span class="docEmphasis">Merry Melody</span>
    <span class="docEmphasis">Nancy Drew</span>
    <span class="docEmphasis">Rex Allen</span>
    $ <span class="docEmphStrong">cat addresses</span>
    <span class="docEmphasis">150 Piano Place</span>
    <span class="docEmphasis">5 Mystery Lane</span>
    <span class="docEmphasis">130 Cowboy Terrace</span>
------------------------------------------------------------------
(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: readit</span>
2   while <span class="docEmphStrong">read -u3 line1 &amp;&amp; read -u4 line2</span>
    do
3      print &quot;$line1:$line2&quot;
4   done <span class="docEmphStrong">3&lt;$1 4&lt;$2</span>
------------------------------------------------------------------
(The Command Line)
5   $ <span class="docEmphStrong">readit names addresses</span>
    <span class="docEmphasis">Merry Melody:150 Piano Place</span>
    <span class="docEmphasis">Nancy Drew:5 Mystery Lane</span>
    <span class="docEmphasis">Rex Allen:130 Cowboy Terrace</span>
---------------------------------------------------------------
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The contents of two files, <span class="docEmphasis">
      names</span> and <span class="docEmphasis">addresses,</span> are
      displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> loop is
      started. The <span class="docEmphasis">read</span> command reads a line of
      input from file descriptor <span class="docEmphasis">3</span> (unit
      <span class="docEmphasis">3</span>) and, if successful, reads another line
      from file descriptor <span class="docEmphasis">4.</span> The file
      descriptors (units) are assigned filenames on line 4. The filenames are
      being passed as arguments, or positional parameters 1 and 2.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the first variable, a colon, and the value
      of the second variable are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The input assigned to file descriptor
      <span class="docEmphasis">3</span> is the first command line argument,
      <span class="docEmphasis">names.</span> The input assigned to file
      descriptor <span class="docEmphasis">4</span> is the second command line
      argument, <span class="docEmphasis">addresses.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The script is executed with command line arguments (the
      names of two files).</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec25">10.2.3 Arithmetic</h4>
<p class="docText">The Korn shell supports both integer and floating point
arithmetic, but floating point arithmetic is available only on versions of the
Korn shell newer than 1988. The <span class="docEmphasis">typeset</span> command
is used for assigning types. See <a class="docLink" href="#ch10table22">Table
10.22</a> for the <span class="docEmphasis">typeset</span> command.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table22" class="docTableTitle">Table 10.22. <span class="docEmphasis">typeset</span>
  and Arithmetic</h5>
  </caption>
  <colgroup span="3" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    typeset Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Alias</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –i
    variable</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">integer</span>
    variable </td>
    <td class="docTableCell" vAlign="top">Variable is only allowed integer
    assignment. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –i#</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">#</span> is
    the base number for the integer. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="3">
    <span class="docEmphBoldItalic">On Versions of ksh Newer than 1988:</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –F
    variable</span> </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Floating point number assignment. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –E
    variable</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">float</span>
    variable </td>
    <td class="docTableCell" vAlign="top">Floating point number assignment. </td>
  </tr>
</table>

<p class="docText"><b>The Integer Type.</b> Variables can be declared as
integers with the <span class="docEmphasis">typeset –i</span> command or its
alias, <span class="docEmphasis">integer.</span> If you attempt to assign any
string value, <span class="docEmphasis">ksh</span> returns an error. If you
assign a floating point number, the decimal point and the fractional value will
be truncated. The <span class="docEmphasis">integer</span> alias can be used
instead of <span class="docEmphasis">typeset –i.</span> Numbers can also be
represented in different bases such as <span class="docEmphasis">binary, octal,</span>
<span class="docEmphasis">and</span> <span class="docEmphasis">hex.</span></p>
<h5 id="ch10list76" class="docExampleTitle">Example 10.76 </h5>
<pre>1   $ <span class="docEmphStrong">typeset –i num</span> or <span class="docEmphStrong">integer num</span>       <span class="docEmphasis"># integer is an alias</span> <span class="docEmphasis">for</span>
                                          <span class="docEmphasis"># typeset -i</span>
2   $ <span class="docEmphStrong">num=hello</span>
    <span class="docEmphasis">/bin/ksh: hello: bad number</span>

3   $ <span class="docEmphStrong">num=5 + 5</span>
    <span class="docEmphasis">/bin/ksh: +: not found</span>

4   $ <span class="docEmphStrong">num=5+5</span>
    $ echo $num
    <span class="docEmphasis">10</span>

5   $ <span class="docEmphStrong">num=4*6</span>
    $ echo $num
    <span class="docEmphasis">24</span>

6   $ <span class="docEmphStrong">num=&quot;4 * 6&quot;</span>
    $ echo $num
    <span class="docEmphasis">24</span>

7   $ <span class="docEmphStrong">num=6.789</span>
    $ echo $num
    <span class="docEmphasis">6</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      with the <span class="docEmphasis">–i</span> option creates an integer
      variable <span class="docEmphasis">num.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Trying to assign the string <span class="docEmphasis">
      hello</span> to the integer variable <span class="docEmphasis">num</span>
      causes an error.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The whitespace must be quoted or removed unless the ((
      )) operators are used (see &quot;Arithmetic Operators and the let Command&quot; on
      page 511).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The whitespace is removed and arithmetic is performed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Multiplication is performed and the result assigned to
      <span class="docEmphasis">num.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The whitespace is quoted so that the multiplication can
      be performed and to keep the shell from expanding the wildcard (*).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Since the variable is set to integer, the fractional
      part of the number is truncated.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Using Different Bases.</b> Numbers can be represented in
decimal (base 10), octal (base 8), and so forth, by using the
<span class="docEmphasis">typeset</span> command and with the
<span class="docEmphasis">–i</span> option and the base number.<span id="ENB10-6"><a class="docLink" href="#EN10-6"><sup>[6]</sup></a></span>
</p>

<h5 id="ch10list77" class="docExampleTitle">Example 10.77 </h5>
<pre>1   $ <span class="docEmphStrong">num=15</span>
2   $ <span class="docEmphStrong">typeset –i2 num</span>    <span class="docEmphasis">#</span> <span class="docEmphasis">binary</span>
    $ <span class="docEmphStrong">print $num</span>
    <span class="docEmphasis">2#1111</span>

3   $ <span class="docEmphStrong">typeset –i8</span> <span class="docEmphStrong">num</span>    <span class="docEmphasis">#</span> <span class="docEmphasis">octal</span>
    $ <span class="docEmphStrong">print $num</span>
    <span class="docEmphasis">8#17</span>

4   $ <span class="docEmphStrong">typeset –i16</span> <span class="docEmphStrong">num</span>   <span class="docEmphasis">#</span> <span class="docEmphasis">hex</span>
    $ <span class="docEmphStrong">print $num</span>
    <span class="docEmphasis">16#f</span>

5   $ <span class="docEmphStrong">read number</span>
    <span class="docEmphasis">2#1101</span>
    $ <span class="docEmphStrong">print $number</span>
    <span class="docEmphasis">2#1101</span>

6   $ <span class="docEmphStrong">typeset –i number</span>
    $ <span class="docEmphStrong">print $number</span>
    <span class="docEmphasis">2#1101</span>

7   $ <span class="docEmphStrong">typeset –i10 number</span>   <span class="docEmphasis">#</span> <span class="docEmphasis">decimal</span>
    $ <span class="docEmphStrong">print $number</span>
    <span class="docEmphasis">13</span>

8   $ <span class="docEmphStrong">typeset –i8 number</span>    <span class="docEmphasis">#</span> <span class="docEmphasis">octal</span>
    $ <span class="docEmphStrong">print $number</span>
    <span class="docEmphasis">8#15</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">num</span> is
      assigned the value <span class="docEmphasis">15.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      converts the number to a binary format. The display is the base of the
      number (<span class="docEmphasis">2</span>), followed by a pound sign (<span class="docEmphasis">#</span>),
      and the value of the number in binary.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      converts the number to an octal format and displays the value of the
      number in base <span class="docEmphasis">8.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      converts the number to hexadecimal format and displays the value of the
      number in base <span class="docEmphasis">16.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command
      accepts input from the user. The input is entered in binary format, stored
      in the variable <span class="docEmphasis">number,</span> and displayed in
      binary format.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      converts <span class="docEmphasis">number</span> to an integer. It still
      displays in binary format.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      converts <span class="docEmphasis">number</span> to a decimal integer and
      displays it.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      converts <span class="docEmphasis">number</span> to octal and displays its
      value in base <span class="docEmphasis">8.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Listing Integers.</b> The <span class="docEmphasis">
typeset</span> command with only the <span class="docEmphasis">–i</span>
argument will list all preset integers and their values, as shown in the
following display.</p>
<pre>$ <span class="docEmphStrong">typeset –i</span>
<span class="docEmphasis">ERRNO=2</span>
<span class="docEmphasis">LINENO=1</span>
<span class="docEmphasis">MAILCHECK=600</span>
<span class="docEmphasis">OPTIND=1</span>
<span class="docEmphasis">PPID=4881</span>
<span class="docEmphasis">RANDOM=25022</span>
<span class="docEmphasis">SECONDS=47366</span>
<span class="docEmphasis">TMOUT=0</span>
<span class="docEmphasis">n=5</span>
<span class="docEmphasis">number=#15</span>
</pre>
<p class="docText"><span class="docEmphStrong">Arithmetic Operators and the
<span class="docEmphasis">let</span> Command.</span> The
<span class="docEmphasis">let</span> command is a Korn shell built-in command
that is used to perform integer arithmetic. This replaces the Bourne shell
integer testing. The alternative and preferred way to use the
<span class="docEmphasis">let</span> command is with the
<span class="docEmphasis">(( ))</span> operator.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table23" class="docTableTitle">Table 10.23. <span class="docEmphasis">let</span>
  Operators</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Operator</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Meaning</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">– </td>
    <td class="docTableCell" vAlign="top">Unary minus. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">! </td>
    <td class="docTableCell" vAlign="top">Logical <span class="docEmphasis">not.</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">~ </td>
    <td class="docTableCell" vAlign="top">Bitwise <span class="docEmphasis">not.</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">* / % </td>
    <td class="docTableCell" vAlign="top">Multiply, divide, remainder. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">+ – </td>
    <td class="docTableCell" vAlign="top">Add, subtract. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">&lt;&lt; &gt;&gt; </td>
    <td class="docTableCell" vAlign="top">Bitwise left shift, right shift. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">&lt;= &gt;= &lt; &gt; == != </td>
    <td class="docTableCell" vAlign="top">Comparison operators. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">&amp; ^ | </td>
    <td class="docTableCell" vAlign="top">Bitwise <span class="docEmphasis">and;</span>
    exclusive <span class="docEmphasis">or.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">&amp;&amp; || ! </td>
    <td class="docTableCell" vAlign="top">Logical <span class="docEmphasis">and;</span>
    logical <span class="docEmphasis">or;</span> unary <span class="docEmphasis">
    not.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">= </td>
    <td class="docTableCell" vAlign="top">Assignment. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">*= /= %= += –= &lt;&lt;= &gt;&gt;= &amp;= ^= |= </td>
    <td class="docTableCell" vAlign="top">Shortcut assignment. </td>
  </tr>
</table>

<div class="docNote">
  <p class="docNoteTitle">Note</p>
  <p class="docText">The ++ and – – operators are supported on versions of
  <span class="docEmphasis">ksh</span> that are newer than 1988.</div>
<h5 id="ch10list78" class="docExampleTitle">Example 10.78 </h5>
<pre>1   $ <span class="docEmphStrong">i=5</span>

2   $ <span class="docEmphStrong">let i=i+1</span>
    $ <span class="docEmphStrong">print $i</span>
    <span class="docEmphasis">6</span>

3   $ <span class="docEmphStrong">let &quot;i = i + 2&quot;</span>
    $ <span class="docEmphStrong">print $i</span>
    <span class="docEmphasis">8</span>

4   $ <span class="docEmphStrong">let &quot;i+=1&quot;</span>
    $ <span class="docEmphStrong">print $i</span>
    <span class="docEmphasis">9</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">i</span> is
      assigned the value <span class="docEmphasis">5.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">let</span> command will
      add <span class="docEmphasis">1</span> to the value of
      <span class="docEmphasis">i.</span> The <span class="docEmphasis">$</span>
      (dollar sign) is not required for variable substitution when performing
      arithmetic.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The quotes are needed if the arguments contain
      whitespace.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The shortcut operator, <span class="docEmphasis">+=,</span>
      is used to add <span class="docEmphasis">1</span> to the value of
      <span class="docEmphasis">i.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list79" class="docExampleTitle">Example 10.79 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">(( i = 9 ))</span>

2   $ <span class="docEmphStrong">(( i = i * 6 ))</span>
    $ <span class="docEmphStrong">print $i</span>
    <span class="docEmphasis">54</span>

3   $ <span class="docEmphStrong">(( i &gt; 0 &amp;&amp; i &lt;= 10 ))</span>

4   $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">1</span>
    $ <span class="docEmphStrong">j=100</span>

5   $ <span class="docEmphStrong">(( i &lt; j || i == 5 ))</span>

6   $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">0</span>

7   $ <span class="docEmphStrong">if (( i &lt; j &amp;&amp; i == 54 ))</span>
    <span class="docEmphStrong">&gt; then</span>
    <span class="docEmphStrong">&gt; print True</span>
    <span class="docEmphStrong">&gt;fi</span>
    <span class="docEmphasis">True</span>
    $
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">i</span> is
      assigned the value <span class="docEmphasis">9.</span> The (<span class="docEmphasis">(
      )</span>) operators are an alternate form of the <span class="docEmphasis">
      let</span> command. Since the expression is enclosed in double
      parentheses, spaces are allowed between the operators.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">i</span> is
      assigned the product of <span class="docEmphasis">i*6.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The numeric expressions are tested. If both expressions
      are true, zero exit status is returned.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The special <span class="docEmphasis">?</span> variable
      holds the exit status of the last command (the <span class="docEmphasis">
      let</span> command) executed. Since the value is one, the command failed
      (evaluated as false).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The numeric expressions are tested. If one of the
      expressions is true, zero exit status is returned.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The special <span class="docEmphasis">?</span> variable
      holds the exit status of the last command (the <span class="docEmphasis">
      let</span> command) executed. Since the value is zero, the command
      succeeded (evaluated as true).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">if</span> conditional
      command precedes the <span class="docEmphasis">let</span> command. The
      secondary prompt appears while waiting for the command to be completed. If
      the exit status is zero, the commands after the <span class="docEmphasis">
      then</span> statement are executed; otherwise, the primary prompt returns.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec26">10.2.4 Positional Parameters and Command Line
Arguments</h4>
<p class="docText">Command line arguments can be referenced in scripts with
positional parameters; for example, $1 is set to the first argument, $2 to the
second argument, and $3 to the third argument. Positional parameters can be
reset with the <span class="docEmphasis">set</span> command. See
<a class="docLink" href="#ch10table24">Table 10.24</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table24" class="docTableTitle">Table 10.24. Positional Parameters</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Variable</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$0</span>
    </td>
    <td class="docTableCell" vAlign="top">References the name of the script.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$#</span>
    </td>
    <td class="docTableCell" vAlign="top">Holds the value of the number of
    positional parameters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$*</span>
    </td>
    <td class="docTableCell" vAlign="top">Contains a list of all the positional
    parameters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">$@</span>
    </td>
    <td class="docTableCell" vAlign="top">Means the same as $*, except when
    enclosed in double quotes. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&quot;$*&quot;</span>
    </td>
    <td class="docTableCell" vAlign="top">Expands to a single argument, e.g.,
    <span class="docEmphasis">&quot;$1 $2 $3&quot;.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&quot;$@&quot;</span>
    </td>
    <td class="docTableCell" vAlign="top">Expands to separate arguments, e.g.,
    <span class="docEmphasis">&quot;$1&quot;</span> <span class="docEmphasis">&quot;$2&quot;</span>
    <span class="docEmphasis">&quot;$3&quot;.</span> </td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">set</span>
Command and Positional Parameters.</span> The <span class="docEmphasis">set</span>
command sets the positional parameters. If the positional parameters have
already been set, the <span class="docEmphasis">set</span> command will reset
them, removing any values in the old list. To unset all of the positional
parameters, use <span class="docEmphasis">set – –.</span></p>
<h5 id="ch10list80" class="docExampleTitle">Example 10.80 </h5>
<pre>    (The Script)
    $ cat args
    #!/bin/ksh
    <span class="docEmphasis"># Script to test command line arguments</span>
1   print The name of this script is <span class="docEmphStrong">$0.</span>
2   print The arguments are <span class="docEmphStrong">$*.</span>
3   print The first argument is <span class="docEmphStrong">$1.</span>
4   print The second argument is <span class="docEmphStrong">$2.</span>
5   print The number of arguments is <span class="docEmphStrong">$#.</span>
6   <span class="docEmphStrong">oldparameters=$*</span>
7   <span class="docEmphStrong">set Jake Nicky Scott</span>
8   print All the positional parameters are <span class="docEmphStrong">$*.</span>
9   print The number of positional parameters is <span class="docEmphStrong">$#.</span>
10  <span class="docEmphStrong">print $oldparameters</span>
11  <span class="docEmphStrong">set --</span>
12  print Good–bye for now, <span class="docEmphStrong">$1.</span>
13  <span class="docEmphStrong">set $oldparameters</span>
14  print $*

    (The Output)
    $ <span class="docEmphStrong">args a b c d</span>
1   <span class="docEmphasis">The name of this script is</span> <span class="docEmphBoldItalic">args.</span>
2   <span class="docEmphasis">The arguments are</span> <span class="docEmphBoldItalic">a b c d.</span>
3   <span class="docEmphasis">The first argument is</span> <span class="docEmphBoldItalic">a.</span>
4   <span class="docEmphasis">The second argument is</span> <span class="docEmphBoldItalic">b.</span>
5   <span class="docEmphasis">The number of arguments is</span> <span class="docEmphBoldItalic">4.</span>
8   <span class="docEmphasis">All the positional parameters are</span> <span class="docEmphBoldItalic">Jake Nicky Scott.</span>
9   <span class="docEmphasis">The number of positional parameters is</span> <span class="docEmphBoldItalic">3.</span>
10  <span class="docEmphasis">a b c d</span>
12  <span class="docEmphasis">Good-bye for now ,.</span>
14  <span class="docEmphasis">a b c d</span>
    $
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The name of the script is stored in the
      <span class="docEmphasis">$0</span> variable.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$*</span> (and
      <span class="docEmphasis">$@</span>) both represent all of the positional
      parameters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$1</span> represents the
      first positional parameter (command line argument).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$2</span> represents the
      second positional parameter.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$#</span> is the total number
      of positional parameters (command line arguments).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">oldparameters</span>
      is assigned all of the positional parameters (<span class="docEmphasis">$*</span>).
      Later on, if you want to get back your original parameters, you can do so
      by typing <span class="docEmphasis">set $oldparameters.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Reset positional parameters with the
      <span class="docEmphasis">set</span> command. The
      <span class="docEmphasis">set</span> command completely clears all
      previously set parameters. <span class="docEmphasis">Jake</span> is
      assigned to <span class="docEmphasis">$1,</span> <span class="docEmphasis">
      Nicky</span> is assigned to <span class="docEmphasis">$2,</span> and
      <span class="docEmphasis">Scott</span> is assigned to
      <span class="docEmphasis">$3.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The new positional parameters are printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The number of positional parameters is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The original parameters were stored in the variable
      <span class="docEmphasis">oldparameters.</span> They are printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All parameters are unassigned.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$1</span> has no value. The
      parameters list was cleared with the <span class="docEmphasis">set – –</span>
      command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A new parameter list is assigned by substituting the
      values in <span class="docEmphasis">oldparameters</span> to the parameter
      list with the <span class="docEmphasis">set</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All the positional parameters are printed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list81" class="docExampleTitle">Example 10.81 </h5>
<pre>(How $* and $@ Differ)
1   $ <span class="docEmphStrong">set 'apple pie' pears peaches</span>
2   $ <span class="docEmphStrong">for i in $*</span>
    &gt; <span class="docEmphStrong">do</span>
    &gt; <span class="docEmphStrong">echo $i</span>
    &gt; <span class="docEmphStrong">done</span>
    <span class="docEmphasis">apple</span>
    <span class="docEmphasis">pie</span>
    <span class="docEmphasis">pears</span>
    <span class="docEmphasis">peaches</span>

3   $ <span class="docEmphStrong">set 'apple pie' pears peaches</span>
4   $ <span class="docEmphStrong">for i in &quot;$*&quot;</span>
    &gt; <span class="docEmphStrong">do</span>
    &gt; <span class="docEmphStrong">echo $i</span>
    &gt; <span class="docEmphStrong">done</span>
    <span class="docEmphasis">apple pie pears peaches</span>

5   $ <span class="docEmphStrong">set 'apple pie' pears peaches</span>
6   $ <span class="docEmphStrong">for i in $@</span>
    &gt; <span class="docEmphStrong">do</span>
    &gt; <span class="docEmphStrong">echo $i</span>
    &gt; <span class="docEmphStrong">done</span>
    <span class="docEmphasis">apple</span>
    <span class="docEmphasis">pie</span>
    <span class="docEmphasis">pears</span>
    <span class="docEmphasis">peaches</span>

7   $ <span class="docEmphStrong">set 'apple pie' pears peaches</span>
8   $ <span class="docEmphStrong">for i in &quot;$@&quot;</span>            <span class="docEmphasis"># At last!!</span>
    &gt; <span class="docEmphStrong">do</span>
    &gt; <span class="docEmphStrong">echo $i</span>
    &gt; <span class="docEmphStrong">done</span>
    <span class="docEmphasis">apple pie</span>
    <span class="docEmphasis">pears</span>
    <span class="docEmphasis">peaches</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The positional parameters are set. When the
      <span class="docEmphasis">$*</span> is expanded, the quotes are stripped
      and <span class="docEmphasis">apple pie</span> becomes two separate words.
      The <span class="docEmphasis">for</span> loop assigns each of the words,
      in turn, to the variable <span class="docEmphasis">i</span> and then
      prints the value of <span class="docEmphasis">i.</span> Each time through
      the loop, the word on the left is shifted off, and the next word is
      assigned to <span class="docEmphasis">i.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If <span class="docEmphasis">$*</span> is surrounded by
      double quotes, all of the words in the list become one single string, and
      the whole string is assigned to the variable <span class="docEmphasis">i.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The positional parameters are set.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">By enclosing <span class="docEmphasis">$*</span> in
      double quotes, the entire parameter list becomes one string.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The positional parameters are set.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Unquoted, the <span class="docEmphasis">$@</span>
      behaves the same way as the <span class="docEmphasis">$*.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The positional parameters are set.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">By surrounding <span class="docEmphasis">$@</span> with
      double quotes, each of the positional parameters is treated as a quoted
      string. The list would consist of <span class="docEmphasis">&quot;apple pie,&quot;</span>
      <span class="docEmphasis">&quot;pears,&quot;</span> and <span class="docEmphasis">
      &quot;peaches.&quot;</span> Each of the quoted words is assigned to
      <span class="docEmphasis">i,</span> in turn, as the loop goes through each
      iteration.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec27">10.2.5 Testing Exit Status and the
<span class="docEmphasis">$?</span> Variable</h4>
<p class="docText">The ? variable contains a number value (between 0 and 255)
representing the exit status of the last command that exited. If the exit status
is zero, the command exited with success; if nonzero, the command failed in some
way. You can test the exit status of commands and use the
<span class="docEmphasis">test</span> command to test the exit status of
expressions.</p>
<p class="docText">The following examples illustrate how the exit status is
tested. The single brackets are used in the Bourne shell, and although perfectly
acceptable in the Korn shell, Dr. Korn provides you with the new double-bracket
notation for testing expressions.</p>
<h5 id="ch10list82" class="docExampleTitle">Example 10.82 </h5>
<pre>    (The Command Line)
1   $ <span class="docEmphStrong">name=Tom</span>
2   $ <span class="docEmphStrong">grep &quot;$name&quot; datafile</span>
    <span class="docEmphasis">Tom Savage:408-124-2345</span>
3   $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">0</span>                         <span class="docEmphasis">#</span> <span class="docEmphasis">Success!</span>

4   $ <span class="docEmphStrong">test $name = Tom</span>

5   $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">0                         #</span> <span class="docEmphasis">Success</span>

6   $ <span class="docEmphStrong">test $name != Tom</span>
    $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">1</span>                         <span class="docEmphasis">#</span> <span class="docEmphasis">Failure</span>

7   $ [ $name = Tom ]         <span class="docEmphasis">#</span> <span class="docEmphasis">Brackets instead of the test command</span>
8   $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">0</span>

9   $ <span class="docEmphStrong">[[ $name = [Tt]?m ]]</span>    <span class="docEmphasis">#</span> <span class="docEmphasis">New ksh test command</span>
10  $ <span class="docEmphStrong">print $?</span>
    <span class="docEmphasis">0</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The string <span class="docEmphasis">Tom</span> is
      assigned to the variable <span class="docEmphasis">name.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">grep</span> command will
      search for string <span class="docEmphasis">Tom</span> in the
      <span class="docEmphasis">datafile,</span> and if successful in its
      search, will display the line found.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">?</span> variable,
      accessed by <span class="docEmphasis">$?,</span> contains the exit status
      of the last command executed, in this case, the exit status of
      <span class="docEmphasis">grep.</span> If <span class="docEmphasis">grep</span>
      is successful in finding the string <span class="docEmphasis">Tom,</span>
      it will return an exit status of zero. The <span class="docEmphasis">grep</span>
      command was successful.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">test</span> command is
      used to evaluate strings and numbers, and to perform file testing. It
      returns an exit status of zero if the expression is true, and an exit
      status of one if the expression fails. There must be spaces surrounding
      the equal sign.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of <span class="docEmphasis">name</span> is
      tested to see if it is equal to <span class="docEmphasis">Tom.</span> The
      <span class="docEmphasis">test</span> command returns an exit status of
      <span class="docEmphasis">0,</span> meaning that <span class="docEmphasis">
      $name</span> does evaluate to <span class="docEmphasis">Tom.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of <span class="docEmphasis">name</span> is
      tested to see if it is equal to <span class="docEmphasis">Tom.</span> The
      <span class="docEmphasis">test</span> command returns an exit status of
      <span class="docEmphasis">1,</span> meaning that <span class="docEmphasis">
      name</span> is not equal to <span class="docEmphasis">Tom.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The brackets are an alternate notation for the
      <span class="docEmphasis">test</span> command. There must be spaces after
      the first bracket. The expression is tested to see if
      <span class="docEmphasis">$name</span> evaluates to the string
      <span class="docEmphasis">Tom.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The exit status of the test is zero. The test was
      successful because <span class="docEmphasis">$name</span> is equal to
      <span class="docEmphasis">Tom.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The new Korn shell <span class="docEmphasis">test</span>
      command, <span class="docEmphasis">[[,</span> is used. The new
      <span class="docEmphasis">test</span> allows shell metacharacter
      expansion. If the variable matches <span class="docEmphasis">Tom, tom,
      Tim, tim,</span> and so on, the test will return a successful status,
      zero.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">name</span> did
      match a string beginning with <span class="docEmphasis">T</span> or
      <span class="docEmphasis">t</span> and ending in <span class="docEmphasis">
      m,</span> resulting in a successful exit status (<span class="docEmphasis">$?</span>)
      of <span class="docEmphasis">0.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec28">10.2.6 Conditional Constructs and Flow Control</h4>
<p class="docText">Conditional commands allow you to perform some task(s) based
on whether or not a condition succeeds or fails. The <span class="docEmphasis">
if</span> command is the simplest form of decision making. The
<span class="docEmphasis">if/else</span> commands allow a two-way decision
construct, and the <span class="docEmphasis">if/elif/else</span> commands allow
a multiway decision construct.</p>
<p class="docText">The Korn shell expects a command to follow an
<span class="docEmphasis">if.</span> The command can be a system command or a
built-in command. The exit status of the command is used to evaluate the
condition. To evaluate an expression, the built-in <span class="docEmphasis">
test</span> command is used. This command is also linked to the
<span class="docEmphasis">[</span> and the <span class="docEmphasis">[[</span>
symbols. The Bourne shell encloses an expression in a set of single brackets:
<span class="docEmphasis">[</span> and <span class="docEmphasis">].</span> The
Korn shell has a more sophisticated method for testing expressions. The
expression is enclosed in double brackets: <span class="docEmphasis">[[</span>
and <span class="docEmphasis">]].</span> In the single brackets, the expansion
of wildcards is not allowed; with the double brackets (Korn shell only),
wildcard expansion is supported and a new set of operators have been added. The
result of a command is tested, with zero status indicating success, and nonzero
status indicating failure.</p>
<p class="docText"><span class="docEmphStrong">The Old <span class="docEmphasis">
test</span> Command.</span> The <span class="docEmphasis">test</span> command is
used to evaluate conditional expressions, returning true or false. It returns
zero exit status for true, and nonzero exit status for false. Either the
<span class="docEmphasis">test</span> command or the brackets can be used. The
Korn shell introduced a new way of testing expressions with double brackets. For
backward-compatibility with the Bourne shell, the older form of
<span class="docEmphasis">test</span> can be used with either the
<span class="docEmphasis">test</span> command or the single brackets. However,
the preferred method for Korn shell programmers is the new
<span class="docEmphasis">test</span> with double brackets. A complete list to
test operators (both old and new style) are listed in
<a class="docLink" href="#ch10table25">Table 10.25</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table25" class="docTableTitle">Table 10.25. Testing and Logical Operators</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">test</span>
    </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Tests For</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">String Testing:</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string1 =
    string2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string1</span>
    is equal to <span class="docEmphasis">string2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string1 !=
    string2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string1</span>
    is not equal to <span class="docEmphasis">string2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string</span>
    is not null. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–z string</span>
    </td>
    <td class="docTableCell" vAlign="top">length of <span class="docEmphasis">
    string</span> is zero. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–n string</span>
    </td>
    <td class="docTableCell" vAlign="top">length of <span class="docEmphasis">
    string</span> is nonzero. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">
    <p class="docText"><span class="docEmphUl">Examples:</span></p>
    <p class="docText"><span class="docEmphasis">test –n $word</span>
    <span class="docEmphasis">or</span> [ <span class="docEmphasis">–n $word</span>
    ]</p>
    <p class="docText"><span class="docEmphasis">test tom = sue</span>
    <span class="docEmphasis">or</span> [ <span class="docEmphasis">tom = sue</span>
    ]</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Integer Testing (Old-Style test Used with
    Bourne Shell):</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1 –eq
    int2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1</span>
    is equal to <span class="docEmphasis">int2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1 –ne
    int2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1</span>
    is not equal to <span class="docEmphasis">int2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1 –gt
    int2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1</span>
    is greater than <span class="docEmphasis">int2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1 –ge
    int2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1</span>
    is greater than or equal to <span class="docEmphasis">int2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1 –lt
    int2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1</span>
    is less than <span class="docEmphasis">int2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1 –le
    int2</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">int1</span>
    is less than or equal to <span class="docEmphasis">int2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Logical Operators (Old-Style test):</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">!</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Not</span>
    operator. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–a</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">And</span>
    operator. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–o</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Or</span>
    operator. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">File Testing (Old-Style test):</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–b filename</span>
    </td>
    <td class="docTableCell" vAlign="top">Block special file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–c filename</span>
    </td>
    <td class="docTableCell" vAlign="top">Character special file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–d filename</span>
    </td>
    <td class="docTableCell" vAlign="top">Directory existence. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–f filename</span>
    </td>
    <td class="docTableCell" vAlign="top">File existence and not a directory.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–g filename</span>
    </td>
    <td class="docTableCell" vAlign="top">Set-group-ID is set. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–h filename</span>
    </td>
    <td class="docTableCell" vAlign="top">Symbolic link. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–k filename</span>
    </td>
    <td class="docTableCell" vAlign="top">Sticky bit is set. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–p filename</span>
    </td>
    <td class="docTableCell" vAlign="top">File is a named pipe. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–r filename</span>
    </td>
    <td class="docTableCell" vAlign="top">File is readable. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–s filename</span>
    </td>
    <td class="docTableCell" vAlign="top">File is nonzero size. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–u filename</span>
    </td>
    <td class="docTableCell" vAlign="top">Set-user-ID bit is set. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–w filename</span>
    </td>
    <td class="docTableCell" vAlign="top">File is writeable. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–x filename</span>
    </td>
    <td class="docTableCell" vAlign="top">File is executable. </td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The New <span class="docEmphasis">
test</span> Command.</span> With the <span class="docEmphasis">[[…]]</span>
compound <span class="docEmphasis">test</span> command, additional operators are
available. Wildcards can be used in string-matching tests, and many of the
errors from the old <span class="docEmphasis">test</span> have been eliminated.
New <span class="docEmphasis">string</span> <span class="docEmphasis">test</span>
operators are listed in <a class="docLink" href="#ch10table26">Table 10.26</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table26" class="docTableTitle">Table 10.26. String Testing (New-Style Test)</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    String Testing Operator</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Tests For</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string =
    pattern</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string</span>
    matches <span class="docEmphasis">pattern.</span><sup class="docFootnote"><a class="docLink" href="#ch10tabfn01">[a]</a></sup>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string !=
    pattern</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string</span>
    does not match <span class="docEmphasis">pattern.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string1 &lt;
    string2</span> </td>
    <td class="docTableCell" vAlign="top">ASCII value of
    <span class="docEmphasis">string1</span> is less than
    <span class="docEmphasis">string2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string1 &gt;
    string2</span> </td>
    <td class="docTableCell" vAlign="top">ASCII value of
    <span class="docEmphasis">string1</span> is greater than
    <span class="docEmphasis">string2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–z string</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string</span>
    is zero in length, null parameter. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–n string</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">string</span>
    is nonzero in length, nonnull parameter. </td>
  </tr>
</table>

<blockquote>
  <p class="docFootnote"><sup><a name="ch10tabfn01">[a]</a></sup> On versions
  newer than 1988, the == operator is permitted.</p>
</blockquote>
<h5 id="ch10list83" class="docExampleTitle">Example 10.83 </h5>
<pre>(The Script)
    read answer
1   <span class="docEmphStrong">if [[ $answer = [Yy]* ]]</span>     <span class="docEmphasis"># Test for Yes or yes or Y or y,</span> <span class="docEmphasis">etc.</span>
    then<span class="docEmphasis">...</span>

    <span class="docEmphStrong">Example:</span>
    (The Script)
    guess=Noone
2   <span class="docEmphStrong">if [[ $guess != [Nn]o@(one|body) ]]</span>        <span class="docEmphasis"># Test for Noone, noone</span>
    then. . .                                  <span class="docEmphasis"># or Nobody, nobody...</span>

    <span class="docEmphStrong">Example:</span>
    (The Command Line)
3   <span class="docEmphStrong">[[ apples &lt; oranges ]]</span>
    print $?
    <span class="docEmphasis">0</span>
4   <span class="docEmphStrong">[[ apples &gt; oranges ]]</span>
    print $?
    <span class="docEmphasis">1</span>
5   $ <span class="docEmphStrong">name=&quot;Joe Shmoe&quot;</span>
    $ <span class="docEmphStrong">[ $name = &quot;Abe Lincoln&quot; ]</span>            <span class="docEmphasis"># old style</span>
    <span class="docEmphasis">ksh: Shmoe: unknown test operator</span>

6   $ <span class="docEmphStrong">[[ $name = &quot;Abe Lincoln&quot; ]]</span>          <span class="docEmphasis"># new style</span>
    $ echo $?
    <span class="docEmphasis">1</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">answer</span> read in
      from the user is tested to see if it matches anything starting with
      <span class="docEmphasis">Y</span> or <span class="docEmphasis">y.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">guess</span> is
      tested. If it is not equal to a string starting with
      <span class="docEmphasis">N</span> or <span class="docEmphasis">n,</span>
      followed by an <span class="docEmphasis">o,</span> and exactly
      <span class="docEmphasis">one</span> or <span class="docEmphasis">body,</span>
      for example, <span class="docEmphasis">noone</span> or
      <span class="docEmphasis">nobody,</span> the <span class="docEmphasis">
      then</span> command would be executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The string <span class="docEmphasis">apples</span> is
      tested to see if it comes before <span class="docEmphasis">oranges</span>
      in the ASCII collating sequence. It does.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The string <span class="docEmphasis">apples</span> is
      tested to see if it comes after <span class="docEmphasis">oranges</span>
      in the ASCII collating sequences. It does not.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the old-style <span class="docEmphasis">test,</span>
      the variable <span class="docEmphasis">name</span> is split into separate
      words. Since the = operator expects a single string as its left operand,
      the <span class="docEmphasis">test</span> command fails. To fix the
      problem, the variable should be enclosed in double quotes.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the new-style <span class="docEmphasis">test,</span>
      the variable is not split up into separate words; therefore, double quotes
      are not required around <span class="docEmphasis">$name.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>File Testing with Binary Operators.</b> The binary
operators for testing files require two operands (i.e., a file on either side of
the operator). See <a class="docLink" href="#ch10table27">Table 10.27</a> for a
list of binary file testing operators.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table27" class="docTableTitle">Table 10.27. Binary File Testing and Logical
  Operators</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Operators</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Tests For</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Binary File Testing</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file1 –nt
    file2</span> </td>
    <td class="docTableCell" vAlign="top">True if <span class="docEmphasis">
    file1</span> is newer than <span class="docEmphasis">file2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file1 –ot
    file2</span> </td>
    <td class="docTableCell" vAlign="top">True if <span class="docEmphasis">
    file1</span> is older than <span class="docEmphasis">file2.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file1 –ef
    file2</span> </td>
    <td class="docTableCell" vAlign="top">True if <span class="docEmphasis">
    file1</span> is another name for <span class="docEmphasis">file2.</span>
    </td>
  </tr>
</table>

<p class="docText"><b>Logical Operators.</b> The Korn shell, like C, provides
logical testing of the truth or falsity of expressions. They are listed in
<a class="docLink" href="#ch10table28">Table 10.28</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table28" class="docTableTitle">Table 10.28. Logical Operators</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Operators</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Tests For</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">&amp;&amp;</span>
    </td>
    <td class="docTableCell" vAlign="top">The <span class="docEmphasis">and</span>
    operator evaluates the expression on the left-hand side of &amp;&amp;; if true, the
    expression on the right side of &amp;&amp; is tested and must also be true. If one
    expression is false, the expression is false. The &amp;&amp; operator replaces
    <span class="docEmphasis">–a;</span> e.g., (( ( $x &amp;&amp; $y ) &gt; 5 )). </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">||</span>
    </td>
    <td class="docTableCell" vAlign="top">The <span class="docEmphasis">or</span>
    operator evaluates the expression on the left-hand side of the || operator;
    if true, the expression is true; if false, the expression on the right-hand
    side of the || is evaluated; if true, the expression is true. Only if both
    expressions are false will the expression evaluate to false. The || operator
    replaces <span class="docEmphasis">–o;</span> e.g., (( ( $x || $y ). </td>
  </tr>
</table>

<p class="docText"><b>File Testing.</b> The Korn shell provides a number of
built-in test commands for checking the attributes of files, such as existence,
type, permissions, etc. The file testing options (also called
<span class="docEmphasis">flags</span>) are listed in
<a class="docLink" href="#ch10table29">Table 10.29</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table29" class="docTableTitle">Table 10.29. File Testing (New
  <span class="docEmphasis">test</span> Flags)</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">test
    Flag</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Tests For</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Korn Shell Only:</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–a file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–e file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists (versions newer than 1988). </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–L file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is a symbolic link. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–O file</span>
    </td>
    <td class="docTableCell" vAlign="top">You are the owner of
    <span class="docEmphasis">file.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–G file</span>
    </td>
    <td class="docTableCell" vAlign="top">Your group ID is the same as
    <span class="docEmphasis">file</span>'s. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–S file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is a socket. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Bourne and Korn Shells:</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–r file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is readable. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–w fle</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is writeable. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–x file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is executable. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–f file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is not a directory. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–d file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is a directory. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–b file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is a block special file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–c file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is a character special file. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–p file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is a named pipe. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–u file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is setuid. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–g file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and is setgid. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–k file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    exists and sticky bit is set. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–s file</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">file</span>
    has a nonzero size. </td>
  </tr>
</table>

<h5 id="ch10list84" class="docExampleTitle">Example 10.84 </h5>
<pre>    (The Script)
1   file=/etc/passwd
2   <span class="docEmphStrong">if [[ -f $file &amp;&amp; (–r $file || –w $file) ]]</span>
    then
3     print $file is a plain file and is either readable or writeable
    fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">file</span> is
      assigned <span class="docEmphasis">/etc/passwd.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The file test operators test if the file is a plain
      file and is either readable or writeable. The parentheses are used for
      grouping. In the old <span class="docEmphasis">test,</span> the
      parentheses had to be escaped with a backslash.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If both of the tests are true, the file is a plain
      file, and it is either readable or writeable, this line is executed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">if</span>
Command.</span> The simplest form of conditional is the
<span class="docEmphasis">if</span> command. The command following the
<span class="docEmphasis">if</span> keyword is executed and its exit status is
returned. If the exit status is zero, the command succeeded and the statement(s)
after the <span class="docEmphasis">then</span> keyword are executed.</p>
<p class="docText">In the C shell and C language, the expression following the
<span class="docEmphasis">if</span> command is a Boolean-type expression. But in
the Bourne and Korn shells, the statement following the
<span class="docEmphasis">if</span> is a command or group of commands. The exit
status of the last command of the <span class="docEmphasis">if</span> line is
used to determine whether or not to continue and execute commands under the
<span class="docEmphasis">then</span> statement. If the exit status of the last
command on the <span class="docEmphasis">if</span> line is zero, the commands
under the <span class="docEmphasis">then</span> statement are executed. The
<span class="docEmphasis">fi</span> terminates the command list to be executed
after the <span class="docEmphasis">then.</span> If the exit status is nonzero,
meaning that the command failed in some way, the statement(s) after the
<span class="docEmphasis">then</span> statement are ignored and control goes to
the line directly after the <span class="docEmphasis">fi</span> statement.</p>
<p class="docText">Conditional commands can be nested. Every
<span class="docEmphasis">if</span> must have a corresponding
<span class="docEmphasis">fi.</span> The <span class="docEmphasis">fi</span> is
paired with the closest <span class="docEmphasis">if.</span> Using indentation
to format your <span class="docEmphasis">if</span> blocks helps when debugging
your programs.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>if command
then     <span class="docEmphasis"># Testing command exit status</span>
    command
    command
fi
------------------------------------

if test expression
then     <span class="docEmphasis"># Using the test command to test expressions</span>
    command
fi

            <span class="docEmphasis">or</span>

if [ expression ]
then                  <span class="docEmphasis"># Using the old-style test command--</span>
    command           <span class="docEmphasis"># brackets replace the word test</span>
fi
----------------------------------

if [[ expression ]]
then                  <span class="docEmphasis"># New-style brackets for testing expressions</span>
    command
fi
----------------------------------------------
if command
then
...
    if command
    then
    ...
        if command         <span class="docEmphasis"># Nested conditionals</span>
        then
        ...
        fi
    fi
fi
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list85" class="docExampleTitle">Example 10.85 </h5>
<pre>1   <span class="docEmphStrong">if ypmatch $name passwd &gt; /dev/null 2&gt;&amp;1</span>
2   <span class="docEmphStrong">then</span>
          echo Found $name!
3   fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ypmatch</span> command is
      an NIS command that searches for its argument, <span class="docEmphasis">
      name,</span> in the NIS <span class="docEmphasis">passwd</span> database
      on the server machine. Standard output and standard error are redirected
      to <span class="docEmphasis">/dev/null,</span> the UNIX bit bucket.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the exit status of the <span class="docEmphasis">
      ypmatch</span> command is zero, the program goes to the
      <span class="docEmphasis">then</span> statement and executes commands
      until <span class="docEmphasis">fi</span> is reached.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fi</span> terminates the
      list of commands following the <span class="docEmphasis">then</span>
      statement.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">Using the Old-Style Bourne
<span class="docEmphasis">test</span>.</span> If you have been programming in
the Bourne shell, the Korn shell is backward-compatible, allowing your Bourne
shell scripts to be executed properly by the Korn shell. Many Bourne shell
programmers, when converting to Korn shell, still use the old-style
<span class="docEmphasis">test</span> command when evaluating expressions. If
you are reading or maintaining scripts, you may find the old syntax alive and
well. Therefore, a brief discussion of the old syntax may help you, even if you
are writing your own scripts with the new Korn shell <span class="docEmphasis">
test</span> command.</p>
<h5 id="ch10list86" class="docExampleTitle">Example 10.86 </h5>
<pre>    #!/bin/ksh
    <span class="docEmphasis">#</span> <span class="docEmphasis">Scriptname: are_you_ok</span>
1   print &quot;Are you ok (y/n) ?&quot;
    read answer
2   <span class="docEmphStrong">if [ &quot;$answer&quot; = Y -o &quot;$answer&quot; = y ]</span>     <span class="docEmphasis"># Old-style test</span>
    then
       print &quot;Glad to hear it.&quot;
3   fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked the question,
      <span class="docEmphasis">Are you ok (y/n) ?.</span> The
      <span class="docEmphasis">read</span> command causes the program to wait
      for user input.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">test</span> command,
      represented by a [, is used to test expressions and returns an exit status
      of zero if the expression is true and nonzero if the expression is false.
      If the variable <span class="docEmphasis">answer</span> evaluates to
      <span class="docEmphasis">Y</span> or <span class="docEmphasis">y,</span>
      the commands after the <span class="docEmphasis">then</span> statement are
      executed. (The <span class="docEmphasis">test</span> command does not
      allow the use of wildcards when testing expressions.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fi</span> terminates the
      list of commands following the <span class="docEmphasis">then</span>
      statement.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">Using the New-Style Korn
<span class="docEmphasis">test</span>.</span> The new Korn shell-style testing
allows expressions to contain shell metacharacters and Korn shell operators such
as <span class="docEmphasis">&amp;&amp;</span> and <span class="docEmphasis">||.</span></p>
<h5 id="ch10list87" class="docExampleTitle">Example 10.87 </h5>
<pre>    #!/bin/ksh
    <span class="docEmphasis">#</span> <span class="docEmphasis">Scriptname: are_you_ok2</span>
1   print &quot;Are you ok (y/n) ?&quot;
    read answer
2   <span class="docEmphStrong">if [[ &quot;$answer&quot; = [Yy]* ]]</span>          <span class="docEmphasis"># New-style test</span>
    then
         print &quot;Glad to hear it.&quot;
3   fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked the question,
      <span class="docEmphasis">Are you ok (y/n) ?.</span> The
      <span class="docEmphasis">read</span> command causes the program to wait
      for user input.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">[[ ]]</span> is a special
      Korn shell construct used to test expressions. If the
      <span class="docEmphasis">answer</span> evaluates to
      <span class="docEmphasis">Y</span> or <span class="docEmphasis">y</span>
      followed by any number of characters, the commands after the
      <span class="docEmphasis">then</span> statement are executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fi</span> statement
      terminates the <span class="docEmphasis">if.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">Using the Old-Style Bourne
<span class="docEmphasis">test</span> with Numbers.</span> To test numeric
expressions, the old-style Bourne shell <span class="docEmphasis">test</span>
command and its operators are still acceptable in the Korn shell, but the
new-style <span class="docEmphasis">let</span> command is preferred.</p>
<h5 id="ch10list88" class="docExampleTitle">Example 10.88 </h5>
<pre>1   <span class="docEmphStrong">if [ $# -lt 1 ]</span>
    then
        print &quot;$0: Insufficient arguments &quot; 1&gt;&amp;2
        exit 1
2   fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docText"><span class="docEmphRoman">The statement reads</span>:
      <span class="docEmphasis">If the number of arguments is less than 1, print
      the error message and send it to standard error. Then exit the script.</span>
      The old style of testing integers is used with the
      <span class="docEmphasis">test</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fi</span> marks the end
      of the block of statements after <span class="docEmphasis">then.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">let</span>
Command and Testing Numbers.</span> Although it is still acceptable to use
single square brackets and old-style Bourne shell numeric operators for testing
numeric expressions, the preferred Korn shell method is to use the double
parentheses and the new C-language–style numeric operators when testing
<span class="docEmphasis">numeric</span> expressions. Note that the double
brackets are only used for testing <span class="docEmphasis">string</span>
expressions and for file tests (see <a class="docLink" href="#ch10table29">Table
10.29</a>).</p>
<h5 id="ch10list89" class="docExampleTitle">Example 10.89 </h5>
<pre>1   <span class="docEmphStrong">if (( $# &lt; 1 ))</span>
    then
         print &quot;$0: Insufficient arguments &quot; 1&gt;&amp;2
         exit 1
2   fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docText"><span class="docEmphRoman">The statement reads</span>:
      <span class="docEmphasis">If the number of arguments is less than 1, print
      the error message and send it to standard error. Then exit the script.</span>
      This is the preferred way to perform numeric tests in the Korn shell.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fi</span> marks the end
      of the block of statements after <span class="docEmphasis">then.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
if/else</span> Command.</span> The if<span class="docEmphasis">/else</span>
command allows a two-way decision-making process. If the command after the
<span class="docEmphasis">if</span> fails, the commands after the
<span class="docEmphasis">else</span> are executed.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>if command
then
   command(s)
else
   command(s)
fi
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list90" class="docExampleTitle">Example 10.90 </h5>
<pre>1   if ypmatch &quot;$name&quot; passwd &gt; /dev/null 2&gt;&amp;1
2   then
          print Found $name!
3   else
4       print &quot;Can't find $name.&quot;
        exit 1
5   fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ypmatch</span> command
      searches for its argument, <span class="docEmphasis">$name,</span> in the
      <span class="docEmphasis">NIS</span> <span class="docEmphasis">passwd</span>
      database. Standard output and standard error are redirected to
      <span class="docEmphasis">/dev/null,</span> the UNIX bit bucket.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the exit status of the <span class="docEmphasis">
      ypmatch</span> command is zero, program control goes to the
      <span class="docEmphasis">then</span> statement and executes commands
      until <span class="docEmphasis">else</span> is reached.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The commands under the <span class="docEmphasis">else</span>
      statement are executed if the <span class="docEmphasis">ypmatch</span>
      command fails to find <span class="docEmphasis">name</span> in the
      <span class="docEmphasis">passwd</span> database; that is, the exit status
      of <span class="docEmphasis">ypmatch</span> must be nonzero for the
      commands in the <span class="docEmphasis">else</span> block to be
      executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> function
      sends output to the screen and the program exits.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This marks the end of the <span class="docEmphasis">if</span>
      construct.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">if/elif/else</span>
Command.</span> The <span class="docEmphasis">if/elif/else</span> command allows
a multiway decision-making process. If the command following the
<span class="docEmphasis">if</span> fails, the command following the
<span class="docEmphasis">elif</span> is tested. If that command succeeds, the
commands under its <span class="docEmphasis">then</span> statement are executed.
If the command after the <span class="docEmphasis">elif</span> fails, the next
<span class="docEmphasis">elif</span> command is checked. If none of the
commands succeed, the <span class="docEmphasis">else</span> commands are
executed. The <span class="docEmphasis">else</span> block is called the default.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>if command
then
   command(s)
elif command
then
   commands(s)
elif command
then
   command(s)
else
   command(s)
fi
</pre>
    </td>
  </tr>
</table>

<p>&nbsp;</p>
<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>if [[ string expression ]]      <span class="docEmphasis">or</span>       if (( numeric expression ))
then
   command(s)
elif [[ string expression  ]]   <span class="docEmphasis">or</span>       elif (( numeric expression ))
then
   commands(s)
elif [[ string expression ]]    <span class="docEmphasis">or</span>       elif(( numeric expression ))
then
   command(s)
else
   command(s)
fi
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list91" class="docExampleTitle">Example 10.91 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis">#</span> <span class="docEmphasis">Scriptname: tellme</span>
1   read age?&quot;How old are you? &quot;
2   <span class="docEmphStrong">if (( age &lt; 0 || age &gt; 120 ))</span>
    <span class="docEmphStrong">then</span>
       print &quot;Welcome to our planet! &quot;
       exit 1
    <span class="docEmphStrong">fi</span>
3   <span class="docEmphStrong">if (( age &gt;= 0 &amp;&amp; age &lt; 13 ))</span>
    <span class="docEmphStrong">then</span>
       print &quot;A child is a garden of verses&quot;
    <span class="docEmphStrong">elif (( age &gt; 12 &amp;&amp; age &lt; 20 ))</span>
    <span class="docEmphStrong">then</span>
       print &quot;Rebel without a cause&quot;
    <span class="docEmphStrong">elif (( age &gt;= 20 &amp;&amp; age &lt; 30 ))</span>
    <span class="docEmphStrong">then</span>
       print &quot;You got the world by the tail!!&quot;
    <span class="docEmphStrong">elif (( age &gt;= 30 &amp;&amp; age &lt; 40 ))</span>
    <span class="docEmphStrong">then</span>
       print &quot;Thirty something...&quot;
4   <span class="docEmphStrong">else</span>
       print &quot;Sorry I asked&quot;
5   <span class="docEmphStrong">fi</span>

(The Output)
$ <span class="docEmphStrong">tellme</span>
<span class="docEmphasis">How old are you?</span> <span class="docEmphBoldItalic">200</span>
<span class="docEmphasis">Welcome to our planet!</span>

$ <span class="docEmphStrong">tellme</span>
<span class="docEmphasis">How old are you?</span> <span class="docEmphBoldItalic">13</span>
<span class="docEmphasis">Rebel without a cause</span>

$ <span class="docEmphStrong">tellme</span>
<span class="docEmphasis">How old are you?</span> <span class="docEmphBoldItalic">55</span>
<span class="docEmphasis">Sorry I asked</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked for input. The input is assigned to
      the variable <span class="docEmphasis">age.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A numeric test is performed within the double
      parentheses. If <span class="docEmphasis">age</span> is less than zero or
      greater than <span class="docEmphasis">120,</span> the
      <span class="docEmphasis">print</span> command is executed and the program
      terminates with an exit status of one. The interactive shell prompt will
      appear. Note that the dollar sign (<span class="docEmphasis">$</span>) is
      not required to perform variable substitution when using the
      <span class="docEmphasis">(( ))</span> operators.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A numeric test is performed within the double
      parentheses. If <span class="docEmphasis">age</span> is greater than zero
      and less than <span class="docEmphasis">13,</span> the
      <span class="docEmphasis">let</span> command returns exit status zero,
      true.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">else</span> construct is
      the default. If none of the above statements are true, the
      <span class="docEmphasis">else</span> commands will be executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fi</span> terminates the
      initial <span class="docEmphasis">if</span> statement.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
exit</span> Command.</span> The <span class="docEmphasis">exit</span> command is
used to terminate the script and get back to the command line. You may want the
script to exit if some condition does not test true. The argument to the
<span class="docEmphasis">exit</span> command is an integer, ranging from zero
to 255. When the program exits, the exit number is stored in the shell's ?
variable.</p>
<h5 id="ch10list92" class="docExampleTitle">Example 10.92 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: filecheck</span>
    <span class="docEmphasis"># Purpose: Check to see if a file exists,what type it is,</span>
    <span class="docEmphasis"># and its permissions.</span>

1   <span class="docEmphStrong">file=$1</span>      <span class="docEmphasis"># Variable is set to first command line argument</span>
2   <span class="docEmphStrong">if [[ ! -a $file ]]</span>
    then
       print &quot;$file does not exist&quot;
       exit 1
    <span class="docEmphStrong">fi</span>
3   <span class="docEmphStrong">if [[ -d $file ]]</span>
    then
       print &quot;$file is a directory&quot;
4   <span class="docEmphStrong">elif [[ -f $file ]]</span>
    then
5       <span class="docEmphStrong">if [[ -r $file &amp;&amp; -w $file &amp;&amp; -x $file ]]</span>
        then
           print &quot;You have read, write, and execute permission on
           file $file&quot;
        else
6          print &quot;You don't have the correct permissions&quot;
           exit 2
        <span class="docEmphStrong">fi</span>
    else
7       print &quot;$file is neither a file nor a directory. &quot;
        exit 3
8   <span class="docEmphStrong">fi</span>

(The Command Line)
9   $ <span class="docEmphStrong">filecheck testing</span>
    <span class="docEmphasis">testing does not exist</span>
10  $ <span class="docEmphStrong">echo $?</span>
    <span class="docEmphasis">1</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The first command line argument passed to this program
      (<span class="docEmphasis">$1</span>) is assigned to the variable
      <span class="docEmphasis">file.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">test</span> command
      follows the <span class="docEmphasis">if.</span> If
      <span class="docEmphasis">$file</span> (after variable substitution) is a
      file that does not exist (note the <span class="docEmphasis">not</span>
      operator, <span class="docEmphasis">!</span>), the commands under the
      <span class="docEmphasis">then</span> keyword are executed. An exit value
      of one means that the program failed in some way (in this case, the test
      failed).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the file is a directory, <span class="docEmphasis">
      print</span> that it is a directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the file is not a directory,
      <span class="docEmphasis">else</span> <span class="docEmphasis">if</span>
      the file is a plain file, <span class="docEmphasis">then…</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the file is readable, writeable, and executable,
      <span class="docEmphasis">then…</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">fi</span> terminates the
      innermost <span class="docEmphasis">if</span> command. The program exits
      with an argument of two if the file does not have
      <span class="docEmphasis">read, write,</span> and
      <span class="docEmphasis">execute</span> permission.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">else</span> commands are
      executed if lines 2 and 3 fail. The program exits with a value of three.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This <span class="docEmphasis">fi</span> goes with the
      <span class="docEmphasis">if</span> on line 3 in the example.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The file called <span class="docEmphasis">testing</span>
      does not exist.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">$?</span> variable holds
      the exit status, <span class="docEmphasis">one.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
null</span> Command.</span> The <span class="docEmphasis">null</span> command is
a colon. It is a built-in, do-nothing command that returns an exit status of
zero. It is used as a placeholder after an <span class="docEmphasis">if</span>
command when you have nothing to say, but need a command or the program will
produce an error message because it requires something after the
<span class="docEmphasis">then</span> statement. Often the
<span class="docEmphasis">null</span> command is used as an argument to the
<span class="docEmphasis">loop</span> command to make the loop a forever loop or
for testing variable expression modifiers such as <span class="docEmphasis">
{EDITOR:–/bin/vi}.</span></p>
<h5 id="ch10list93" class="docExampleTitle">Example 10.93 </h5>
<pre>(The Script)
1   name=Tom
2   <span class="docEmphStrong">if grep &quot;$name&quot; databasefile &gt; /dev/null 2&gt;&amp;1</span>
    then
3       <span class="docEmphStrong">:</span>
4   else
        print &quot;$1 not found in databasefile&quot;
        exit 1
    fi
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The string <span class="docEmphasis">Tom</span> is
      assigned to the variable <span class="docEmphasis">name.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">if</span> command tests
      the exit status of the <span class="docEmphasis">grep</span> command. If
      <span class="docEmphasis">Tom</span> is found in <span class="docEmphasis">
      databasefile,</span> the null command is executed and does nothing.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The colon is the <span class="docEmphasis">null</span>
      command. It always exits with a zero exit status.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">What we really want to do is print an error message and
      exit if <span class="docEmphasis">Tom</span> is not found. The commands
      after the <span class="docEmphasis">else</span> will be executed if the
      <span class="docEmphasis">grep</span> command fails.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list94" class="docExampleTitle">Example 10.94 </h5>
<pre>(The Script)
1   <span class="docEmphStrong">: ${EDITOR:=/bin/vi}</span>
2   echo $EDITOR
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The colon command takes an argument that is evaluated
      by the shell. The expression <span class="docEmphasis">${EDITOR:=/bin/vi}</span>
      is used as an argument to the colon command. If the variable
      <span class="docEmphasis">EDITOR</span> has been previously set, its value
      will not be changed; if it has not been set, the value
      <span class="docEmphasis">/bin/vi</span> will be assigned to it. The Korn
      shell would have responded with an error such as <span class="docEmphasis">
      ksh: /bin/vi: not found</span> if the colon command had not preceded the
      expression.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the <span class="docEmphasis">EDITOR</span>
      variable is displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec29">10.2.7 The <span class="docEmphasis">case</span>
Command</h4>
<p class="docText">The <span class="docEmphasis">case</span> command is a
multiway branching command used as an alternative to the
<span class="docEmphasis">if/elif</span> commands. The value of the
<span class="docEmphasis">case</span> variable is matched against
<span class="docEmphasis">value1,</span> <span class="docEmphasis">value2,</span>
and so forth until a match is found. When a value matches the
<span class="docEmphasis">case</span> variable, the commands following the value
are executed until the double semicolons are reached. Then, instruction starts
after the word <span class="docEmphasis">esac</span> (<span class="docEmphasis">case</span>
spelled backwards).</p>
<p class="docText">If a <span class="docEmphasis">case</span> variable is not
matched, the program executes commands after the <span class="docEmphasis">*)</span>
, the default value, until the double semicolons or <span class="docEmphasis">
esac</span> is reached. The <span class="docEmphasis">*)</span> value serves the
same purpose as the <span class="docEmphasis">else</span> statement in
<span class="docEmphasis">if/else</span> conditionals. The case values can use
shell wildcards and the vertical bar (pipe symbol ) for
<span class="docEmphasis">or</span>ing two values.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>case variable
value1)
    command(s);;
value2)
    command(s);;
*)
    command(s);;
esac
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list95" class="docExampleTitle">Example 10.95 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis">#</span> <span class="docEmphasis">Scriptname: xtermcolor</span>
    <span class="docEmphasis"># Sets the xterm foreground color (the color of the prompt and</span>
    <span class="docEmphasis"># input typed for interactive windows.</span>
1   read color?&quot;Choose a foreground color for your terminal?&quot;
2   <span class="docEmphStrong">case &quot;$color&quot; in</span>
3   <span class="docEmphStrong">*[Bb]l??)</span>
4       xterm -fg blue -fn terminal &amp;
5           <span class="docEmphStrong">;;</span>
6   <span class="docEmphStrong">*[Gg]reen)</span>
         xterm -fg darkgreen -fn terminal &amp;
            ;;
7   <span class="docEmphStrong">red | orange)</span>                   <span class="docEmphasis"># The vertical bar means &quot;or&quot;</span>
       xterm -fg &quot;$color&quot; -fn terminal &amp;
           ;;
8   <span class="docEmphStrong">*)  xterm -fn terminal &amp;</span>        <span class="docEmphasis"># default</span>
           ;;
9   <span class="docEmphStrong">esac</span>
10  print &quot;Out of case...&quot;
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked for input. The input is assigned to
      the variable <span class="docEmphasis">color.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command
      evaluates the expression <span class="docEmphasis">$color.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If <span class="docEmphasis">color</span> begins with a
      <span class="docEmphasis">B</span> or <span class="docEmphasis">b,</span>
      followed by the letter <span class="docEmphasis">l</span> and any two
      characters, the <span class="docEmphasis">case</span> expression matches
      the first value. The value is terminated with a single closed parenthesis.
      The wildcards are shell metacharacters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The statement is executed if the value in line 3
      matches the <span class="docEmphasis">case</span> expression.The
      <span class="docEmphasis">xterm</span> command sets the foreground color
      to blue.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The double semicolons are required after the last
      command in this block of commands. Control branches to line 10, after the
      semicolons are reached.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the <span class="docEmphasis">case</span> expression
      matches a <span class="docEmphasis">G</span> or <span class="docEmphasis">
      g,</span> followed by the letters <span class="docEmphasis">r-e-e-n,</span>
      the <span class="docEmphasis">xterm</span> window foreground color is set
      to dark green.The double semicolons terminate the block of statements and
      control branches to line 10.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The vertical bar is used as an
      <span class="docEmphasis">or</span> conditional operator. If the
      <span class="docEmphasis">case</span> expression matches either
      <span class="docEmphasis">red</span> or <span class="docEmphasis">orange,</span>
      the <span class="docEmphasis">xterm</span> command is executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This is the default value. If none of the above values
      match the <span class="docEmphasis">case</span> expression, the command(s)
      after the <span class="docEmphasis">*)</span> value are executed. The
      default color for the terminal foreground is black.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">esac</span> statement (<span class="docEmphasis">case</span>
      spelled backwards) terminates the <span class="docEmphasis">case</span>
      command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">After one of the values is matched, execution continues
      here.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
case</span> Command and the <span class="docEmphasis">here document</span>.</span>
Often the <span class="docEmphasis">here document</span> is used to create a
menu. After the user has selected a choice from the menu, the
<span class="docEmphasis">case</span> command is used to match against one of
the choices. The Korn shell also provides a <span class="docEmphasis">select</span>
loop for creating menus.</p>
<h5 id="ch10list96" class="docExampleTitle">Example 10.96 </h5>
<pre>(The .profile File)
    print &quot;Select a terminal type &quot;
1   cat &lt;&lt; EOF
        1) vt120
        2) wyse50
        3) ansi
        4) sun
2   EOF
3   read TERM
4   <span class="docEmphStrong">case &quot;$TERM&quot; in</span>
    <span class="docEmphStrong">1)</span>  export TERM=vt120
        ;;
    <span class="docEmphStrong">2)</span>  export TERM=wyse50
        ;;
    <span class="docEmphStrong">3)</span>  export TERM=ansi
        ;;
    <span class="docEmphStrong">*)</span>  export TERM=sun
        ;;
5   <span class="docEmphStrong">esac</span>
    print &quot;TERM is $TERM&quot;
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A <span class="docEmphasis">here document</span> is
      used to display a menu of choices.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">EOF is the user-defined terminator. Input for the
      <span class="docEmphasis">here</span> <span class="docEmphasis">document</span>
      stops here.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command waits
      for user input and assigns it to the <span class="docEmphasis">TERM</span>
      variable.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command
      evaluates the variable <span class="docEmphasis">TERM</span> and matches
      it against one of the numbers in the list. If a match is found, the
      terminal is set.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command
      terminates with <span class="docEmphasis">esac.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec30">10.2.8 Looping Commands</h4>
<p class="docText">The looping commands are used to execute a command or group
of commands a set number of times, or until a certain condition is met. The Korn
shell has four types of loops: the <span class="docEmphasis">for</span> loop,
<span class="docEmphasis">while</span> loop, <span class="docEmphasis">until</span>
loop, and <span class="docEmphasis">select</span> loop.</p>
<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">for</span>
Command.</span> The <span class="docEmphasis">for</span> looping command is used
to execute commands for each member of a set of arguments. You might use this
loop to execute the same commands on a list of files or usernames. The
<span class="docEmphasis">for</span> command is followed by a user-defined
variable, the keyword <span class="docEmphasis">in,</span> and a list of words.
The first time in the loop, the first word from the wordlist is assigned to the
variable, and then shifted off. The next time around the loop, the second word
is assigned to the variable, and so on. The body of the loop starts at the
<span class="docEmphasis">do</span> keyword and ends at the
<span class="docEmphasis">done</span> keyword. When all of the words in the list
have been shifted off, the loop ends and program control continues after the
<span class="docEmphasis">done</span> keyword.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>for variable in wordlist
do
    command(s)
done
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list97" class="docExampleTitle">Example 10.97 </h5>
<pre>(The Script)
1   <span class="docEmphStrong">for pal in Tom Dick Harry Joe</span>
2   <span class="docEmphStrong">do</span>
3       print &quot;Hi $pal&quot;
4   <span class="docEmphStrong">done</span>
5   print &quot;Out of loop&quot;

(The Output)
    <span class="docEmphasis">Hi Tom</span>
    <span class="docEmphasis">Hi Dick</span>
    <span class="docEmphasis">Hi Harry</span>
    <span class="docEmphasis">Hi Joe</span>
    <span class="docEmphasis">Out of loop</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This <span class="docEmphasis">for</span> loop will
      iterate through the list of names, <span class="docEmphasis">Tom, Dick,
      Harry,</span> and <span class="docEmphasis">Joe,</span> shifting each one
      off (to the left) after it is assigned to the variable
      <span class="docEmphasis">pal.</span> As soon as all of the words are
      shifted and the wordlist is empty, the loop ends and execution starts
      after the <span class="docEmphasis">done</span> keyword. The word
      following the <span class="docEmphasis">for</span> command,
      <span class="docEmphasis">pal,</span> is a variable that will be assigned
      the value after the <span class="docEmphasis">in</span> keyword, one at a
      time, for each iteration of the loop. The first time in the loop, the
      variable <span class="docEmphasis">pal</span> will be assigned the word
      <span class="docEmphasis">Tom.</span> The second time through the loop,
      <span class="docEmphasis">pal</span> will be assigned
      <span class="docEmphasis">Dick,</span> the next time
      <span class="docEmphasis">pal</span> will be assigned
      <span class="docEmphasis">Harry,</span> and the last time,
      <span class="docEmphasis">pal</span> will be assigned
      <span class="docEmphasis">Joe.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">do</span> keyword is
      required after the wordlist. If it is used on the same line, the list must
      be terminated with a semicolon. For example:</p>
      <p class="docList"><span class="docEmphasis">for pal in Tom Dick Harry
      Joe; do</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This is the body of the loop. After
      <span class="docEmphasis">Tom</span> is assigned to the variable
      <span class="docEmphasis">pal,</span> the commands in the body of the
      loop, that is, all commands between the <span class="docEmphasis">do</span>
      and the <span class="docEmphasis">done</span> keywords, are executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword ends
      the loop. If there are no words left to be processed in the wordlist on
      line 1, the loop exits, and execution starts at line 5.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This line is executed when the loop terminates.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list98" class="docExampleTitle">Example 10.98 </h5>
<pre>(The Command Line)
1   $ cat mylist
    <span class="docEmphasis">tom</span>
    <span class="docEmphasis">patty</span>
    <span class="docEmphasis">ann</span>
    <span class="docEmphasis">jake</span>
-------------------------------------------------------------


(The Script)
2   <span class="docEmphStrong">for person in $(&lt; mylist)</span>   <span class="docEmphasis">#same as</span> <span class="docEmphStrong">for person in 'cat mylist'</span>
    <span class="docEmphStrong">do</span>
3         mail $person &lt; letter
          print $person was sent a letter.
4   <span class="docEmphStrong">done</span>
5   print &quot;The letter has been sent.&quot;
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The contents of a file, called
      <span class="docEmphasis">mylist,</span> are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Command substitution is performed and the contents of
      <span class="docEmphasis">mylist</span> become the wordlist. The first
      time in the loop, <span class="docEmphasis">tom</span> is assigned to the
      variable <span class="docEmphasis">person,</span> and then shifted off, to
      be replaced with <span class="docEmphasis">patty,</span> and so on.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the body of the loop, each user is mailed a copy of
      a file called <span class="docEmphasis">letter.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword marks
      the end of this loop iteration.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When all of the users in the list have been sent mail,
      the loop will exit, and this line will be executed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list99" class="docExampleTitle">Example 10.99 </h5>
<pre>1   <span class="docEmphStrong">for file in *.c</span>
2   <span class="docEmphStrong">do</span>
        if [[ -f $file ]] ; then
           cc $file -o ${file%.c}
        fi
    <span class="docEmphStrong">done</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The wordlist will consist of all files in the current
      working directory ending with the extension <span class="docEmphasis">.c</span>
      (C source files). Each filename will be assigned to variable
      <span class="docEmphasis">file,</span> in turn, for each iteration of the
      loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When the body of the loop is entered, the file will be
      tested to make sure it exists and is a real file. If so, it will be
      compiled. <span class="docEmphasis">${file%.c}</span> expands to the
      filename without its extension.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">$*</span>
and <span class="docEmphasis">$@</span> Variables in Wordlists.</span> When
expanded, the $* and $@ are the same unless enclosed in double quotes. &quot;$*&quot;
evaluates to one string, whereas &quot;$@&quot; evaluates to a list of separate words.</p>
<h5 id="ch10list100" class="docExampleTitle">Example 10.100 </h5>
<pre>(The Script)
    #!/bin/ksh
1   <span class="docEmphStrong">for name in $*</span>     <span class="docEmphasis"># or</span> <span class="docEmphBoldItalic">for name in $@</span>
2   <span class="docEmphStrong">do</span>
        echo Hi $name
3   <span class="docEmphStrong">done</span>
-----------------------------------------------------------------
(The Command Line)
$ greet <span class="docEmphBoldItalic">Dee Bert Lizzy Tommy</span>
<span class="docEmphasis">Hi Dee</span>
<span class="docEmphasis">Hi Bert</span>
<span class="docEmphasis">Hi Lizzy</span>
<span class="docEmphasis">Hi Tommy</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$*</span> and
      <span class="docEmphasis">$@</span> expand to a list of all the positional
      parameters, in this case, the arguments passed in from the command line:
      <span class="docEmphasis">Dee,</span> <span class="docEmphasis">Bert,</span>
      <span class="docEmphasis">Lizzy,</span> and <span class="docEmphasis">
      Tommy.</span> Each name in the list will be assigned, in turn, to the
      <span class="docEmphasis">name</span> variable in the
      <span class="docEmphasis">for</span> loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The commands in the body of the loop are executed until
      the list is empty.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword marks
      the end of the loop body.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
while</span> Command.</span> The <span class="docEmphasis">while</span>
evaluates the command immediately following it, and if its exit status is zero,
the commands in the body of the loop (commands between <span class="docEmphasis">
do</span> and <span class="docEmphasis">done</span>) are executed. When the
<span class="docEmphasis">done</span> keyword is reached, control is returned to
the top of the loop and the <span class="docEmphasis">while</span> command
checks the exit status of the command again. Until the exit status of the
command being evaluated by the <span class="docEmphasis">while</span> becomes
nonzero, the loop continues. When the exit status reaches nonzero, program
execution starts after the <span class="docEmphasis">done</span> keyword. If the
exit status never becomes nonzero, the loop goes around and around infinitely.
(Of course, pressing Control-C or Control-\ will stop the looping.)</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>while command
do
   command(s)
done
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list101" class="docExampleTitle">Example 10.101 </h5>
<pre>(The Script)
1   num=0                   <span class="docEmphasis"># Initialize num</span>
2   <span class="docEmphStrong">while (( num &lt; 10 ))</span>    <span class="docEmphasis"># Test num with the let</span>
    <span class="docEmphStrong">do</span>
       print -n $num
3      <span class="docEmphStrong">(( num=num + 1 ))</span>      <span class="docEmphasis"># Increment num</span>
    <span class="docEmphStrong">done</span>
    print &quot;\nAfter loop exits, continue running here&quot;

(The Output)
<span class="docEmphasis">0123456789</span>
<span class="docEmphasis">After loop exits, continue running here</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This is the initialization step. The variable
      <span class="docEmphasis">num</span> is assigned zero.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> command is
      followed by the <span class="docEmphasis">let</span> command. If the value
      of <span class="docEmphasis">num</span> is less than 10, the body of the
      loop is entered.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the body of the loop, the value of
      <span class="docEmphasis">num</span> is incremented by one. If the value
      of <span class="docEmphasis">num</span> was never changed, the loop would
      iterate infinitely or until the process was killed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list102" class="docExampleTitle">Example 10.102 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: quiz</span>
1   read answer?&quot;Who was the U.S. President in 1992? &quot;
2   <span class="docEmphStrong">while [[ $answer != &quot;Bush&quot; ]]</span>
3   <span class="docEmphStrong">do</span>
        print &quot;Wrong try again!&quot;
4       <span class="docEmphStrong">read answer</span>
5   <span class="docEmphStrong">done</span>
6   print Good guess!

(The Output)
$ <span class="docEmphStrong">quiz</span>
<span class="docEmphasis">Who was the U.S. President in 1992?</span> <span class="docEmphBoldItalic">George</span>
<span class="docEmphasis">Wrong try again!</span>
<span class="docEmphasis">Who was the U.S. President in 1992?</span> <span class="docEmphBoldItalic">I give up</span>
<span class="docEmphasis">Wrong try again!</span>
<span class="docEmphasis">Who was the U.S. President in 1992?</span> <span class="docEmphBoldItalic">Bush</span>
<span class="docEmphasis">Good guess!</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command
      prints the string after the question mark (<span class="docEmphasis">?</span>),
      <span class="docEmphasis">Who was the U.S. President in 1992?,</span> and
      waits for input from the user. The input will be stored in the variable
      <span class="docEmphasis">answer.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> loop is
      entered and the test command, <span class="docEmphasis">[[,</span>
      evaluates the expression. If the variable <span class="docEmphasis">answer</span>
      does not equal the string <span class="docEmphasis">Bush,</span> the body
      of the loop is entered and commands between the <span class="docEmphasis">
      do</span> and <span class="docEmphasis">done</span> are executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">do</span> keyword is the
      start of the loop body.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked to reenter input.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword marks
      the end of the loop body. Control is returned to the top of the
      <span class="docEmphasis">while</span> loop, and the expression is tested
      again. As long as <span class="docEmphasis">$answer</span> does not
      evaluate to <span class="docEmphasis">Bush,</span> the loop will continue
      to iterate. When the user's input is <span class="docEmphasis">Bush,</span>
      the loop ends. Program control goes to line 6.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list103" class="docExampleTitle">Example 10.103 </h5>
<pre>(The Script)
1   <span class="docEmphStrong">go=1</span>
    print Type q to quit.
2   <span class="docEmphStrong">while let go</span> <span class="docEmphasis">or</span> <span class="docEmphStrong">(( go ))</span>
    do
       print I love you.
       read word
3      <span class="docEmphStrong">if [[ $word = [qQ]* ]]</span>
       then
           print &quot;I'll always love you&quot;
4          <span class="docEmphStrong">go=0</span>
        fi
5    done

(The Output)
$ <span class="docEmphStrong">sayit</span>
<span class="docEmphasis">Type q to quit.</span>
<span class="docEmphasis">I love you.</span>
<span class="docEmphasis">I love you.</span>
<span class="docEmphasis">I love you.</span>
<span class="docEmphasis">I love you.</span>
<span class="docEmphasis">I love you.</span>
<span class="docEmphStrong">q</span>
<span class="docEmphasis">I'll always love you</span>
$
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">go</span> is
      assigned <span class="docEmphasis">1.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The loop is entered. The <span class="docEmphasis">let</span>
      command tests the expression. The expression evaluates to one. The program
      goes into the body of the <span class="docEmphasis">while</span> loop and
      executes commands from the <span class="docEmphasis">do</span> keyword to
      the <span class="docEmphasis">done</span> keyword.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the user enters a <span class="docEmphasis">q</span>
      or <span class="docEmphasis">Q</span> as input to the variable
      <span class="docEmphasis">word,</span> the commands between
      <span class="docEmphasis">then</span> and <span class="docEmphasis">fi</span>
      are executed. Anything else will cause <span class="docEmphasis">I love
      you.</span> to be displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The variable <span class="docEmphasis">go</span> is
      assigned zero. When program control starts at the top of the
      <span class="docEmphasis">while</span> loop, the expression will be
      tested. Since the expression evaluates to false, the loop exits and the
      script starts execution after the <span class="docEmphasis">done</span>
      keyword on line 5.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> marks the end
      of the body of the loop.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
until</span> Command.</span> The <span class="docEmphasis">until</span> command
is used like the <span class="docEmphasis">while</span> command, but evaluates
the exit status in the opposite way. The <span class="docEmphasis">until</span>
evaluates the command immediately following it, and if its exit status is not
zero, the commands in the body of the loop (commands between
<span class="docEmphasis">do</span> and <span class="docEmphasis">done</span>)
are executed. When the <span class="docEmphasis">done</span> keyword is reached,
control is returned to the top of the loop and the <span class="docEmphasis">
until</span> command checks the exit status of the command again. Until the exit
status of the command being evaluated by <span class="docEmphasis">until</span>
becomes zero, the loop continues. When the exit status reaches zero, program
execution starts after the <span class="docEmphasis">done</span> keyword.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>until command
do
   command(s)
done
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list104" class="docExampleTitle">Example 10.104 </h5>
<pre>    #!/bin/ksh
1   <span class="docEmphStrong">until who | grep linda</span>
2   <span class="docEmphStrong">do</span>
       sleep 5
3   <span class="docEmphStrong">done</span>
    talk linda@dragonwings
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">until</span> loop tests
      the exit status of the last command in the pipeline,
      <span class="docEmphasis">grep.</span> The <span class="docEmphasis">who</span>
      command lists who is logged on this machine and pipes its output to
      <span class="docEmphasis">grep.</span> The <span class="docEmphasis">grep</span>
      command will return zero exit status (success) only when it finds user
      <span class="docEmphasis">linda.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If user <span class="docEmphasis">linda</span> has not
      logged in, the body of the loop is entered and the program sleeps for
      <span class="docEmphasis">5</span> seconds.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When <span class="docEmphasis">linda</span> logs on,
      the exit status of the <span class="docEmphasis">grep</span> command will
      be zero and control will go to the statements following the
      <span class="docEmphasis">done</span> keyword.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list105" class="docExampleTitle">Example 10.105 </h5>
<pre>    #!/bin/ksh
1   hour=0
2   <span class="docEmphStrong">until (( hour &gt; 23 ))</span>
    <span class="docEmphStrong">do</span>
3      case &quot;$hour&quot; in
       [0-9]|1[0-1]) print &quot;Good morning!&quot;
              ;;
       12) print &quot;Lunch time&quot;
              ;;
       1[3-7]) print &quot;Siesta time&quot;
              ;;
       *) print &quot;Good night&quot;
              ;;
       esac
4      <span class="docEmphStrong">(( hour+=1 ))</span>
5   <span class="docEmphStrong">done</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">hour</span> variable is
      assigned zero. The variable must be initialized before being used in the
      <span class="docEmphasis">until</span> loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">until</span> command is
      followed by the <span class="docEmphasis">let</span> command. If the
      <span class="docEmphasis">hour</span> is not greater than
      <span class="docEmphasis">23,</span> that is, the exit status is nonzero,
      the loop body is entered.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command
      matches the value of the <span class="docEmphasis">hour</span> variable
      against one of the <span class="docEmphasis">hour</span> values, or
      matches the default, executing the command that applies.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">hour</span> is
      incremented by one; otherwise, the <span class="docEmphasis">hour</span>
      will never become greater than <span class="docEmphasis">23</span> and the
      loop will never exit. Control is returned to the <span class="docEmphasis">
      until</span> command and the <span class="docEmphasis">hour</span> is
      evaluated again.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword marks
      the end of the loop. When the <span class="docEmphasis">hour</span> is
      greater than <span class="docEmphasis">23,</span> control will go to the
      line under the <span class="docEmphasis">done,</span> if there is one;
      otherwise, the program is exited.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
select</span> Command and Menus.</span> The <span class="docEmphasis">here
document</span> is an easy method for creating menus, but the Korn shell
introduces a new loop, called the <span class="docEmphasis">select</span> loop,
which is used primarily for creating menus. A menu of numerically listed items
is displayed to standard error. The PS3 prompt is used to prompt the user for
input; by default, PS3 is #?. After the PS3 prompt is displayed, the shell waits
for user input. The input should be one of the numbers in the menu list. The
input is stored in the special Korn shell <span class="docEmphasis">REPLY</span>
variable. The number in the <span class="docEmphasis">REPLY</span> variable is
associated with the string to the right of the parentheses in the list of
selections.<span id="ENB10-7"><a class="docLink" href="#EN10-7"><sup>[7]</sup></a></span>
</p>

<p class="docText">The <span class="docEmphasis">case</span> command is used
with the <span class="docEmphasis">select</span> command to allow the user to
make a selection from the menu and, based on that selection, execute commands.
The <span class="docEmphasis">LINES</span> and <span class="docEmphasis">COLUMNS</span>
variables can be used to determine the layout of the menu items displayed on the
terminal. The output is displayed to standard error, each item preceded by a
number and closing parenthesis, and the PS3 prompt is displayed at the bottom of
the menu. Since the <span class="docEmphasis">select</span> command is a looping
command, it is important to remember to use either the <span class="docEmphasis">
break</span> command to get out of the loop, or the <span class="docEmphasis">
exit</span> command to exit the script.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>select var in wordlist
do
   command(s)
done
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list106" class="docExampleTitle">Example 10.106 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Program name: goodboys</span>
1   <span class="docEmphStrong">PS3=&quot;Please choose one of the three boys : &quot;</span>
2   <span class="docEmphStrong">select choice in tom dan guy</span>
3   <span class="docEmphStrong">do</span>
4       case $choice in
        tom)
            print Tom is a cool dude!
5           <span class="docEmphStrong">break;;</span>         <span class="docEmphasis"># break out of the select loop</span>
6        dan | guy )
            print Dan and Guy are both sweethearts.
            break;;
         *)
7           <span class="docEmphStrong">print &quot; $REPLY is not one of your choices&quot; 1&gt;&amp;2</span>
            print &quot;Try again.&quot;
            ;;
8       esac
9   <span class="docEmphStrong">done</span>

(The Command Line)
$ <span class="docEmphStrong">goodboys</span>
<span class="docEmphasis">1) tom</span>
<span class="docEmphasis">2) dan</span>
<span class="docEmphasis">3) guy</span>
<span class="docEmphasis">Please choose one of the three boys :</span> <span class="docEmphBoldItalic">2</span>
<span class="docEmphasis">Dan and Guy are both sweethearts.</span>

<span class="docEmphStrong">$ goodboys</span>
<span class="docEmphasis">1) tom</span>
<span class="docEmphasis">2) dan</span>
<span class="docEmphasis">3) guy</span>
<span class="docEmphasis">Please choose one of the three boys :</span> <span class="docEmphBoldItalic">4</span>
<span class="docEmphasis">4 is not one of your choices</span>
<span class="docEmphasis">Try again.</span>
<span class="docEmphasis">Please choose one of the three boys :</span> <span class="docEmphBoldItalic">1</span>
<span class="docEmphasis">Tom is a cool dude!</span>
$
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">PS3</span> variable is
      assigned the prompt that will appear below the list of menu selections.
      After the prompt is displayed, the program waits for user input. The input
      is stored in the built-in variable called <span class="docEmphasis">REPLY.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">select</span> command is
      followed by the variable <span class="docEmphasis">choice.</span> This
      syntax is similar to that of the <span class="docEmphasis">for</span>
      loop. The variable <span class="docEmphasis">choice</span> is assigned, in
      turn, each of the items in the list that follows it, in this case,
      <span class="docEmphasis">tom, dan,</span> and <span class="docEmphasis">
      guy.</span> It is this wordlist that will be displayed in the menu,
      preceded by a number and a right parenthesis.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">do</span> keyword
      indicates the start of the body of the loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The first command in the body of the
      <span class="docEmphasis">select</span> loop is the
      <span class="docEmphasis">case</span> command. The
      <span class="docEmphasis">case</span> command is normally used with the
      <span class="docEmphasis">select</span> loop. The value in the
      <span class="docEmphasis">REPLY</span> variable is associated with one of
      the choices: 1 is associated with <span class="docEmphasis">tom,</span> 2
      is associated with <span class="docEmphasis">dan,</span> and 3 is
      associated with <span class="docEmphasis">guy.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If <span class="docEmphasis">tom</span> is the choice,
      after printing the string <span class="docEmphasis">Tom is a cool dude!,</span>
      the <span class="docEmphasis">break</span> command causes the
      <span class="docEmphasis">select</span> loop to be exited. Program control
      starts after the <span class="docEmphasis">done</span> keyword.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If either menu item, 2 (<span class="docEmphasis">dan</span>)
      or 3 (<span class="docEmphasis">tom</span>), is selected, the
      <span class="docEmphasis">REPLY</span> variable contains the user's
      selection. If the selection is not 1, 2, or 3, an error message is sent to
      standard error. The user is asked to try again and control starts at the
      beginning of the <span class="docEmphasis">select</span> loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The end of the <span class="docEmphasis">case</span>
      command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The end of the <span class="docEmphasis">select</span>
      loop.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list107" class="docExampleTitle">Example 10.107 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Program name: ttype</span>
    <span class="docEmphasis"># Purpose: set the terminal type</span>
    <span class="docEmphasis"># Author: Andy Admin</span>
1   <span class="docEmphStrong">COLUMNS=60</span>
2   <span class="docEmphStrong">LINES=1</span>
3   <span class="docEmphStrong">PS3=&quot;Please enter the terminal type: &quot;</span>
4   <span class="docEmphStrong">select choice in wyse50 vt200 vt100 sun</span>
    do
5      <span class="docEmphStrong">case $REPLY in</span>
       1)
6          export TERM=$choice
           print &quot;TERM=$choice&quot;
           break;;               <span class="docEmphasis"># break out of the select loop</span>
       2 | 3 )
           export TERM=$choice
           print &quot;TERM=$choice&quot;
           break;;
       4)
           export TERM=$choice
           print &quot;TERM=$choice&quot;
           break;;
       *)
7          print &quot;$REPLY is not a valid choice. Try again&quot; 1&gt;&amp;2
                ;;
        esac
8   <span class="docEmphStrong">done</span>

(The Command Line)
$ <span class="docEmphStrong">ttype</span>
<span class="docEmphBoldItalic">1) wyse50    2) vt200   3) vt100    4) sun</span>
<span class="docEmphasis">Please enter the terminal type :</span> <span class="docEmphBoldItalic">4</span>
<span class="docEmphasis">TERM=sun</span>

<span class="docEmphStrong">$ ttype</span>
<span class="docEmphBoldItalic">1) wyse50    2) vt200   3) vt100    4) sun</span>
<span class="docEmphasis">Please enter the terminal type :</span> <span class="docEmphBoldItalic">3</span>
<span class="docEmphasis">TERM=vt100</span>

<span class="docEmphStrong">$ ttype</span>
<span class="docEmphBoldItalic">1) wyse50    2) vt200   3) vt100    4) sun</span>
<span class="docEmphasis">Please enter the terminal type :</span> <span class="docEmphBoldItalic">7</span>
<span class="docEmphasis">7 is not a valid choice. Try again.</span>
<span class="docEmphasis">Please enter the terminal type:</span> <span class="docEmphBoldItalic">2</span>
<span class="docEmphasis">TERM=vt200</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">COLUMNS</span> variable
      is set to the width of the terminal display in columns for menus created
      with the <span class="docEmphasis">select</span> loop. The default is 80.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">LINES</span> variable
      controls the vertical display of the <span class="docEmphasis">select</span>
      menu on the terminal. The default is 24 lines. By changing the
      <span class="docEmphasis">LINES</span> value to <span class="docEmphasis">
      1,</span> the menu items will be printed on one line, instead of
      vertically as in the last example.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">PS3</span> prompt is set
      and will appear under the menu choices.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">select</span> loop will
      print a menu with four selections: <span class="docEmphasis">wyse50,</span>
      <span class="docEmphasis">vt200,</span> <span class="docEmphasis">vt100,</span>
      and <span class="docEmphasis">sun.</span> The variable
      <span class="docEmphasis">choice</span> will be assigned one of these
      values based on the user's response held in the <span class="docEmphasis">
      REPLY</span> variable. If <span class="docEmphasis">REPLY</span> is 1,
      <span class="docEmphasis">wyse50</span> is assigned to
      <span class="docEmphasis">choice;</span> if <span class="docEmphasis">
      REPLY</span> is 2, <span class="docEmphasis">vt200</span> is assigned to
      <span class="docEmphasis">choice;</span> if <span class="docEmphasis">
      REPLY</span> is 3, <span class="docEmphasis">vt100</span> is assigned to
      <span class="docEmphasis">choice;</span> and if <span class="docEmphasis">
      REPLY</span> is 4, <span class="docEmphasis">sun</span> is assigned to
      <span class="docEmphasis">choice.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">REPLY</span> variable
      evaluates to the user's input selection.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The terminal type is assigned, exported, and printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the user does not enter a number between 1 and 4, he
      or she will be prompted again. Note that the menu does not appear, just
      the <span class="docEmphasis">PS3</span> prompt. To make the menu
      reappear, set the <span class="docEmphasis">REPLY</span> variable to null.
      Type above line 8: <span class="docEmphasis">REPLY =</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The end of the <span class="docEmphasis">select</span>
      loop.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Looping Commands.</b> If some condition occurs, you may
want to break out of a loop, return to the top of the loop, or provide a way to
stop an infinite loop. The Korn shell provides loop control commands to control
loops.</p>
<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
shift</span> Command.</span> The <span class="docEmphasis">shift</span> command
shifts the parameter list to the left a specified number of times. The
<span class="docEmphasis">shift</span> command without an argument shifts the
parameter list once to the left. Once the list is shifted, the parameter is
removed permanently. Often the <span class="docEmphasis">shift</span> command is
used in <span class="docEmphasis">while</span> loops when iterating through a
list of positional parameters.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>shift [n]
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list108" class="docExampleTitle">Example 10.108 </h5>
<pre>(Without a Loop)
(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: doit0</span>
1   <span class="docEmphStrong">set joe mary tom sam</span>
2   <span class="docEmphStrong">shift</span>
3   print $*
4   <span class="docEmphStrong">set $(date)</span>
5   print $*
6   <span class="docEmphStrong">shift 5</span>
7   print $*
8   <span class="docEmphStrong">shift 2</span>

(The Output)
    $ <span class="docEmphStrong">doit0</span>
3   <span class="docEmphasis">mary tom sam</span>
5   <span class="docEmphasis">Sun Sep 9 10:00:12 PDT 2001</span>
7   <span class="docEmphasis">2001</span>
8   <span class="docEmphasis">ksh: shift: bad number</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command sets
      the positional parameters. <span class="docEmphasis">$1</span> is assigned
      <span class="docEmphasis">joe,</span> <span class="docEmphasis">$2</span>
      is assigned <span class="docEmphasis">mary,</span>
      <span class="docEmphasis">$3</span> is assigned <span class="docEmphasis">
      tom,</span> and <span class="docEmphasis">$4</span> is assigned
      <span class="docEmphasis">sam.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">shift</span> command
      shifts the positional parameters to the left; <span class="docEmphasis">
      joe</span> is shifted off.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The parameter list is printed after the
      <span class="docEmphasis">shift.</span> <span class="docEmphasis">$*</span>
      represents all of the parameters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command resets
      the positional parameters to the output of the UNIX
      <span class="docEmphasis">date</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The new parameter list is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This time the list is shifted five times to the left.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The new parameter list is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">By attempting to shift more times than there are
      parameters, the shell sends a message to standard error.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list109" class="docExampleTitle">Example 10.109 </h5>
<pre>(With a Loop)
(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Usage: doit [args]</span>
1   <span class="docEmphStrong">while (( $# &gt; 0 ))</span>
    <span class="docEmphStrong">do</span>
2      print $*
3      <span class="docEmphStrong">shift</span>
4   <span class="docEmphStrong">done</span>
(The Command Line)
$ <span class="docEmphStrong">doit a b c d e</span>
<span class="docEmphasis">a b c d e</span>
<span class="docEmphasis">b c d e</span>
<span class="docEmphasis">c d e</span>
<span class="docEmphasis">d e</span>
<span class="docEmphasis">e</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> command
      tests the numeric expression. If the number of positional parameters (<span class="docEmphasis">$#</span>)
      is greater than zero, the body of the loop is entered. The positional
      parameters are coming from the command line as arguments. There are five.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All the positional parameters are printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The parameter list is shifted once to the left.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The body of the loop ends here; control returns to the
      top of the loop. The parameter list has decreased by one. After the first
      shift, <span class="docEmphasis">$#</span> is four. When
      <span class="docEmphasis">$#</span> has been decreased to zero, the loop
      ends.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
break</span> Command.</span> The built-in <span class="docEmphasis">break</span>
command is used to force immediate exit from a loop, but not from a program. (To
leave a program, the <span class="docEmphasis">exit</span> command is used.)
After the <span class="docEmphasis">break</span> command is executed, control
starts after the <span class="docEmphasis">done</span> keyword. The
<span class="docEmphasis">break</span> command causes an exit from the innermost
loop, so if you have nested loops, the <span class="docEmphasis">break</span>
command takes a number as an argument, allowing you to exit out of any number of
outer loops. The <span class="docEmphasis">break</span> is useful for exiting
from an infinite loop.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">Format</h2>
    <pre>break [n]
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list110" class="docExampleTitle">Example 10.110 </h5>
<p class="docText">
<img alt="graphics/10prfig02.gif" src="10prfig02.gif" border="0" width="500" height="140"></p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">true</span> command is a
      UNIX command, and an alias for the colon command in the Korn shell. It
      always exits with zero status and is often used to start an infinite loop.
      (The null command (:) can be used to do the same thing.) The body of the
      loop is entered.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked for input. The user's input is
      assigned to the variable <span class="docEmphasis">answer.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If <span class="docEmphasis">answer</span> evaluates to
      <span class="docEmphasis">Y,</span> <span class="docEmphasis">y,</span>
      <span class="docEmphasis">Yes,</span> <span class="docEmphasis">Yup,</span>
      or <span class="docEmphasis">Ya</span> (anything beginning with
      <span class="docEmphasis">Y</span> or <span class="docEmphasis">y</span>),
      the <span class="docEmphasis">break</span> command is executed and control
      goes to line 6. The line <span class="docEmphasis">Here we are</span> is
      printed. Until the user answers something that starts with a
      <span class="docEmphasis">Y</span> or <span class="docEmphasis">y,</span>
      the program will continue to ask for input. This could go on forever!</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the test fails in line 3, the
      <span class="docEmphasis">else</span> commands are executed. When the body
      of the loop ends at the <span class="docEmphasis">done</span> keyword,
      control starts again at the top of the <span class="docEmphasis">while</span>
      at line 1.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The end of the loop body.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Control starts here after the <span class="docEmphasis">
      break</span> command is executed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
continue</span> Command.</span> The <span class="docEmphasis">continue</span>
command starts back at the top of the loop if some condition becomes true. All
commands below the <span class="docEmphasis">continue</span> will be ignored.
The <span class="docEmphasis">continue</span> command returns control to the top
of the innermost loop; if nested within a number of loops, the
<span class="docEmphasis">continue</span> command may take a number as its
argument. Control can be started at the top of any number of outer loops.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>continue [n]
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list111" class="docExampleTitle">Example 10.111 </h5>
<p class="docText">
<img alt="graphics/10prfig03.gif" src="10prfig03.gif" border="0" width="500" height="286"></p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">for</span> loop will
      iterate through a list of names stored in a file called
      <span class="docEmphasis">mail_list.</span> Each time a name from the list
      is assigned to the variable <span class="docEmphasis">name,</span> it is
      shifted off the list and replaced by the next name on the list.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">name</span> matches
      <span class="docEmphasis">richard;</span> the <span class="docEmphasis">
      continue</span> command is executed. Since <span class="docEmphasis">
      richard</span> has already been shifted off, the next user,
      <span class="docEmphasis">melanie,</span> is assigned to the variable
      <span class="docEmphasis">name.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">continue</span> command
      returns control to the top of the loop, skipping any commands in the rest
      of the loop body.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All users in the list, except <span class="docEmphasis">
      richard,</span> will be mailed a copy of the file
      <span class="docEmphasis">memo.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The end of loop body.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Nested Loops.</b> If using nested loops, the
<span class="docEmphasis">break</span> and <span class="docEmphasis">continue</span>
commands let you control which loop to terminate.</p>
<h5 id="ch10list112" class="docExampleTitle">Example 10.112 </h5>
<p class="docText">
<img alt="graphics/10prfig04.gif" src="10prfig04.gif" border="0" width="500" height="274"></p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">true</span> command
      always returns an exit status of zero. The loop is designed to go forever
      unless you use loop control commands.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">for</span> loop is
      entered.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">for</span> loop will loop
      through each of the names in the list. If the user variable begins with a
      <span class="docEmphasis">D</span> or <span class="docEmphasis">d,</span>
      the <span class="docEmphasis">continue</span> command causes control to go
      to the top of the <span class="docEmphasis">while</span> loop. Without an
      argument, the <span class="docEmphasis">continue</span> command would
      start control at the top of the <span class="docEmphasis">for</span> loop.
      The argument <span class="docEmphasis">2</span> tells the shell to go to
      the top of the second enclosing loop and restart execution there.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> loop is
      nested. The <span class="docEmphasis">true</span> command always exits
      with zero status. The loop will go forever.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">break</span> command
      terminates the outermost <span class="docEmphasis">while</span> loop.
      Execution starts at line 9.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword marks
      the end of the innermost <span class="docEmphasis">while</span> loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This <span class="docEmphasis">done</span> keyword
      marks the end of the <span class="docEmphasis">for</span> loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This <span class="docEmphasis">done</span> keyword
      marks the end of outermost <span class="docEmphasis">while</span> loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Out of the loop.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>I/O Redirection and Loops.</b> The Korn shell allows you
to use redirection and pipes in loops. Unlike the Bourne shell, the loop runs in
this shell, not a subshell. Variables set within the loop will still be set when
the loop exits.</p>
<p class="docText"><b>Redirect the Output of a Loop to a File.</b> Instead of
sending the output of a loop to the screen, it can be redirected to a file or a
pipe. See <a class="docLink" href="#ch10list113">Example 10.113</a>.</p>
<h5 id="ch10list113" class="docExampleTitle">Example 10.113 </h5>
<pre>    (The Command Line)
1   $ <span class="docEmphStrong">cat memo</span>
    <span class="docEmphasis">abc</span>
    <span class="docEmphasis">def</span>
    <span class="docEmphasis">ghi</span>
------------------------------------------------------------------
(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Program name: numberit</span>
    <span class="docEmphasis"># Put line numbers on all lines of memo</span>
2   if (( $# &lt; 1 ))
    then
        print &quot;Usage: $0 filename &quot; &gt;&amp;2
        exit 1
    fi
3   integer count=1              <span class="docEmphasis"># Initialize count</span>
4   <span class="docEmphStrong">cat $1 | while read line</span>     <span class="docEmphasis"># Input is coming from memo</span>
    do
5       <span class="docEmphStrong">(( count == 1 )) &amp;&amp; print &quot;Processing file $1...&quot; &gt; /dev/tty</span>
6       print $count $line
7       (( count+=1 ))
8   <span class="docEmphStrong">done &gt; tmp$$</span>                 <span class="docEmphasis"># Output is going to a temporary file</span>
9   mv tmp$$ $1

(The Command Line)
10  $ <span class="docEmphStrong">numberit memo</span>
    <span class="docEmphasis">Processing file memo...</span>

11  $ <span class="docEmphStrong">cat memo</span>
    <span class="docEmphasis">1 abc</span>
    <span class="docEmphasis">2 def</span>
    <span class="docEmphasis">3 ghi</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The contents of file <span class="docEmphasis">memo</span>
      are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the number of arguments is less than one, a usage
      message is sent to standard error, the screen.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">count</span> variable is
      declared an integer and is assigned the value <span class="docEmphasis">1.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The UNIX <span class="docEmphasis">cat</span> command
      displays the contents of the filename stored in <span class="docEmphasis">
      $1,</span> and the output is piped to the <span class="docEmphasis">while</span>
      loop. The <span class="docEmphasis">read</span> command is assigned the
      first line of the file the first time in the loop, the second line of the
      file the next time through the loop, and so forth.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of this <span class="docEmphasis">print</span>
      statement is sent to <span class="docEmphasis">/dev/tty,</span> the
      screen. If not explicitly redirected to <span class="docEmphasis">/dev/tty,</span>
      the output will be redirected to <span class="docEmphasis">tmp$$</span> on
      line 8.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> function
      prints the value of <span class="docEmphasis">count,</span> followed by
      the line in the file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">count</span> variable is
      incremented by <span class="docEmphasis">1.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The output of this entire loop, with the exception of
      line 3, is redirected to the file <span class="docEmphasis">tmp$$</span>
      (where <span class="docEmphasis">$$</span> evaluates to the PID of this
      process). The <span class="docEmphasis">tmp</span> file is given a unique
      name by appending the PID of this process to its name.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">tmp</span> file is
      renamed to the name of the file that was assigned to
      <span class="docEmphasis">$1.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The program is executed. The file to be processed is
      called <span class="docEmphasis">memo.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The file is displayed with line numbers.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Pipe the Output of a Loop to a UNIX Command.</b> The
output of a loop can be redirected from the screen to a pipe. See
<a class="docLink" href="#ch10list114">Example 10.114</a>.</p>
<h5 id="ch10list114" class="docExampleTitle">Example 10.114 </h5>
<pre>(The Script)
1   for i in 7 9 2 3 4 5
2   do
       print $i
3   <span class="docEmphStrong">done | sort –n</span>

(The Output)
<span class="docEmphasis">2</span>
<span class="docEmphasis">3</span>
<span class="docEmphasis">4</span>
<span class="docEmphasis">5</span>
<span class="docEmphasis">7</span>
<span class="docEmphasis">9</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">for</span> loop iterates
      through a list of unsorted numbers.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the body of the loop, the numbers are printed. This
      output will be piped into the UNIX <span class="docEmphasis">sort</span>
      command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The pipe is created after the <span class="docEmphasis">
      done</span> keyword.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Running Loops in the Background.</b> If the loop is going
to take a while to process, it can be run as a background job so that the rest
of the program can continue.</p>
<h5 id="ch10list115" class="docExampleTitle">Example 10.115 </h5>
<pre>1   for person in bob jim joe sam
    do
2      mail $person &lt; memo
3   <span class="docEmphStrong">done &amp;</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">for</span> loop shifts
      through each of the names in the wordlist: <span class="docEmphasis">bob,
      jim, joe,</span> and <span class="docEmphasis">sam.</span> Each of the
      names is assigned to the variable <span class="docEmphasis">person,</span>
      in turn.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the body of the loop, each person is sent the
      contents of the file <span class="docEmphasis">memo.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The ampersand at the end of the
      <span class="docEmphasis">done</span> keyword causes the loop to be
      executed in the background. The program will continue to run while the
      loop is executing.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">
exec</span> Command and Loops.</span> The <span class="docEmphasis">exec</span>
command can be used to close standard input or output without creating a
subshell.</p>
<h5 id="ch10list116" class="docExampleTitle">Example 10.116 </h5>
<pre>(The File)
1   cat tmp
    <span class="docEmphasis">apples</span>
    <span class="docEmphasis">pears</span>
    <span class="docEmphasis">bananas</span>
    <span class="docEmphasis">peaches</span>
    <span class="docEmphasis">plums</span>
-----------------------------------------------------------
(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: speller</span>
    <span class="docEmphasis"># Purpose: Check and fix spelling errors in a file</span>
    <span class="docEmphasis">#</span>

2   <span class="docEmphStrong">exec &lt; tmp</span>         <span class="docEmphasis"># Opens the tmp file</span>
3   <span class="docEmphStrong">while read line</span>    <span class="docEmphasis"># Read from the tmp file</span>
    do
4       print $line
5       print –n &quot;Is this word correct? [Y/N] &quot;
6       <span class="docEmphStrong">read answer &lt; /dev/tty</span>    <span class="docEmphasis"># Read from the terminal</span>
        case $answer in
        [Yy]*)
            continue
               ;;
        *)
            print &quot;New word? &quot;
7           <span class="docEmphStrong">read word &lt; /dev/tty</span>
            sed &quot;s/$line/$word/&quot; tmp &gt; error
            mv error tmp

8           print $word has been changed.
                ;;
        esac
    <span class="docEmphStrong">done</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The contents of the <span class="docEmphasis">tmp</span>
      file are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">exec</span> command
      changes standard input (file descriptor 0), so that instead of input
      coming from the keyboard, it is coming from the <span class="docEmphasis">
      tmp</span> file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> loop starts.
      The <span class="docEmphasis">read</span> command gets a line of input
      from the <span class="docEmphasis">tmp</span> file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value stored in the <span class="docEmphasis">line</span>
      variable is printed to the screen.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked if the word is correct.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command gets
      the user's response from the terminal, <span class="docEmphasis">/dev/tty.</span>
      If the input is not redirected directly from the terminal, it will
      continue to be read from the file <span class="docEmphasis">tmp,</span>
      still opened for input.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is again asked for input, and the input is
      redirected from the terminal, <span class="docEmphasis">/dev/tty.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The new word is displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">The <span class="docEmphasis">IFS</span>
and Loops.</span> The <span class="docEmphasis">IFS,</span> the shell's internal
field separator, evaluates to spaces, tabs, and the newline character. It is
used as a word (token) separator for commands that parse lists of words such as
<span class="docEmphasis">read, set, for,</span> and <span class="docEmphasis">
select.</span> It can be reset by the user if a different separator will be used
in a list. It is a good idea to save the original value of the
<span class="docEmphasis">IFS</span> in another variable before changing it.
Then it is easy to return to its default value.</p>
<h5 id="ch10list117" class="docExampleTitle">Example 10.117 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Script is called runit.</span>
    <span class="docEmphasis"># IFS is the internal field separator and defaults to</span>
    <span class="docEmphasis"># spaces, tabs, and newlines.</span>
    <span class="docEmphasis"># In this script it is changed to a colon.</span>
1   <span class="docEmphStrong">names=Tom:Dick:Harry:John</span>
2   <span class="docEmphStrong">OLDIFS=&quot;$IFS&quot;</span>             <span class="docEmphasis"># Save the original value of IFS</span>
3   <span class="docEmphStrong">IFS=&quot;:&quot;</span>
4   <span class="docEmphStrong">for persons in $names</span>
    do
5       print Hi $persons
    done
6   <span class="docEmphStrong">IFS=&quot;$OLDIFS&quot;</span>             <span class="docEmphasis"># Reset the IFS to old value</span>

7   <span class="docEmphStrong">set Jill Jane Jolene</span>      <span class="docEmphasis"># Set positional parameters</span>
8   <span class="docEmphStrong">for girl in $*</span>
    do
        print Howdy $girl
    done

(The Output)
$ <span class="docEmphStrong">runit</span>

<span class="docEmphasis">Hi Tom</span>
<span class="docEmphasis">Hi Dick</span>
<span class="docEmphasis">Hi Harry</span>
<span class="docEmphasis">Hi John</span>
<span class="docEmphasis">Howdy Jill</span>
<span class="docEmphasis">Howdy Jane</span>
<span class="docEmphasis">Howdy Jolene</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">names</span> variable is
      set to the string <span class="docEmphasis">Tom:Dick:Harry:John.</span>
      Each of the words is separated by a colon.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of <span class="docEmphasis">IFS</span> is
      assigned to another variable, <span class="docEmphasis">OLDIFS.</span>
      Since the value of the <span class="docEmphasis">IFS</span> is whitespace,
      it must be quoted to preserve the whitespace.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">IFS</span> is assigned a
      colon. Now the colon is used to separate words.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">After variable substitution, the
      <span class="docEmphasis">for</span> loop will iterate through each of the
      names using the colon as the internal field separator between the words.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Each of the names in the wordlist is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">IFS</span> is reassigned its
      original values, stored in <span class="docEmphasis">OLDIFS.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The positional parameters are set.
      <span class="docEmphasis">$1</span> is assigned <span class="docEmphasis">
      Jill,</span> <span class="docEmphasis">$2</span> is assigned
      <span class="docEmphasis">Jane,</span> and <span class="docEmphasis">$3</span>
      is assigned <span class="docEmphasis">Jolene.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">$*</span> evaluates to all
      the positional parameters, <span class="docEmphasis">Jill, Jane,</span>
      and <span class="docEmphasis">Jolene.</span> The <span class="docEmphasis">
      for</span> loop assigns each of the names to the <span class="docEmphasis">
      girl</span> variable, in turn, through each iteration of the loop.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec31">10.2.9 Arrays</h4>
<p class="docText">Korn shell arrays are one-dimensional arrays that may contain
up to 1,024 (size varies) elements consisting of words or integers. The index
starts at zero. Each element of an array can be set or unset individually.
Values do not have to be set in any particular order. For example, you can
assign a value to the tenth element before you assign a value to the first
element. An array can be set using the <span class="docEmphasis">set</span>
command with the <span class="docEmphasis">–A</span> option.</p>
<p class="docText">Associative arrays are supported under versions of the Korn
shell that are more recent than 1988.</p>
<h5 id="ch10list118" class="docExampleTitle">Example 10.118 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">array[0]=tom</span>
    $ <span class="docEmphStrong">array[1]=dan</span>
    $ <span class="docEmphStrong">array[2]=bill</span>

2   $ print <span class="docEmphStrong">${array[0]}</span>     <span class="docEmphasis"># Curly braces are required.</span>
    <span class="docEmphasis">tom</span>

3   $ print <span class="docEmphStrong">${array[1]}</span>
    <span class="docEmphasis">dan</span>

4   $ print $<span class="docEmphStrong">{array[2]}</span>
    <span class="docEmphasis">bill</span>

5   $ print <span class="docEmphStrong">${array[*]}</span>     <span class="docEmphasis">#</span> <span class="docEmphasis">Display all elements.</span>
    <span class="docEmphasis">tom dan bill</span>

6   $ print <span class="docEmphStrong">${#array[*]}</span>    <span class="docEmphasis"># Display the number of elements.</span>
    3
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The first three elements of the array are assigned
      values. The index starts at zero.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the first array element,
      <span class="docEmphasis">tom,</span> is printed. Make sure you remember
      to surround the variable with curly braces. <span class="docEmphasis">
      $array[0]</span> would print <span class="docEmphasis">tom[0].</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the second element of the array,
      <span class="docEmphasis">dan,</span> is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of the third element of the array,
      <span class="docEmphasis">bill,</span> is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All elements in the array are printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The number of elements in the array are printed. An
      array can be declared with <span class="docEmphasis">typeset</span> if you
      know the size and type.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list119" class="docExampleTitle">Example 10.119 </h5>
<pre>(At The Command Line)
1  $ <span class="docEmphStrong">typeset –i ints[4]</span>     <span class="docEmphasis">#</span> <span class="docEmphasis">Declare an array of four integers.</span>
2  $ ints[0]=50
   $ ints[1]=75
   $ ints[2]=100
3  $ ints[3]=happy
   <span class="docEmphasis">ksh: happy: bad number</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      creates an array of <span class="docEmphasis">4</span> integers.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Integer values are assigned to the array.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A string value is assigned to the fourth element of the
      array, and the Korn shell sends a message to standard error.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><span class="docEmphStrong">Creating Arrays with the
<span class="docEmphasis">set</span> Command.</span> You can assign the values
of an array using the <span class="docEmphasis">set</span> command. The first
word after the <span class="docEmphasis">–A</span> option is the name of the
array; the rest of the words are the elements of the array.</p>
<h5 id="ch10list120" class="docExampleTitle">Example 10.120 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">set –A fruit apples pears peaches</span>

2   $ print <span class="docEmphStrong">${fruit[0]}</span>
    <span class="docEmphasis">apples</span>

3   $ print <span class="docEmphStrong">${fruit[*]}</span>
    <span class="docEmphasis">apples pears peaches</span>

4   $ <span class="docEmphStrong">fruit[1]=plums</span>

5   $ print <span class="docEmphStrong">${fruit[*]}</span>
    <span class="docEmphasis">apples plums peaches</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">set</span> command with
      the <span class="docEmphasis">–A</span> option creates an array. The name
      of the array, <span class="docEmphasis">fruit,</span> follows the
      <span class="docEmphasis">–A</span> option. Each of the elements of the
      <span class="docEmphasis">fruit</span> array follow its name.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Subscripts start at zero. Curly braces are required
      around the variable for it to be evaluated properly. The first element of
      the array is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When the asterisk is used as a subscript, all elements
      of the array are displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The second element of the array is reassigned the value
      <span class="docEmphasis">plums.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">All elements of the array are displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec32">10.2.10 Functions</h4>
<p class="docText">Korn shell functions are similar to those used in the Bourne
shell, and are used to modularize your program. A function is a collection of
one or more commands that can be executed simply by entering the function's
name, similar to a built-in command. Here is a review of some of the important
rules about using functions.</p>
<span style="FONT-WEIGHT: bold">
<ol class="docList" type="1">
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">The Korn shell executes built-in commands first, then
  functions, and then executables. Functions are read into memory once when they
  are defined, not every time they are referenced.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">A function must be defined before it is used; therefore, it
  is best to place function definitions at the beginning of the script.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">The function runs in the current environment; it shares
  variables with the script that invoked it, and lets you pass arguments by
  setting them as positional parameters. The present working directory is that
  of the calling script. If you change the directory in the function, it will be
  changed in the calling script.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">In the Korn shell, you can declare local variables in the
  function using the <span class="docEmphasis">typeset</span> command.
  <span class="docEmphasis">Ksh</span> functions can be exported to subshells.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">The <span class="docEmphasis">return</span> statement
  returns the exit status of the last command executed within the function or
  the value of the argument given, and cannot exceed a value of 255.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">To list functions and definitions, use the preset alias,
  <span class="docEmphasis">functions.</span></span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Traps are local to functions and will be reset to their
  previous value when the function exits (not so with the Bourne shell).</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Functions can be recursive, that is, call themselves.
  Recursion should be handled carefully. The Korn shell will warn you otherwise
  with the message, <span class="docEmphasis">recursion too deep.</span></span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Functions can be autoloaded; they are defined only if
  referenced. If never referenced, they are not loaded into memory.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Versions of the Korn shell that are more recent than 1988
  also support discipline functions, passing variables by reference, and
  compound variables. A built-in command is no longer found before a function of
  the same name. In older versions it was necessary to use a combination of
  aliases and functions to write a function that would override a built-in
  command.<span id="ENB10-8"><a class="docLink" href="#EN10-8"><sup>[8]</sup></a></span></p>
  </span></li>
</ol>
</span>
<p class="docText"><b>Defining Functions.</b> A function must be defined before
it can be invoked. Korn shell functions are defined with the keyword
<span class="docEmphasis">function</span> preceding the function name. The curly
braces must have a space on the inside of each brace. (Please see Bourne shell
functions for the older-style function definition, still compatible in Korn
shell scripts.)</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>function function_name { commands; commands; }
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list121" class="docExampleTitle">Example 10.121 </h5>
<pre>function usage { print &quot;Usage $0 [-y] [-g] &quot; ; exit 1; }
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">The function name is <span class="docEmphasis">usage.</span>
    It is used to print a diagnostic message and exit the script if the script
    does not receive the proper arguments, either <span class="docEmphasis">–y</span>
    or <span class="docEmphasis">–g.</span></td>
  </tr>
</table>

<p class="docText"><b>Listing and Unsetting Functions.</b> To list local
function definitions, type: <span class="docEmphasis">typeset –f.</span> To list
exported function definitions, type: <span class="docEmphasis">typeset –fx.</span>
To unset a function, type: <span class="docEmphasis">unset –f function_name.</span>
See the <span class="docEmphasis">typeset</span> command,
<a class="docLink" href="#ch10table30">Table 10.30</a>.</p>
<p class="docText"><b>Local Variables and the Return Value.</b> The
<span class="docEmphasis">typeset</span> command can be used to create local
variables. These variables will be known only in the function where they are
created. Once out of the function, the local variables are undefined.</p>
<p class="docText">The return value of a function is really just the value of
the exit status of the last command in the script unless a specific
<span class="docEmphasis">return</span> command is used. If a value is assigned
to the <span class="docEmphasis">return</span> command, that value is stored in
the <span class="docEmphasis">?</span> variable. It can hold an integer value
between 0 and 255. Because the <span class="docEmphasis">return</span> command
is limited to returning only integer values, you can use command substitution to
return the output of a function and assign the output to a variable, just as you
would if getting the output of a UNIX command.</p>
<h5 id="ch10list122" class="docExampleTitle">Example 10.122 </h5>
<p class="docText">
<img alt="graphics/10prfig05.gif" src="10prfig05.gif" border="0" width="500" height="326"></p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function called <span class="docEmphasis">increment</span>
      is defined.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      defines the variable <span class="docEmphasis">sum</span> to be local to
      this function.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">return</span> built-in
      command, when given an argument, returns to the main script after the line
      where the function was invoked and stores its argument in the
      <span class="docEmphasis">?</span> variable. In the script, the
      <span class="docEmphasis">increment</span> function is called with an
      argument.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">increment</span> function
      is called with an argument of <span class="docEmphasis">5.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The exit status of the function is stored in
      <span class="docEmphasis">?</span> unless an explicit argument is given to
      the <span class="docEmphasis">return</span> command. The
      <span class="docEmphasis">return</span> command argument specifies a
      return status for the function, its value is stored in the
      <span class="docEmphasis">?</span> variable, and it must be an integer
      between 0 and 255.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Since <span class="docEmphasis">sum</span> was defined
      as a local variable in the function <span class="docEmphasis">increment,</span>
      it is not defined in the script that invoked the function. Nothing is
      printed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list123" class="docExampleTitle">Example 10.123 </h5>
<pre>(Using Command Substitution)
(The Script)
    <span class="docEmphasis"># Scriptname: do_square</span>
    #!/bin/ksh
1   <span class="docEmphStrong">function square</span> {
     (( sq = $1 * $1 ))
       print &quot;Number to be squared is $1.&quot;
2      print &quot;The result is $sq &quot;
    }

3   read number?&quot;Give me a number to square. &quot;
4   <span class="docEmphStrong">value_returned=$(square $number)</span>
5   print $value_returned

(The Output)
    $ <span class="docEmphStrong">do_square</span>
5   <span class="docEmphasis">Number to be squared is</span> <span class="docEmphBoldItalic">10</span><span class="docEmphasis">. The result is 100</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function called <span class="docEmphasis">square</span>
      is defined. It will multiply its argument times itself.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The result of squaring the number is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked for input.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">square</span> is
      called with a number (input from the user) as its argument. Command
      substitution is performed because the function is enclosed in parentheses
      preceded by a <span class="docEmphasis">$.</span> The output of the
      function (both of its <span class="docEmphasis">print</span> statements)
      is assigned to the variable <span class="docEmphasis">value_returned.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The command substitution removes the newline between
      the strings <span class="docEmphasis">Number to be squared is</span> and
      <span class="docEmphasis">The result is 100.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Exported Functions.</b> Function definitions are not
inherited by subshells unless you define them in the <span class="docEmphasis">
ENV</span> file with the <span class="docEmphasis">typeset</span> command, e.g.,
<span class="docEmphasis">typeset –fx function_names.</span></p>
<p class="docText">You can export functions with <span class="docEmphasis">
typeset –fx</span> from the current Korn shell to a script, or from one script
to another, but not from one invocation of <span class="docEmphasis">ksh</span>
to the next (e.g., a separate invocation means that if you type
<span class="docEmphasis">ksh</span> at the prompt, a brand new shell is started
up). Exported function definitions will not be inherited by the new shell.</p>
<h5 id="ch10list124" class="docExampleTitle">Example 10.124 </h5>
<pre>(The First Script)
    $ <span class="docEmphStrong">cat calling_script</span>
    #!/bin/ksh

1   <span class="docEmphStrong">function sayit { print &quot;How are ya $1?&quot; ; }</span>
2   <span class="docEmphStrong">typeset –fx sayit</span>   <span class="docEmphasis"># Export sayit to other scripts</span>
3   <span class="docEmphStrong">sayit Tommy</span>
4   print &quot;Going to other script&quot;
5   other_script        <span class="docEmphasis"># Call other_script</span>
    print &quot;Back in calling script&quot;
****************************************************************
(The Second Script)
    $ <span class="docEmphStrong">cat other_script</span>
           <span class="docEmphasis">NOTE: This script cannot be invoked with #!/bin/ksh</span>
6   print &quot;In other script &quot;
7   <span class="docEmphStrong">sayit Dan</span>
8   print &quot;Returning to calling script&quot;

(The Output)
    $ calling_script
3   <span class="docEmphasis">How are ya Tommy?</span>
4   <span class="docEmphasis">Going to other script</span>
6   <span class="docEmphasis">In other script</span>
7   <span class="docEmphasis">How are ya Dan?</span>
8   <span class="docEmphasis">Returning to calling script</span>
    <span class="docEmphasis">Back in calling script</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">sayit</span> is
      defined. It will accept one argument to be stored in
      <span class="docEmphasis">$1.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      with the <span class="docEmphasis">–fx</span> option allows the function
      to be exported to any script called from this script.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">sayit</span> is
      invoked with <span class="docEmphasis">Tommy</span> as an argument.
      <span class="docEmphasis">Tommy</span> will be stored in
      <span class="docEmphasis">$1</span> in the function.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">After the <span class="docEmphasis">sayit</span>
      function terminates, the program resumes here.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The script, called <span class="docEmphasis">
      other_script,</span> is executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">We are now in the other script. This script is called
      from the first script, <span class="docEmphasis">sayit.</span> It cannot
      start with the line <span class="docEmphasis">#!/bin/ksh</span> because
      this line causes a <span class="docEmphasis">ksh</span> subshell to be
      started, and exporting functions does not work if a separate Korn shell is
      invoked.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">sayit</span> is
      invoked. <span class="docEmphasis">Dan i</span>s passed as an argument,
      which will be stored in <span class="docEmphasis">$1</span> in the
      function.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">After this line is printed, <span class="docEmphasis">
      other_script</span> terminates and control goes back to the calling script
      at the line where it left off after the function was invoked.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec33">10.2.11 The <span class="docEmphasis">typeset</span>
Command and Function Options</h4>
<p class="docText">The <span class="docEmphasis">typeset</span> command is used
to display function attributes.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table30" class="docTableTitle">Table 10.30. <span class="docEmphasis">typeset</span>
  and Function Options</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Option</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">What
    It Does</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –f</span>
    </td>
    <td class="docTableCell" vAlign="top">Displays all functions and their
    values. Must have a history file, as all function definitions are stored
    there. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset +f</span>
    </td>
    <td class="docTableCell" vAlign="top">Displays just function names. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –fx</span>
    </td>
    <td class="docTableCell" vAlign="top">Displays all function definitions that
    will be exported across shell scripts, but not as a separate invocation of
    <span class="docEmphasis">ksh.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –fu
    func</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">func</span>
    is the name of a function that has not yet been defined. </td>
  </tr>
</table>

<p class="docText"><b>Autoloaded Functions.</b> An autoloaded function is not
loaded into your program until you reference it. The autoloaded function can be
defined in a file somewhere else and the definition will not appear in your
script, allowing you to keep the script small and compact. To use autoload, you
need to set the <span class="docEmphasis">FPATH</span> variable in your
<span class="docEmphasis">ENV</span> file. The <span class="docEmphasis">FPATH</span>
variable contains a search path for directories containing function files. The
files in this directory have the same names as the functions defined within
them.</p>
<p class="docText">The <span class="docEmphasis">autoload</span> alias for
<span class="docEmphasis">typeset –fu</span> specifies that the function names
that have not yet been defined are to be autoloaded functions. After the
<span class="docEmphasis">autoload</span> command is executed with the function
as its argument, you must invoke the function to execute the commands contained
in it. The primary advantage of autoloading functions is better performance,
since the Korn shell does not have to read the function definition if it has
never been referenced.<span id="ENB10-9"><a class="docLink" href="#EN10-9"><sup>[9]</sup></a></span></p>
<h5 id="ch10list125" class="docExampleTitle">Example 10.125 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">mkdir functionlibrary</span>
2   $ cd functionlibrary
3   $ <span class="docEmphStrong">vi foobar</span>

(In Editor)
4   <span class="docEmphStrong">function foobar { pwd; ls; whoami; }</span>  <span class="docEmphasis"># function has the same</span>
                                          <span class="docEmphasis"># name as the file.</span>

(In .profile File)
5   <span class="docEmphStrong">export FPATH=$HOME/functionlibrary</span>    <span class="docEmphasis"># This path is searched for</span>
                                          <span class="docEmphasis"># functions.</span>

(In Your Script)
6   <span class="docEmphStrong">autoload foobar</span>
7   <span class="docEmphStrong">foobar</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Make a directory in which to store functions.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Go to the directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">foobar</span> is a file in
      <span class="docEmphasis">functionlibrary.</span> The file
      <span class="docEmphasis">foobar</span> contains the definition of
      function <span class="docEmphasis">foobar.</span> The filename and
      function name must match.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">foobar</span> is
      defined in the file called <span class="docEmphasis">foobar.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the user's <span class="docEmphasis">.profile</span>
      initialization file, the <span class="docEmphasis">FPATH</span> variable
      is assigned the path where the functions are stored. This is the path the
      Korn shell will search when autoloading a function.
      <span class="docEmphasis">FPATH</span> is exported.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In your script, the function <span class="docEmphasis">
      foobar</span> is brought into the program's memory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">foobar</span> is
      invoked.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText">A number of functions can be stored in one file; for example,
calculation functions may be contained in a file called
<span class="docEmphasis">math.</span> Since the function must have the same
name as the file in which it is stored, you may create hard links to the
function file. Each function name will be a link to the file in which the
function is defined. For example, if a function in the <span class="docEmphasis">
math</span> file is called <span class="docEmphasis">square,</span> use the UNIX
<span class="docEmphasis">ln</span> command to give the
<span class="docEmphasis">math</span> file another name,
<span class="docEmphasis">square.</span> Now the <span class="docEmphasis">math</span>
file and <span class="docEmphasis">square</span> file can be referenced, and in
either case you are referencing the file by the corresponding function name. Now
the <span class="docEmphasis">square</span> function can be autoloaded by its
own name.</p>
<h5 id="ch10list126" class="docExampleTitle">Example 10.126 </h5>
<pre>(The Command Line)
1   $ <span class="docEmphStrong">ln math square add divide</span>
2   $ <span class="docEmphStrong">ls -i</span>
    <span class="docEmphasis">12256 add</span>
    <span class="docEmphasis">12256 math</span>
    <span class="docEmphasis">12256 square</span>
    <span class="docEmphasis">12256 divide</span>
3   $ <span class="docEmphStrong">autoload square; square</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The UNIX <span class="docEmphasis">ln</span> (link)
      command lets you give a file alternate names. The
      <span class="docEmphasis">math</span> file and <span class="docEmphasis">
      square</span> are the same file. The link count is incremented by one for
      each link created.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A listing shows that all files have the same inode
      number, meaning they are all one file but can be accessed with different
      names.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Now, when the <span class="docEmphasis">square</span>
      file is autoloaded, the function <span class="docEmphasis">square</span>
      has the same name and will be invoked. None of the other functions defined
      in the file can be referenced until they, in turn, have been specifically
      autoloaded by name.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec34">10.2.12 Trapping Signals</h4>
<p class="docText">While your program is running, if you press Control-C or
Control-\, the program terminates as soon as the signal arrives. There are times
when you would rather not have the program terminate immediately after the
signal arrives. You could arrange to ignore the signal and keep running, or
perform some sort of cleanup operation before actually exiting the script. The
<span class="docEmphasis">trap</span> command allows you to control the way a
program behaves when it receives a signal.</p>
<p class="docText">A signal is defined as an asynchronous message that consists
of a number that can be sent from one process to another, or by the operating
system to a process if certain keys are pressed or if something exceptional
happens.<span id="ENB10-10"><a class="docLink" href="#EN10-10"><sup>[10]</sup></a></span>
The <span class="docEmphasis">trap</span> command tells the shell to terminate
the command currently in execution upon the receipt of a signal. If the
<span class="docEmphasis">trap</span> command is followed by commands within
single quotes, those commands will be executed upon receipt of a specified
signal. Use the command <span class="docEmphasis">kill –l</span> to get a list
of all signals and the numbers corresponding to them.</p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">FORMAT</h2>
    <pre>trap 'command; command' signal
</pre>
    </td>
  </tr>
</table>

<h5 id="ch10list127" class="docExampleTitle">Example 10.127 </h5>
<pre><span class="docEmphStrong">trap 'rm tmp*$$; exit 1' 1 2 15</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">When any of the signals <span class="docEmphasis">1</span>
    (hangup), <span class="docEmphasis">2</span> (interrupt), or
    <span class="docEmphasis">15</span> (software termination) arrives, remove
    all the <span class="docEmphasis">tmp</span> files and then
    <span class="docEmphasis">exit.</span></td>
  </tr>
</table>

<p class="docText">If an interrupt comes in while the script is running, the
<span class="docEmphasis">trap</span> command lets you handle the interrupt
signal in several ways. You can let the signal behave normally (default), ignore
the signal, or create a handler function to be called when the signal arrives.
See <a class="docLink" href="#ch10table31">Table 10.31</a> for a list of signal
numbers and their corresponding names.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table31" class="docTableTitle">Table 10.31. Signals <sup class="docFootnote">
  <a class="docLink" href="#ch10tabfn02">[a]</a></sup> (<span class="docEmphasis">Type:
  kill –1</span>)</h5>
  </caption>
  <colgroup span="3" align="left">
  </colgroup>
  <tr>
    <td class="docTableCell" vAlign="top">1) <span class="docEmphasis">HUP</span>
    </td>
    <td class="docTableCell" vAlign="top">12) <span class="docEmphasis">SYS</span>
    </td>
    <td class="docTableCell" vAlign="top">23) <span class="docEmphasis">POLL</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">2) <span class="docEmphasis">INT</span>
    </td>
    <td class="docTableCell" vAlign="top">13) <span class="docEmphasis">PIPE</span>
    </td>
    <td class="docTableCell" vAlign="top">24) <span class="docEmphasis">XCPU</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">3) <span class="docEmphasis">QUIT</span>
    </td>
    <td class="docTableCell" vAlign="top">14) <span class="docEmphasis">ALRM</span>
    </td>
    <td class="docTableCell" vAlign="top">25) <span class="docEmphasis">XFSZ</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">4) <span class="docEmphasis">ILL</span>
    </td>
    <td class="docTableCell" vAlign="top">15) <span class="docEmphasis">TERM</span>
    </td>
    <td class="docTableCell" vAlign="top">26) <span class="docEmphasis">VTALRM</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">5) <span class="docEmphasis">TRAP</span>
    </td>
    <td class="docTableCell" vAlign="top">16) <span class="docEmphasis">URG</span>
    </td>
    <td class="docTableCell" vAlign="top">27) <span class="docEmphasis">PROF</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">6) <span class="docEmphasis">IOT</span>
    </td>
    <td class="docTableCell" vAlign="top">17) <span class="docEmphasis">STOP</span>
    </td>
    <td class="docTableCell" vAlign="top">28) <span class="docEmphasis">WINCH</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">7) <span class="docEmphasis">EMT</span>
    </td>
    <td class="docTableCell" vAlign="top">18) <span class="docEmphasis">TSTP</span>
    </td>
    <td class="docTableCell" vAlign="top">29) <span class="docEmphasis">LOST</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">8) <span class="docEmphasis">FPE</span>
    </td>
    <td class="docTableCell" vAlign="top">19) <span class="docEmphasis">CONT</span>
    </td>
    <td class="docTableCell" vAlign="top">30) <span class="docEmphasis">USR1</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">9) <span class="docEmphasis">KILL</span>
    </td>
    <td class="docTableCell" vAlign="top">20) <span class="docEmphasis">CHLD</span>
    </td>
    <td class="docTableCell" vAlign="top">31) <span class="docEmphasis">USR2</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">10) <span class="docEmphasis">BUS</span>
    </td>
    <td class="docTableCell" vAlign="top">21) <span class="docEmphasis">TTIN</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">11) <span class="docEmphasis">SEGV</span>
    </td>
    <td class="docTableCell" vAlign="top">22) <span class="docEmphasis">TTOU</span>
    </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
  </tr>
</table>

<blockquote>
  <p class="docFootnote"><sup><a name="ch10tabfn02">[a]</a></sup> The output of
  this command may differ slightly with the operating system.</p>
</blockquote>
<p class="docText"><b>Pseudo or Fake Signals.</b> The three fake signals are not
real signals, but are generated by the shell to help debug a program. They are
treated like real signals by the <span class="docEmphasis">trap</span> command
and defined in the same way. See <a class="docLink" href="#ch10table32">Table
10.32</a> for a list of pseudo signals.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table32" class="docTableTitle">Table 10.32. Korn Shell Fake Trap Signals</h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Signal</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">What
    It Does</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">DEBUG</span>
    </td>
    <td class="docTableCell" vAlign="top">Executes <span class="docEmphasis">
    trap</span> commands after every script command. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ERR</span>
    </td>
    <td class="docTableCell" vAlign="top">Executes <span class="docEmphasis">
    trap</span> commands if any command in the script returns a nonzero exit
    status. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">0</span> or
    <span class="docEmphasis">EXIT</span> </td>
    <td class="docTableCell" vAlign="top">Executes <span class="docEmphasis">
    trap</span> commands if the shell exits. </td>
  </tr>
</table>

<p class="docText">Signal names such as <span class="docEmphasis">HUP</span> and
<span class="docEmphasis">INT</span> are normally prefixed with
<span class="docEmphasis">SIG,</span> for example, <span class="docEmphasis">
SIGHUP,</span> <span class="docEmphasis">SIGINT,</span> and so forth. The Korn
shell allows you to use symbolic names for the signals, which are the signal
names without the <span class="docEmphasis">SIG</span> prefix, or you can use
the numeric value for the signal. See <a class="docLink" href="#ch10list128">
Example 10.128</a>.</p>
<p class="docText"><b>Resetting Signals.</b> To reset a signal to its default
behavior, the <span class="docEmphasis">trap</span> command is followed by the
signal name or number. <span class="docEmphasis">Traps</span> set in functions
are local to functions<span class="docEmphasis">;</span> that is, they are not
known outside the function where they were set.</p>
<h5 id="ch10list128" class="docExampleTitle">Example 10.128 </h5>
<pre><span class="docEmphStrong">trap 2</span>  <span class="docEmphasis">or</span>  <span class="docEmphStrong">trap INT</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">Resets the default action for signal
    <span class="docEmphasis">2,</span> <span class="docEmphasis">SIGINT.</span>
    The default action is to kill the process when the interrupt key (Control-C)
    is pressed.</td>
  </tr>
</table>

<p class="docText"><b>Ignoring Signals.</b> If the <span class="docEmphasis">
trap</span> command is followed by a pair of empty quotes, the signals listed
will be ignored by the process.</p>
<h5 id="ch10list129" class="docExampleTitle">Example 10.129 </h5>
<pre><span class="docEmphStrong">trap &quot; &quot; 1 2</span>    <span class="docEmphasis">or</span>    <span class="docEmphStrong">trap &quot;&quot; HUP INT</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <p class="docText">Signals <span class="docEmphasis">1</span> (<span class="docEmphasis">SIGHUP</span>)
    and <span class="docEmphasis">2</span> (<span class="docEmphasis">SIGINT</span>)
    will be ignored by the shell process.</td>
  </tr>
</table>

<p class="docText"><b>Listing Traps.</b> To list all traps and the commands
assigned to them, type <span class="docEmphasis">trap.</span></p>
<h5 id="ch10list130" class="docExampleTitle">Example 10.130 </h5>
<pre>(The Script)
    <span class="docEmphasis">#</span>!/bin/ksh
    <span class="docEmphasis"># Scriptname: trapping</span>
    <span class="docEmphasis"># Script to illustrate the trap command and signals</span>
    <span class="docEmphasis"># Can use the signal numbers or ksh abbreviations seen</span>
    <span class="docEmphasis"># below. Cannot use SIGINT, SIGQUIT, etc.</span>
1   <span class="docEmphStrong">trap 'print &quot;Control–C will not terminate $PROGRAM.&quot;' INT</span>
2   <span class="docEmphStrong">trap 'print &quot;Control–\ will not terminate $PROGRAM.&quot;' QUIT</span>
3   <span class="docEmphStrong">trap 'print &quot;Control–Z will not terminate $PROGRAM.&quot;' TSTP</span>
4   print &quot;Enter any string after the prompt.\
    When you are ready to exit, type \&quot;stop\&quot;.&quot;
5   <span class="docEmphStrong">while true</span>
    do
6      print –n &quot;Go ahead...&gt; &quot;
7      read
8      if [[ $REPLY = [Ss]top ]]
       then
9         break
       fi
10  <span class="docEmphStrong">done</span>

(The Output)
    $ <span class="docEmphStrong">trapping</span>
4   <span class="docEmphasis">Enter any string after the prompt.</span>
    <span class="docEmphasis">When you are ready to exit, type &quot;stop&quot;.</span>
6   <span class="docEmphasis">Go ahead...&gt; this is it</span><span class="docEmphBoldItalic">^C</span>
1   <span class="docEmphBoldItalic">Control–C will not terminate trapping.</span>
6   <span class="docEmphasis">Go ahead...&gt; this is it again</span><span class="docEmphBoldItalic">^Z</span>
3   <span class="docEmphBoldItalic">Control–Z will not terminate trapping.</span>
6   <span class="docEmphasis">Go ahead...&gt; this is never it</span><span class="docEmphBoldItalic">^\</span>
2   <span class="docEmphBoldItalic">Control–\ will not terminate trapping.</span>
6   <span class="docEmphasis">Go ahead...&gt;</span> <span class="docEmphBoldItalic">stop</span>
    $
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The first <span class="docEmphasis">trap</span> catches
      the <span class="docEmphasis">INT</span> signal, Control-C. If Control-C
      is pressed while the program is running, the command enclosed in quotes
      will be executed. Instead of aborting, the program will print
      <span class="docEmphasis">Control-C will not terminate trapping</span> and
      continue to prompt the user for input.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The second <span class="docEmphasis">trap</span>
      command will be executed when the user presses Control-\, the
      <span class="docEmphasis">QUIT</span> signal. The string
      <span class="docEmphasis">Control-\ will not terminate trapping</span>
      will be displayed and the program will continue to run. This signal,
      <span class="docEmphasis">SIGQUIT</span> by default, kills the process and
      produces a core file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The third <span class="docEmphasis">trap</span> command
      will be executed when the user presses Control-Z, the
      <span class="docEmphasis">TSTP</span> signal. The string
      <span class="docEmphasis">Control-Z will not terminate trapping</span>
      will be displayed, and the program will continue to run. This signal
      normally causes the program to be suspended in the background if job
      control is implemented.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is prompted for input.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> loop is
      entered.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The string <span class="docEmphasis">Go ahead…&gt;</span>
      is printed and the program waits for input (see <span class="docEmphasis">
      read</span> next line).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command
      assigns user input to the built-in <span class="docEmphasis">REPLY</span>
      variable.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the value of <span class="docEmphasis">REPLY</span>
      matches <span class="docEmphasis">Stop</span> or <span class="docEmphasis">
      stop,</span> the <span class="docEmphasis">break</span> command causes the
      loop to exit and the program will terminate. Entering
      <span class="docEmphasis">Stop</span> or <span class="docEmphasis">stop</span>
      is the only way we will get out of this program unless it is killed with
      the <span class="docEmphasis">kill</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">break</span> command
      causes the body of the loop to be exited.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword marks
      the end of the loop.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list131" class="docExampleTitle">Example 10.131 </h5>
<p class="docText">
<img alt="graphics/10prfig06.gif" src="10prfig06.gif" border="0" width="497" height="549"></p>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">ERR</span> (fake or
      pseudo) signal will print the message in double quotes any time a command
      in the program returns a nonzero exit status, that is, fails.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">typeset</span> command
      with the <span class="docEmphasis">–i</span> option creates an integer
      variable, <span class="docEmphasis">number,</span> which can only be
      assigned integers.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The exit status of the <span class="docEmphasis">true</span>
      command is always zero; the body of the <span class="docEmphasis">while</span>
      loop is entered.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked to type in an integer.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command reads
      user input and assigns it to the <span class="docEmphasis">number</span>
      variable. The number must be an integer; if not, an error message will be
      sent to <span class="docEmphasis">/dev/null.</span> The
      <span class="docEmphasis">–r</span> option to the
      <span class="docEmphasis">read</span> command allows you to enter a
      negative number (starting with the minus sign).</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the exit status from the <span class="docEmphasis">
      read</span> command is zero, a number was entered, and the
      <span class="docEmphasis">if</span> statements will be executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">break</span> command is
      executed and the loop exits.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">trap</span> for the fake
      Korn shell signal <span class="docEmphasis">ERR</span> is unset.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">When <span class="docEmphasis">grep</span> fails, it
      returns a nonzero exit status; if we had not unset the
      <span class="docEmphasis">ERR</span> trap, the script would have printed
      <span class="docEmphasis">You gave me a non-integer. Try again. So long</span>
      if the <span class="docEmphasis">grep</span> failed to find
      <span class="docEmphasis">ZOMBIE</span> in the <span class="docEmphasis">
      /etc/passwd</span> file.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This line is printed if the <span class="docEmphasis">
      grep</span> failed. Note that if a floating point number such as 4.5 is
      entered, the number is truncated to an integer.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText"><b>Traps and Functions.</b> If <span class="docEmphasis">trap</span>
is used in a function, the <span class="docEmphasis">trap</span> and its
commands are local to the function.</p>
<h5 id="ch10list132" class="docExampleTitle">Example 10.132 </h5>
<pre>(The Script)
    #!/bin/ksh
1   <span class="docEmphStrong">function trapper</span> {
       print &quot;In trapper&quot;
2      <span class="docEmphStrong">trap 'print &quot;Caught in a trap!&quot;' INT</span>
       print &quot;Got here.&quot;
       sleep 25
    }
3   while <span class="docEmphStrong">:</span>
    do
       print &quot;In the main script&quot;
4      <span class="docEmphStrong">trapper</span>   <span class="docEmphasis"># Call the function</span>
5      print &quot;Still in main&quot;
       sleep 5
       print &quot;Bye&quot;
    done
------------------------------------------------------
(The Output)
$ <span class="docEmphStrong">functrap</span>
<span class="docEmphasis">In the main script</span>
<span class="docEmphasis">In trapper</span>
<span class="docEmphasis">Got here.</span>
<span class="docEmphasis">^CCaught in a trap!</span>
$
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The function <span class="docEmphasis">trapper</span>
      is defined. It contains the <span class="docEmphasis">trap</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">trap</span> command will
      be executed if Control-C is entered. The <span class="docEmphasis">print</span>
      command within the <span class="docEmphasis">trap</span> is executed and
      the program continues execution. Control-C is entered while the
      <span class="docEmphasis">sleep</span> command is running. Normally, the
      program will continue to run just after the command where it was
      interrupted (with the exception of the <span class="docEmphasis">sleep</span>
      command, which causes the program to abort). The <span class="docEmphasis">
      trap</span> has no effect on lines starting after
      <span class="docEmphasis">4.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">In the main part of the script, a
      <span class="docEmphasis">while</span> loop is started. The colon is a
      do-nothing command that always returns a zero exit status. The loop will
      go forever.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Once in the loop, the function
      <span class="docEmphasis">trapper</span> is called.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">trap</span> command
      within the <span class="docEmphasis">trapper</span> function will have no
      effect in this part of the program because the trap is local to the
      function. If the function exits normally (i.e., ^C is not pressed),
      execution will continue here. The default behavior for ^C will cause the
      script to abort if the signal is sent here or to any of the lines that
      follow.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec35">10.2.13 Coprocesses</h4>
<p class="docText">A coprocess is a special two-way pipeline that allows shell
scripts to write to the standard input of another command and to read from its
standard output. This provides a way to create a new interface for an existing
program. The append operator, <span class="docEmphasis">|&amp;,</span> is placed at
the end of the command to initiate the command as a coprocess. Normal
redirection and background processing should not be used on coprocesses. The
<span class="docEmphasis">print</span> and <span class="docEmphasis">read</span>
commands require a <span class="docEmphasis">–p</span> switch to read from and
write to a coprocess. The output must be sent to standard output and have a
newline at the end of each message of output. The standard output must be
flushed after each message is sent to standard output. You can run multiple
coprocesses by using the <span class="docEmphasis">exec</span> command with the
<span class="docEmphasis">&gt;&amp;p</span> or <span class="docEmphasis">&lt;&amp;p</span>
operator. To open file descriptor <span class="docEmphasis">4</span> as a
coprocess, you would enter <span class="docEmphasis">exec 4&gt;&amp;p.</span></p>
<h5 id="ch10list133" class="docExampleTitle">Example 10.133 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: mycalculator</span>
    <span class="docEmphasis"># A simple calculator –– uses the bc command to perform the</span>
    <span class="docEmphasis"># calculations</span>
    <span class="docEmphasis"># Since the shell performs operations on integers only,</span>
    <span class="docEmphasis"># this program allows</span>
    <span class="docEmphasis"># you to use floating point numbers by writing to and reading</span>
    <span class="docEmphasis"># from the bcprogram.</span>

1   cat &lt;&lt; EOF
    **************************************************
2        WELCOME TO THE CALCULATOR PROGRAM
    *************************************************
3   EOF

4   <span class="docEmphStrong">bc |&amp;</span>                <span class="docEmphasis"># Open coprocess</span>

5   while true
    do
6       print &quot;Select the letter for one of the operators below &quot;
7       cat &lt;&lt;- EOF
            a) +
            s) –
            m) *
            d) /
            e) ^
        EOF
8       read op
9       case $op in
            a) op=&quot;+&quot;;;
            s) op=&quot;–&quot;;;
            m) op=&quot;*&quot;;;
            d) op=&quot;/&quot;;;
            e) op=&quot;^&quot;;;
            *) print &quot;Bad operator&quot;
                   continue;;
        esac
10      <span class="docEmphStrong">print –p scale=3</span>                     <span class="docEmphasis"># write to the coprocess</span>
11      print &quot;Please enter two numbers:  &quot;  <span class="docEmphasis"># write to standard out</span>
12      <span class="docEmphStrong">read num1 num2</span>                       <span class="docEmphasis"># read from standard in</span>
13      <span class="docEmphStrong">print –p &quot;$num1&quot; &quot;$op&quot; &quot;$num2&quot;</span>       <span class="docEmphasis"># write to the coprocess</span>
14      <span class="docEmphStrong">read –p result</span>                       <span class="docEmphasis"># read from the coprocess</span>
15      print $result
16      print –n &quot;Continue (y/n)? &quot;
17      read answer
18      case $answer in
        [Nn]* )
19         break;;
        esac
20  done
21  print Good–bye

(The Output)
$ <span class="docEmphStrong">mycalculator</span>
    <span class="docEmphasis">**************************************************</span>
1        <span class="docEmphasis">WELCOME TO THE CALCULATOR PROGRAM</span>
    <span class="docEmphasis">*************************************************</span>
6   <span class="docEmphasis">Select one of the operators below</span>
7        <span class="docEmphasis">a) +</span>
         <span class="docEmphasis">s) –</span>
         <span class="docEmphasis">m) *</span>
         <span class="docEmphasis">d) /</span>
         <span class="docEmphasis">e) ^</span>
    <span class="docEmphBoldItalic">e</span>
11  <span class="docEmphasis">Please enter two numbers:</span>
    <span class="docEmphBoldItalic">2.3 4</span>
    <span class="docEmphasis">27.984</span>
16  <span class="docEmphasis">Continue (y/n)?</span> <span class="docEmphBoldItalic">y</span>
<span class="docEmphasis">6   Select one of the operators below</span>
<span class="docEmphasis">7        a) +</span>
         <span class="docEmphasis">s) –</span>
         <span class="docEmphasis">m) *</span>
         <span class="docEmphasis">d) /</span>
         <span class="docEmphasis">e) ^</span>
    <span class="docEmphBoldItalic">d</span>
<span class="docEmphasis">11  Please enter two numbers:</span>
    <span class="docEmphBoldItalic">2.1 4.6</span>
    <span class="docEmphasis">0.456</span>
16  Continue (y/n)? <span class="docEmphBoldItalic">y</span>
<span class="docEmphasis">6   Select one of the operators below</span>
<span class="docEmphasis">7       a) +</span>
        <span class="docEmphasis">s) –</span>
        <span class="docEmphasis">m) *</span>
        <span class="docEmphasis">d) /</span>
        <span class="docEmphasis">e) ^</span>
    <span class="docEmphBoldItalic">m</span>
11  <span class="docEmphasis">Please enter two numbers:</span>
    <span class="docEmphBoldItalic">4 5</span>
    <span class="docEmphasis">20</span>
16  <span class="docEmphasis">Continue (y/n)?</span> <span class="docEmphBoldItalic">n</span>
    <span class="docEmphasis">Good–bye</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">here</span>
      <span class="docEmphasis">document</span> is used to display a menu.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This text is printed as a header to the menu below.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">EOF is a user-defined terminator, marking the end of
      the <span class="docEmphasis">here</span> <span class="docEmphasis">
      document.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">bc</span> command (desk
      calculator) is opened as a coprocess. It is executed in the background.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">A <span class="docEmphasis">while</span> loop is
      started. Since the <span class="docEmphasis">true</span> command always
      returns a successful exit status of 0, the loop will continue indefinitely
      until a break or exit is reached.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is prompted to select an item from a menu to
      be displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Another <span class="docEmphasis">here</span>
      <span class="docEmphasis">document</span> displays a list of math
      operations the user can choose for the <span class="docEmphasis">bc</span>
      program.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command
      assigns user input to the variable <span class="docEmphasis">op.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command
      matches for one of the <span class="docEmphasis">op</span> values and
      assigns an operator to <span class="docEmphasis">op.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span> command,
      with the <span class="docEmphasis">–p</span> option, pipes output,
      <span class="docEmphasis">scale=3,</span> to the coprocess, the
      <span class="docEmphasis">b</span>c command. The <span class="docEmphasis">
      bc</span> command accepts the <span class="docEmphasis">print</span>
      output as input and sets the <span class="docEmphasis">scale</span> to
      <span class="docEmphasis">3.</span> (The <span class="docEmphasis">scale</span>
      defines the number of significant digits to the right of the decimal point
      in a number that will be displayed by <span class="docEmphasis">bc.</span>
      )</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is prompted to enter two numbers.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">read</span> command
      assigns user input to the variables <span class="docEmphasis">num1</span>
      and <span class="docEmphasis">num2.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">print</span>
      <span class="docEmphasis">–p</span> command sends the arithmetic
      expression to the <span class="docEmphasis">bc</span> coprocess.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The shell reads from the <span class="docEmphasis">bc</span>
      coprocess (<span class="docEmphasis">read –p</span>) and assigns the input
      to the variable <span class="docEmphasis">result.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The result of the calculation (<span class="docEmphasis">$result</span>)
      is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user is asked about continuing.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The user enters input. It is assigned to the variable
      <span class="docEmphasis">answer.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command
      evaluates the variable <span class="docEmphasis">answer.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the user had entered <span class="docEmphasis">No</span>
      or <span class="docEmphasis">no</span> or <span class="docEmphasis">nope,</span>
      etc., the <span class="docEmphasis">break</span> command would be
      executed, and the <span class="docEmphasis">while</span> loop would be
      terminated with control sent to line 21.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">done</span> keyword marks
      the end of the <span class="docEmphasis">while</span> loop.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">This line is printed when the loop terminates.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec36">10.2.14 Debugging</h4>
<p class="docText">By turning on the <span class="docEmphasis">noexec</span>
option or using the <span class="docEmphasis">–n</span> argument to the
<span class="docEmphasis">ksh</span> command, you can check the syntax of your
scripts without really executing any of the commands. If there is a syntax error
in the script, the shell will report the error. If there are no errors, nothing
is displayed.</p>
<p class="docText">The most commonly used method for debugging scripts is to
turn on the <span class="docEmphasis">xtrace</span> option or to use the
<span class="docEmphasis">ksh</span> command with the <span class="docEmphasis">
–x</span> option. These options allow an execution trace of your script. Each
command from your script is displayed after variable substitution has been
performed, and then the command is executed. When a line from your script is
displayed, it is preceded with the value of the PS4 prompt, a plus (+) sign. The
PS4 prompt can be changed.</p>
<p class="docText">With the <span class="docEmphasis">verbose</span> option
turned on, or by invoking the Korn shell with the <span class="docEmphasis">–v</span>
option (<span class="docEmphasis">ksh –v scriptname</span>), each line of the
script will be displayed, just as it was typed in the script, and then executed.
See <a class="docLink" href="#ch10table33">Table 10.33</a> for debug commands.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table33" class="docTableTitle">Table 10.33. Debug Commands and Options</h5>
  </caption>
  <colgroup span="3" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">How
    It Works</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ksh –x
    scriptname</span> </td>
    <td class="docTableCell" vAlign="top">Invokes <span class="docEmphasis">ksh</span>
    with <span class="docEmphasis">echo</span> option. </td>
    <td class="docTableCell" vAlign="top">Displays each line of the script after
    variable substitution and before execution. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ksh –v
    scriptname</span> </td>
    <td class="docTableCell" vAlign="top">Invokes <span class="docEmphasis">ksh</span>
    with <span class="docEmphasis">verbose</span> option. </td>
    <td class="docTableCell" vAlign="top">Displays each line of the script
    before execution, just as you typed it. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ksh –n
    scriptname</span> </td>
    <td class="docTableCell" vAlign="top">Invokes <span class="docEmphasis">ksh</span>
    with <span class="docEmphasis">noexec</span> option. </td>
    <td class="docTableCell" vAlign="top">Interprets but does not execute
    commands. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set –x or</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns on <span class="docEmphasis">
    echo</span> option. </td>
    <td class="docTableCell" vAlign="top">Traces execution in a script. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set –o
    xtrace</span> </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set +x</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns off <span class="docEmphasis">
    echo.</span> </td>
    <td class="docTableCell" vAlign="top">Turns off tracing. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset –ft</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns on tracing. </td>
    <td class="docTableCell" vAlign="top">Traces execution in a function. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">export
    PS4='$LINENO '</span> </td>
    <td class="docTableCell" vAlign="top">The <span class="docEmphasis">PS4</span>
    prompt by default is a <span class="docEmphasis">+.</span> </td>
    <td class="docTableCell" vAlign="top">You can reset the prompt. In this
    example, a line number will be printed for each line. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">trap 'print
    $LINENO ' DEBUG</span> </td>
    <td class="docTableCell" vAlign="top">Prints value of
    <span class="docEmphasis">$LINENO</span> for each line in the script. </td>
    <td class="docTableCell" vAlign="top">For each script command, the trap
    action is performed. See format for <span class="docEmphasis">trap.</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">trap 'print
    Bad input' ERR</span> </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">If a nonzero exit status is returned,
    the <span class="docEmphasis">trap</span> is executed. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">trap 'print
    Exiting from $0' EXIT</span> </td>
    <td class="docTableCell" vAlign="top">&nbsp;</td>
    <td class="docTableCell" vAlign="top">Prints message when script or function
    exits. </td>
  </tr>
</table>

<h5 id="ch10list134" class="docExampleTitle">Example 10.134 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Scriptname: todebug</span>
1   name=&quot;Joe Blow&quot;
2   if [[ $name = [Jj]* ]] then
        print Hi $name
    fi

    num=1
3   while (( num &lt; 5 ))
    do
4       (( num=num+1 ))
    done
5   print The grand total is $num

(The Output)
1   $ <span class="docEmphStrong">ksh –x todebug</span>
2   <span class="docEmphasis">+ name=Joe Blow</span>
    <span class="docEmphasis">+ [[ Joe Blow = [Jj]* ]]</span>
    <span class="docEmphasis">+ print Hi Joe Blow</span>
    <span class="docEmphasis">Hi Joe Blow</span>
    <span class="docEmphasis">+ num=1         The + is the PS4 prompt</span>
    <span class="docEmphasis">+ let num &lt; 5</span>
    <span class="docEmphasis">+ let num=num+1</span>
    <span class="docEmphasis">+ let num &lt; 5</span>
    <span class="docEmphasis">+ let num=num+1</span>
    <span class="docEmphasis">+ let num &lt; 5</span>
    <span class="docEmphasis">+ let num=num+1</span>
    <span class="docEmphasis">+ let num &lt; 5</span>
    <span class="docEmphasis">+ let num=num+1</span>
    <span class="docEmphasis">+ let num &lt; 5</span>
    <span class="docEmphasis">+ print The grand total is 5</span>
    <span class="docEmphasis">The grand total is 5</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The Korn shell is invoked with the
      <span class="docEmphasis">–x</span> option. Echoing is turned on. Each
      line of the script will be displayed on the screen, followed by the result
      of executing that line. Variable substitution is performed. Alternatively,
      the <span class="docEmphasis">–x</span> option can be used in the script
      instead of at the command line; e.g., <span class="docEmphasis">#!/bin/ksh
      –x</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The lines are preceded by the plus (+) sign, the PS4
      prompt.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> loop is
      entered. It will loop 4 times.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The value of <span class="docEmphasis">num</span> is
      incremented by by 1.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">After the <span class="docEmphasis">while</span> loop
      exits, this line is printed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list135" class="docExampleTitle">Example 10.135 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis">#</span> <span class="docEmphasis">Scriptname: todebug2</span>
1   <span class="docEmphStrong">trap 'print &quot;num=$num on line $LINENO&quot;' DEBUG</span>
    num=1
    while (( num &lt; 5 ))
    do
        (( num=num+1 ))
    done
    print The grand total is $num

(The Output)
    $ <span class="docEmphStrong">todebug2</span>
2   <span class="docEmphasis">num=1 on line 3</span>
    <span class="docEmphasis">num=1 on line 4</span>
    <span class="docEmphasis">num=2 on line 6</span>
    <span class="docEmphasis">num=2 on line 4</span>
    <span class="docEmphasis">num=3 on line 6</span>
    <span class="docEmphasis">num=3 on line 4</span>
    <span class="docEmphasis">num=4 on line 6</span>
    <span class="docEmphasis">num=4 on line 4</span>
    <span class="docEmphasis">num=5 on line 6</span>
    <span class="docEmphasis">num=5 on line 4</span>
    <span class="docEmphasis">The grand total is 5</span>
    <span class="docEmphasis">num=5 on line 8</span>
    <span class="docEmphasis">num=5 on line 8</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">LINENO</span> is a special
      Korn shell variable that holds the number of the current script line. The
      <span class="docEmphasis">DEBUG</span> signal, used with the
      <span class="docEmphasis">trap</span> command, causes the string enclosed
      in single quotes to be executed every time a command in the script is
      executed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">As the <span class="docEmphasis">while</span> loop
      executes, the value of the variable <span class="docEmphasis">num</span>
      and the line of the script are displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec37">10.2.15 Processing Command Line Options with
<span class="docEmphasis">getopts</span></h4>
<p class="docText">If you are writing scripts that require a number of command
line options, positional parameters are not always most efficient. For example,
the UNIX <span class="docEmphasis">ls</span> command takes a number of command
line options and arguments. (An option requires a leading dash; an argument does
not.) Options can be passed to the program in several ways:
<span class="docEmphasis">ls –laFi, ls –i –a –l –F, ls –ia –F,</span> and so
forth. If you have a script that requires arguments, positional parameters might
be used to process the arguments individually, such as <span class="docEmphasis">
ls –l –i –F.</span> Each dash option would be stored in
<span class="docEmphasis">$1,</span> <span class="docEmphasis">$2,</span> and
<span class="docEmphasis">$3,</span> respectively. But, what if the user listed
all of the options as one dash option, as in <span class="docEmphasis">ls –liF?</span>
Now the <span class="docEmphasis">–liF</span> would all be assigned to
<span class="docEmphasis">$1</span> in the script. The <span class="docEmphasis">
getopts</span> function makes it possible to process command line options and
arguments in the same way they are processed by the <span class="docEmphasis">ls</span>
program.<span id="ENB10-11"><a class="docLink" href="#EN10-11"><sup>[11]</sup></a></span>
The <span class="docEmphasis">getopts</span> function will allow the
<span class="docEmphasis">runit</span> program to process its arguments using a
variety of combinations.</p>
<h5 id="ch10list136" class="docExampleTitle">Example 10.136 </h5>
<pre>(The Command Line)

1   $ <span class="docEmphStrong">runit –x –n 200 filex</span>

2   $ <span class="docEmphStrong">runit –xn200 filex</span>

3   $ <span class="docEmphStrong">runit –xy</span>

4   $ <span class="docEmphStrong">runit –yx –n 30</span>

5   $ <span class="docEmphStrong">runit –n250 –xy filey</span>

(any other combination of these arguments )
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The program <span class="docEmphasis">runit</span>
      takes four arguments<span class="docEmphasis">; x</span> is an option,
      <span class="docEmphasis">n</span> is an option requiring a number
      argument after it, and <span class="docEmphasis">filex</span> is an
      argument that stands alone.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The program <span class="docEmphasis">runit</span>
      combines the options <span class="docEmphasis">x</span> and
      <span class="docEmphasis">n</span> and the number argument
      <span class="docEmphasis">200;</span> <span class="docEmphasis">filex</span>
      is also an argument.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The program <span class="docEmphasis">runit</span>
      combines the <span class="docEmphasis">x</span> and
      <span class="docEmphasis">y</span> options.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The program <span class="docEmphasis">runit</span>
      combines the <span class="docEmphasis">y</span> and
      <span class="docEmphasis">x</span> options; the <span class="docEmphasis">
      n</span> option is passed separately as is the number argument,
      <span class="docEmphasis">30.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The program <span class="docEmphasis">runit</span>
      combines the <span class="docEmphasis">n</span> option with the number
      argument; the <span class="docEmphasis">x</span> and
      <span class="docEmphasis">y</span> options are combined and the
      <span class="docEmphasis">filey</span> is separate.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<p class="docText">Before getting into all the details of the
<span class="docEmphasis">runit</span> program, we examine the line from the
program where <span class="docEmphasis">getopts</span> is used to see how it
processes the arguments. The following is a line from the script called
<span class="docEmphasis">runit:</span></p>
<pre><span class="docEmphStrong">while getopts :xyn: name</span>
</pre>
<span style="FONT-WEIGHT: bold">
<ol class="docList" type="1">
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList"><span class="docEmphasis">x,</span>
  <span class="docEmphasis">y,</span> and <span class="docEmphasis">n</span> are
  the options.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Options typed at the command line begin with either – or +.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Any options that do not contain a + or – tell
  <span class="docEmphasis">getopts</span> that the option list is at an end.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">The colon after an option says that the option requires an
  argument; that is, the <span class="docEmphasis">–n</span> option requires an
  argument.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">The colon before an option list says that if you type an
  illegal option, <span class="docEmphasis">getopts</span> will allow the
  programmer to handle it. For example, in the command <span class="docEmphasis">
  runit –p,</span> where <span class="docEmphasis">–p</span> is not one of the
  legal options, <span class="docEmphasis">getopts</span> will tell you so
  programmatically. The shell does not print an error message.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">Each time <span class="docEmphasis">getopts</span> is
  called, it places the next option it finds, without the dash, in the variable
  <span class="docEmphasis">name.</span> (You can use any variable name here.)
  If there is a plus sign prepended to the option, then it goes into
  <span class="docEmphasis">name</span> with the plus sign. If an illegal
  argument is given, <span class="docEmphasis">name</span> is assigned a
  question mark; if a required argument is missing, <span class="docEmphasis">
  name</span> is assigned a colon.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList"><span class="docEmphasis">OPTIND</span> is a special
  variable that is initialized to one and is incremented each time
  <span class="docEmphasis">getopts</span> completes processing a command line
  argument to the number of the next argument <span class="docEmphasis">getopts</span>
  will process.</span></li>
  <li><span style="FONT-WEIGHT: normal">
  <p class="docList">The <span class="docEmphasis">OPTARG</span> variable
  contains the value of a legal argument, or if an illegal option is given, the
  value of the illegal option is stored in <span class="docEmphasis">OPTARG.</span></span></li>
</ol>
</span>
<p class="docText"><span class="docEmphStrong">Sample <span class="docEmphasis">
getopts</span> Scripts.</span> The following sample scripts illustrate how
<span class="docEmphasis">getopts</span> processes arguments.</p>
<h5 id="ch10list137" class="docExampleTitle">Example 10.137 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Program opts1</span>
    <span class="docEmphasis"># Using getopts –– First try ––</span>
1   <span class="docEmphStrong">while getopts xy options</span>
    do
2   case $options in
3       x) print &quot;you entered –x as an option&quot;;;
        y) print &quot;you entered –y as an option&quot;;;
    esac
    done
-----------------------------------------------------------------
(The Command Line)
4   $ <span class="docEmphStrong">opts1 –x</span>
    <span class="docEmphasis">you entered –x as an option</span>

5   $ <span class="docEmphStrong">opts1 –xy</span>
    <span class="docEmphasis">you entered –x as an option</span>
    <span class="docEmphasis">you entered –y as an option</span>

6   $ <span class="docEmphStrong">opts1 –y</span>
    <span class="docEmphasis">you entered –y as an option</span>

7   $ <span class="docEmphStrong">opts1 –b</span>
    <span class="docEmphasis">opts1[3]: getopts: b bad option(s)</span>

8   $ <span class="docEmphStrong">opts1 b</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">getopts</span> command is
      used as a condition for the <span class="docEmphasis">while</span>
      command. The valid options for this program are listed after the
      <span class="docEmphasis">getopts</span> command; they are
      <span class="docEmphasis">x</span> and <span class="docEmphasis">y.</span>
      Each option is tested in the body of the loop, one after the other. Each
      option will be assigned to the variable <span class="docEmphasis">options,</span>
      without the leading dash. When there are no longer any arguments to
      process, <span class="docEmphasis">getopts</span> will exit with a nonzero
      status, causing the <span class="docEmphasis">while</span> loop to
      terminate.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command is
      used to test each of the possible options found in the
      <span class="docEmphasis">options</span> variable, either
      <span class="docEmphasis">x</span> or <span class="docEmphasis">y.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If <span class="docEmphasis">x</span> was an option,
      the string <span class="docEmphasis">you entered x as an option</span> is
      displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">At the command line, the <span class="docEmphasis">
      opts1</span> script is given an <span class="docEmphasis">x</span> option,
      a legal option to be processed by <span class="docEmphasis">getopts.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">At the command line, the <span class="docEmphasis">
      opts1</span> script is given an <span class="docEmphasis">xy</span>
      option, legal options to be processed by <span class="docEmphasis">getopts.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">At the command line, the <span class="docEmphasis">
      opts1</span> script is given a <span class="docEmphasis">y</span> option,
      a legal option to be processed by <span class="docEmphasis">getopts.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">opts1</span> script is
      given a <span class="docEmphasis">b</span> option, an illegal option.
      <span class="docEmphasis">Getopts</span> sends an error message.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">An option without a – or + prepended to it is not an
      option and causes <span class="docEmphasis">getopts</span> to stop
      processing arguments.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list138" class="docExampleTitle">Example 10.138 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Program opts2</span>
    <span class="docEmphasis"># Using getopts –– Second try ––</span>
1   <span class="docEmphStrong">while getopts :xy options</span>
    do
2        case $options in
         x) print &quot;you entered –x as an option&quot;;;
         y) print &quot;you entered –y as an option&quot;;;
3        <span class="docEmphStrong">\?) print $OPTARG is not a valid option 1&gt;&amp;2;;</span>
         esac
    done
------------------------------------------------------------------
(The Command Line)

    $ <span class="docEmphStrong">opts2 –x</span>
    <span class="docEmphasis">you entered –x as an option</span>

    $ <span class="docEmphStrong">opts2 –y</span>
    <span class="docEmphasis">you entered –y as an option</span>


    $ <span class="docEmphStrong">opts2 xy</span>
    $ <span class="docEmphStrong">opts2 –xy</span>
    <span class="docEmphasis">you entered –x as an option</span>
    <span class="docEmphasis">you entered –y as an option</span>

4   $ <span class="docEmphStrong">opts2 –g</span>
    <span class="docEmphasis">g is not a valid option</span>

5   $ <span class="docEmphStrong">opts2 –c</span>
    <span class="docEmphasis">c is not a valid option</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The colon preceding the option list prevents the Korn
      shell from printing an error message for a bad option. However, if the
      option is a bad option, a question mark will be assigned to the
      <span class="docEmphasis">options</span> variable.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">case</span> command can
      be used to test for the question mark, allowing you to print your own
      error message to standard error.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the <span class="docEmphasis">options</span>
      variable is assigned the question mark, this <span class="docEmphasis">
      case</span> statement is executed. The question mark is protected with the
      backslash so that the Korn shell does not see it as a wildcard and try to
      perform filename substitution.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">g</span> is not a legal
      option. The question mark is assigned to the <span class="docEmphasis">
      options</span> variable, and <span class="docEmphasis">OPTARG</span> is
      assigned the illegal option <span class="docEmphasis">g.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">c</span> is not a legal
      option. The question mark is assigned to the <span class="docEmphasis">
      options</span> variable, and <span class="docEmphasis">OPTARG</span> is
      assigned the illegal option <span class="docEmphasis">c.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list139" class="docExampleTitle">Example 10.139 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Program opts3</span>
    <span class="docEmphasis"># Using getopts –– Third try ––</span>
1   <span class="docEmphStrong">while getopts :d options</span>
    do
        case $options in
2       d) print –R &quot;–d is the ON switch&quot;;;
3       +d) print –R &quot;+d is the OFF switch&quot;;;
        \?) print $OPTARG is not a valid option;;
        esac
    done
 <span class="docEmphasis"># Need the –R option with print or the shell tries to use –d as a</span>
 <span class="docEmphasis"># print option</span>
------------------------------------------------------------------
(The Command Line)
4   $ <span class="docEmphStrong">opts3 –d</span>
    <span class="docEmphasis">–d is the ON switch</span>

5   $ <span class="docEmphStrong">opts3 +d</span>
    <span class="docEmphasis">+d is the OFF switch</span>

6   $ <span class="docEmphStrong">opts3 –e</span>
    <span class="docEmphasis">e is not a valid option</span>

7   $ <span class="docEmphStrong">opts3 e</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> command
      tests the exit status of <span class="docEmphasis">getopts;</span> if
      <span class="docEmphasis">getopts</span> can successfully process an
      argument, it returns zero exit status, and the body of the
      <span class="docEmphasis">while</span> loop is entered. The colon
      prepended to the <span class="docEmphasis">d</span> option tells
      <span class="docEmphasis">getopts</span> not to print an error message if
      the user enters an invalid option.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">One of the legal options is <span class="docEmphasis">
      –d.</span> If <span class="docEmphasis">–d</span> is entered as an option,
      the <span class="docEmphasis">d</span> (without the dash) is stored in the
      <span class="docEmphasis">options</span> variable. (The
      <span class="docEmphasis">–R</span> option to the
      <span class="docEmphasis">print</span> command allows the first character
      in the <span class="docEmphasis">print</span> string to be a dash.)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">One of the legal options is <span class="docEmphasis">
      +d.</span> If <span class="docEmphasis">+d</span> is entered as an option,
      the <span class="docEmphasis">d</span> (with the plus sign) is stored in
      the <span class="docEmphasis">options</span> variable.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–d</span> option is a
      legal option to <span class="docEmphasis">opts3.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">+d</span> option is also
      a legal option to <span class="docEmphasis">opts3.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">–e</span> option is
      invalid. A question mark is stored in <span class="docEmphasis">options</span>
      if the option is illegal. The illegal argument is stored in
      <span class="docEmphasis">OPTARG.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The option is prepended with neither a dash nor a plus
      sign. The <span class="docEmphasis">getopts</span> command will not
      process it as an option and returns a nonzero exit status. The
      <span class="docEmphasis">while</span> loop is terminated.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h5 id="ch10list140" class="docExampleTitle">Example 10.140 </h5>
<pre>(The Script)
    #!/bin/ksh
    <span class="docEmphasis"># Program opts4</span>
    <span class="docEmphasis"># Using getopts –– Fourth try ––</span>
1   alias USAGE='print &quot;usage: opts4 [-x] filename &quot; &gt;&amp;2'
2   <span class="docEmphStrong">while getopts :x: arguments</span>
    do
    case $arguments in
3        x) print &quot;$OPTARG is the name of the argument &quot;;;
4        :) print &quot;Please enter an argument after the -x option&quot; &gt;&amp;2
           USAGE ;;
5       \?) print &quot;$OPTARG is not a valid option.&quot; &gt;&amp;2
           USAGE;;
    esac
6   print &quot;$OPTIND&quot; <span class="docEmphasis"># The number of the next argument to be processed</span>
    done
-----------------------------------------------------------------
(The Command Line)
7   $ <span class="docEmphStrong">opts4 -x</span>
    <span class="docEmphasis">Please enter an argument after the -x option</span>
    <span class="docEmphasis">usage: opts4 [-x] filename</span>
    <span class="docEmphasis">2</span>
8   $ <span class="docEmphStrong">opts4 -x filex</span>
    <span class="docEmphasis">filex is the name of the argument</span>
    <span class="docEmphasis">3</span>
9   $ <span class="docEmphStrong">opts4 -d</span>
    <span class="docEmphasis">d is not a valid option.</span>
    <span class="docEmphasis">usage: opts4 [-x] filename</span>
    <span class="docEmphasis">1</span>
</pre>

<table cellSpacing="0" width="90%" border="1" align="center">
  <tr>
    <td>
    <h2 class="docSidebarTitle">EXPLANATION</h2>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="1">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The alias <span class="docEmphasis">USAGE</span> is
      assigned the diagnostic error message that will be printed if
      <span class="docEmphasis">getopts</span> fails.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">while</span> command
      tests the exit status of <span class="docEmphasis">getopts;</span> if
      <span class="docEmphasis">getopts</span> can successfully process an
      argument, it returns zero exit status, and the body of the
      <span class="docEmphasis">while</span> loop is entered. The colon
      prepended to the <span class="docEmphasis">x</span> option tells
      <span class="docEmphasis">getopts</span> not to print an error message if
      the user enters an invalid option. The colon appended to the
      <span class="docEmphasis">x</span> option tells <span class="docEmphasis">
      getopts</span> that an argument should follow the
      <span class="docEmphasis">x</span> option. If the option takes an
      argument, the argument is stored in the <span class="docEmphasis">getopts</span>
      built-in variable, <span class="docEmphasis">OPTARG.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the <span class="docEmphasis">x</span> option was
      given an argument, the argument is stored in the <span class="docEmphasis">
      OPTARG</span> variable and will be printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If an argument was not provided after the
      <span class="docEmphasis">x</span> option, a colon is stored in the
      variable <span class="docEmphasis">arguments.</span> The appropriate error
      message is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If an invalid option is entered, the question mark is
      stored in the variable <span class="docEmphasis">arguments</span> and an
      error message is displayed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The special <span class="docEmphasis">getopts</span>
      variable, <span class="docEmphasis">OPTIND,</span> holds the number of the
      next option to be processed. Its value is always one more than the actual
      number of command line arguments.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The <span class="docEmphasis">x</span> option requires
      an argument. An error message is printed.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The name of the argument is <span class="docEmphasis">
      filex.</span> The variable <span class="docEmphasis">OPTARG</span> holds
      the name of the argument <span class="docEmphasis">filex.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The option <span class="docEmphasis">d</span> is
      invalid. The usage message is displayed.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec38">10.2.16 Security</h4>
<p class="docText"><b>Privileged Scripts.</b> A script is privileged if the Korn
shell is invoked with the <span class="docEmphasis">–p</span> option. When the
privileged option is used and the real UID and/or the real GID are not the same
as the effective UID or effective GID, the <span class="docEmphasis">.profile</span>
will not be executed and a system file called <span class="docEmphasis">/etc/suid_profile</span>
will be executed instead of the <span class="docEmphasis">ENV</span> file.</p>
<p class="docText"><b>Restricted Shells.</b> When the Korn shell is invoked with
the <span class="docEmphasis">–r</span> option, the shell is restricted. When
the shell is restricted, the <span class="docEmphasis">cd</span> command cannot
be used and the <span class="docEmphasis">SHELL, ENV,</span> and
<span class="docEmphasis">PATH</span> variables cannot be modified or unset;
commands cannot be executed if the first character is a backslash; and the
redirection operators (&gt;, &lt;, |, &gt;&gt;) are illegal. This option cannot be unset or
set with the <span class="docEmphasis">set</span> command. The command
<span class="docEmphasis">rksh</span> will invoke a restricted shell.</p>
<h4 class="docSection2Title" id="ch10lev2sec39">10.2.17 Built-In Commands</h4>
<p class="docText">The Korn shell has a number of built-in commands, as shown in
<a class="docLink" href="#ch10table34">Table 10.34</a>.</p>

<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table34" class="docTableTitle">Table 10.34. Built-In Commands and Their Functions</h5>
  </caption>
  <colgroup span="3" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top" colSpan="2">
    <span class="docEmphBoldItalic">Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">:</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Do-nothing command;
    returns exit status zero. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">.file</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">The dot command reads and
    executes a command from <span class="docEmphasis">file.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">break</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">See
    <span class="docEmphasis">looping.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">continue</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">See
    <span class="docEmphasis">looping.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">cd</span></td>
    <td class="docTableCell" vAlign="top" colSpan="2">Changes directory.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">echo [ args
    ]</span></td>
    <td class="docTableCell" vAlign="top" colSpan="2">Displays arguments.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">eval command</span></td>
    <td class="docTableCell" vAlign="top" colSpan="2">Shell scans the command
    line twice before execution.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exec command</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Runs
    <span class="docEmphasis">command</span> in place of this shell. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">exit [ n ]</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Exit the shell with status
    <span class="docEmphasis">n.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">export [ var
    ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Makes
    <span class="docEmphasis">var</span> known to subshells. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fc –e [
    editor ] [ lnr ] first last</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Used to edit commands in
    the history list. If no editor is specified, the value of
    <span class="docEmphasis">FCEDIT</span> is used; if
    <span class="docEmphasis">FCEDIT</span> is not set,
    <span class="docEmphasis">/bin/ed</span> is used. Usually history is aliased
    to <span class="docEmphasis">fc –l.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="8">&nbsp;</td>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Examples:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fc –l</span>
    </td>
    <td class="docTableCell" vAlign="top">Lists the last 16 commands on the
    history list. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fc –e emacs
    grep</span> </td>
    <td class="docTableCell" vAlign="top">Reads the last
    <span class="docEmphasis">grep</span> command into the
    <span class="docEmphasis">emacs</span> editor. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fc 25 30</span>
    </td>
    <td class="docTableCell" vAlign="top">Reads commands
    <span class="docEmphasis">25</span> through <span class="docEmphasis">30</span>
    into the editor specified in <span class="docEmphasis">FCEDIT,</span> by
    default the <span class="docEmphasis">ed</span> editor. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fc –e –</span>
    </td>
    <td class="docTableCell" vAlign="top">Reexecutes the last command. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fc –e –
    Tom=Joe 28</span> </td>
    <td class="docTableCell" vAlign="top">Replaces <span class="docEmphasis">Tom</span>
    with <span class="docEmphasis">Joe</span> in history command
    <span class="docEmphasis">28.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fg</span></td>
    <td class="docTableCell" vAlign="top">Brings the last background job to the
    foreground. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">fg %n</span></td>
    <td class="docTableCell" vAlign="top">Brings job number
    <span class="docEmphasis">n</span> to the foreground. Type
    <span class="docEmphasis">jobs</span> to find the correct job number.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">jobs [–l]</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Lists the active
    <span class="docEmphasis">jobs</span> by number and with the
    <span class="docEmphasis">–l</span> option by PID number. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="5">&nbsp;</td>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Examples:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    $ jobs</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">[3] +
    Running</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">sleep 50&amp;</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">[1] –
    Stopped</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">vi</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">[2] Running</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">sleep%</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">kill
    [–signal process ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Sends the signal to the
    PID number or job number of process. See <span class="docEmphasis">/usr/include/sys/signal.h</span>
    for a list of signals. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="27">&nbsp;</td>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Signals:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGHUP1</span>
    </td>
    <td class="docTableCell" vAlign="top">/* hangup (disconnect) */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGINT 2</span>
    </td>
    <td class="docTableCell" vAlign="top">/* interrupt */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGQUIT 3</span>
    </td>
    <td class="docTableCell" vAlign="top">/* quit */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGILL 4</span>
    </td>
    <td class="docTableCell" vAlign="top">/* illegal instruction (not reset when
    caught) */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGTRAP 5</span>
    </td>
    <td class="docTableCell" vAlign="top">/* trace trap (not reset when caught)
    */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGIOT 6</span>
    </td>
    <td class="docTableCell" vAlign="top">/* IOT instruction */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGABRT 6</span>
    </td>
    <td class="docTableCell" vAlign="top">/* used by abort, replace
    <span class="docEmphasis">SIGIOT</span> in the future */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGEMT 7</span>
    </td>
    <td class="docTableCell" vAlign="top">/* EMT instruction */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGFPE 8</span>
    </td>
    <td class="docTableCell" vAlign="top">/* floating point exception */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGKILL 9</span>
    </td>
    <td class="docTableCell" vAlign="top">/* kill (cannot be caught or ignored)
    */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGBUS 10</span>
    </td>
    <td class="docTableCell" vAlign="top">/* bus error */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGSEGV 11</span>
    </td>
    <td class="docTableCell" vAlign="top">/* segmentation violation */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGSYS 12</span>
    </td>
    <td class="docTableCell" vAlign="top">/* bad argument to system call */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGPIPE 13</span>
    </td>
    <td class="docTableCell" vAlign="top">/* write on a pipe with no one to read
    it */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGALRM 14</span>
    </td>
    <td class="docTableCell" vAlign="top">/* alarm clock */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGTERM 15</span>
    </td>
    <td class="docTableCell" vAlign="top">/* software termination signal from
    kill */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGURG 16</span>
    </td>
    <td class="docTableCell" vAlign="top">/* urgent condition on I/O channel */
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGSTOP 17</span>
    </td>
    <td class="docTableCell" vAlign="top">/* sendable stop signal not from tty
    */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGTSTP 18</span>
    </td>
    <td class="docTableCell" vAlign="top">/* stop signal from tty */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">SIGCONT 19</span>
    </td>
    <td class="docTableCell" vAlign="top">/* continue a stopped process */ </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">(To use the
    <span class="docEmphasis">kill</span> command and a signal name, strip off
    the <span class="docEmphasis">SIG</span> prefix and precede the signal name
    with a dash.) </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Examples:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    kill –INT %3</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    kill –HUP 1256</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    kill –9 %3</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    kill %1</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">getopts</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Used in shell scripts to
    parse command line and check for legal options. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">hash</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Lists all tracked aliases.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">login [
    username ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">&nbsp;</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">newgrp [ arg
    ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Changes your real group ID
    to the group ID. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">print –[nrRsup]</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Replacement for
    <span class="docEmphasis">echo.</span> See <span class="docEmphasis">print.</span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">pwd</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Print present working
    directory. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">read [ var ]</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Read line from standard
    input into variable <span class="docEmphasis">var.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">readonly [
    var ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Make variable
    <span class="docEmphasis">var</span> <span class="docEmphasis">readonly.</span>
    Cannot be reset. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">return [ n ]</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Exit value given to a
    function. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="3"><span class="docEmphasis">
    set [ –aefhknoptuvx– [–o option] [–A arrayname] [ arg ] ]</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="41">&nbsp;</td>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Examples:</span></span></td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set</span></td>
    <td class="docTableCell" vAlign="top">Lists all variables and their values.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set +</span></td>
    <td class="docTableCell" vAlign="top">Lists all variables without their
    values.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set –o</span></td>
    <td class="docTableCell" vAlign="top">Lists all option settings. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set a b c</span></td>
    <td class="docTableCell" vAlign="top">Resets positional parameters
    <span class="docEmphasis">$1,</span> <span class="docEmphasis">$2,</span>
    <span class="docEmphasis">$3.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set –s</span></td>
    <td class="docTableCell" vAlign="top">Sorts <span class="docEmphasis">$1,</span>
    <span class="docEmphasis">$2,</span> and <span class="docEmphasis">$3</span>
    alphabetically.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set –o vi</span></td>
    <td class="docTableCell" vAlign="top">Sets the <span class="docEmphasis">vi</span>
    option.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set –xv</span></td>
    <td class="docTableCell" vAlign="top">Turns on the <span class="docEmphasis">
    xtrace</span> and <span class="docEmphasis">verbose</span> options for
    debugging.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set – –</span></td>
    <td class="docTableCell" vAlign="top">Unsets all positional parameters.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set – – &quot;$x&quot;</span></td>
    <td class="docTableCell" vAlign="top">Sets <span class="docEmphasis">$1</span>
    to the value of <span class="docEmphasis">x,</span> even if
    <span class="docEmphasis">x</span> is <span class="docEmphasis">–x.</span></td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">set == $x</span></td>
    <td class="docTableCell" vAlign="top">Does pathname expansion on each item
    in <span class="docEmphasis">x</span> and then sets the positional
    parameters to each item.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="3"><span class="docEmphasis">
    set –A name tom dick harry</span></td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">name[0]</span>
    is set to <span class="docEmphasis">tom.</span></td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">name[1]</span>
    is set to <span class="docEmphasis">dick</span>.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">name[2]</span>
    is set to <span class="docEmphasis">harry.</span></td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="3"><span class="docEmphasis">
    set +A name joe</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">name[0]</span>
    is reset to <span class="docEmphasis">joe,</span> the rest of the array is
    left alone.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">name[1]</span>
    is <span class="docEmphasis">dick.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">name[2]</span>
    is <span class="docEmphasis">harry.</span></td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">(To set options, use the
    <span class="docEmphasis">–o</span> flag; to unset options, use the
    <span class="docEmphasis">+o</span> flag.) </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Example:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    set –o ignoreeof</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Options:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">allexport</span>
    </td>
    <td class="docTableCell" vAlign="top">After setting this, exports any
    variable defined or changed. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">bgnice</span>
    </td>
    <td class="docTableCell" vAlign="top">Runs background jobs with a lesser
    priority; used instead of <span class="docEmphasis">nice.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">emacs</span>
    </td>
    <td class="docTableCell" vAlign="top">Sets the <span class="docEmphasis">
    emacs</span> built-in editor.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">errexit</span>
    </td>
    <td class="docTableCell" vAlign="top">The shell exits when a command returns
    a nonzero exit status.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">gmacs</span>
    </td>
    <td class="docTableCell" vAlign="top">Sets the built-in
    <span class="docEmphasis">gmacs</span> editor.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ignoreeof</span>
    </td>
    <td class="docTableCell" vAlign="top">Ignores the <span class="docEmphasis">
    EOF</span> (Control-D) key from terminating the shell. Must use
    <span class="docEmphasis">exit</span> to exit. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">keyword</span>
    </td>
    <td class="docTableCell" vAlign="top">Adds <span class="docEmphasis">keyword</span>
    arguments occurring anywhere on the command line to the environment of the
    shell.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">markdirs</span>
    </td>
    <td class="docTableCell" vAlign="top">Puts a trailing backslash on all
    directory names resulting from filename expansion.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">monitor</span>
    </td>
    <td class="docTableCell" vAlign="top">Sets job control. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">noclobber</span>
    </td>
    <td class="docTableCell" vAlign="top">Prevents overwriting files using the
    redirection operator, &gt;. Use &gt;| to force overwrite. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">noexec</span>
    </td>
    <td class="docTableCell" vAlign="top">Same as <span class="docEmphasis">ksh
    –n;</span> reads commands but does not execute them. Used to check for
    syntax errors in shell scripts.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">noglob</span>
    </td>
    <td class="docTableCell" vAlign="top">Disables pathname expansion with
    <span class="docEmphasis">ksh</span> wildcard metacharacters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">nolog</span>
    </td>
    <td class="docTableCell" vAlign="top">Function definitions will not be
    stored in the history file.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">nounset</span>
    </td>
    <td class="docTableCell" vAlign="top">Displays an error if a variable has
    not been set.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">privileged</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns on privileged mode for setuid
    programs.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">trackall</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">Ksh</span>
    causes each command to become a tracked alias; automatically turned on for
    interactive shells.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">verbose</span>
    </td>
    <td class="docTableCell" vAlign="top">Echos each line of input to standard
    error; useful in debugging.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">vi</span>
    </td>
    <td class="docTableCell" vAlign="top">Sets the <span class="docEmphasis">vi</span>
    built-in editor.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">viraw</span>
    </td>
    <td class="docTableCell" vAlign="top">Specifies <span class="docEmphasis">vi</span>
    character at a time input.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">xtrace</span>
    </td>
    <td class="docTableCell" vAlign="top">Expands each command and displays it
    in the PS4 prompt, with variables expanded.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">shift [ n ]</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    Shifts</span> positional parameters to the left <span class="docEmphasis">n</span>
    times. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">times</span>
    </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Prints accumulated user
    and system <span class="docEmphasis">times</span> for processes run from
    this shell. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">trap [ arg ]
    [ n ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">When shell receives signal
    <span class="docEmphasis">n</span> ( 0, 1, 2, or 15 ),
    <span class="docEmphasis">arg</span> is executed. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">type [
    command ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Prints the type of
    command; e.g., <span class="docEmphasis">pwd</span> is a built-in shell. In
    <span class="docEmphasis">ksh,</span> an alias for <span class="docEmphasis">
    whence</span> <span class="docEmphasis">–v.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">typeset [
    options ] [ var ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Sets attributes and values
    for shell variables and functions. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="16">
    <span class="docEmphasis">ulimit [ options size ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Sets maximum limits on
    processes. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Examples:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="7"><span class="docEmphasis">
    ulimit –a</span> </td>
    <td class="docTableCell" vAlign="top">Display all limits:</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Time (seconds) unlimited. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">File (blocks) unlimited. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Data (kbytes) 524280. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Stack (kbytes) 8192. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Memory (kbytes) unlimited. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top">Coredump (blocks) unlimited. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2">
    <span class="docEmphStrong"><span class="docEmphUl">Other Options:</span></span>
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–c size</span>
    </td>
    <td class="docTableCell" vAlign="top">Limits core dumps to size blocks.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–d size</span>
    </td>
    <td class="docTableCell" vAlign="top">Limits the data size (of executables)
    to size blocks.</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–f size</span>
    </td>
    <td class="docTableCell" vAlign="top">Limits the size of files to size
    blocks (default).</td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–m size</span>
    </td>
    <td class="docTableCell" vAlign="top">Limits the size of physical memory to
    size <span class="docEmphasis">K</span> bytes. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–s size</span></td>
    <td class="docTableCell" vAlign="top">Limits the size of the stack area to
    size <span class="docEmphasis">K</span> bytes. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–t secs</span></td>
    <td class="docTableCell" vAlign="top">Limits process execution time to
    <span class="docEmphasis">secs</span> seconds. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">umask [ mask
    ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Without argument, prints
    out file creation mask for permissions. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">umask [
    octal digits ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">User file creation mode
    mask for owner, group, and others. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">unset [ name
    ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    Unsets</span> value of variable or function. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">wait [ pid#n
    ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphasis">
    Waits</span> for background process with PID number
    <span class="docEmphasis">n</span> and report termination status. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" rowSpan="6"><span class="docEmphasis">
    whence [ command ]</span> </td>
    <td class="docTableCell" vAlign="top" colSpan="2">Prints information about
    the command, like <span class="docEmphasis">ucb whereis.</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top" colSpan="2"><span class="docEmphUl">
    Examples:</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">whence –v
    happy</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">happy</span>
    is a function </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">whence –v
    addon</span> </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">addon</span>
    is an undefined function </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">whence –v ls</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">ls</span> is
    a tracked alias for <span class="docEmphasis">/bin/ls</span> </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">whence ls</span>
    </td>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">/bin/ls</span>
    </td>
  </tr>
</table>
<h4 class="docSection2Title" id="ch10lev2sec40">10.2.18 Korn Shell Invocation Arguments</h4>
<p class="docText">When the Korn shell is involved, it can take options to
control its behavior. See <a class="docLink" href="#ch10table35">Table 10.35</a>.</p>
<table cellSpacing="0" cellPadding="1" width="100%" border="1">
  <caption>
  <h5 id="ch10table35" class="docTableTitle">Table 10.35. Arguments to <span class="docEmphasis">
  ksh</span></h5>
  </caption>
  <colgroup span="2" align="left">
  </colgroup>
  <tr>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Command</span> </th>
    <th class="docTableHeader" vAlign="top"><span class="docEmphBoldItalic">
    Function</span> </th>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–a</span>
    </td>
    <td class="docTableCell" vAlign="top">Automatically exports all variables.
    </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–c cmd</span>
    </td>
    <td class="docTableCell" vAlign="top">Executes a command string. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–e</span>
    </td>
    <td class="docTableCell" vAlign="top">Exits when a command returns a nonzero
    status. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–f</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns off globbing, the expansion of
    filename metacharacters. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–h</span>
    </td>
    <td class="docTableCell" vAlign="top">Causes commands to be treated as
    tracked aliases. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–i</span>
    </td>
    <td class="docTableCell" vAlign="top">Sets the interactive mode. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–k</span>
    </td>
    <td class="docTableCell" vAlign="top">Sets the keyword option. All the key
    arguments to commands will be made part of the environment. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–m</span>
    </td>
    <td class="docTableCell" vAlign="top">Causes commands executed in the
    background to be run in a separate process group, and will continue to run
    even if Control-C or logout is attempted. Sends a message that the job has
    terminated when done. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–n</span>
    </td>
    <td class="docTableCell" vAlign="top">Can be used for debugging. Commands
    are scanned, but not executed. Can be used with –<span class="docEmphasis">x</span>
    and <span class="docEmphasis">–v</span> options. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–o</span>
    </td>
    <td class="docTableCell" vAlign="top">Allows options to be set by the names
    listed in the table above with the <span class="docEmphasis">set</span>
    command. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–p</span>
    </td>
    <td class="docTableCell" vAlign="top">Turns on privileged mode. Used for
    running <span class="docEmphasis">setuid</span> programs. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–r</span>
    </td>
    <td class="docTableCell" vAlign="top">Sets the restricted mode. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–s</span>
    </td>
    <td class="docTableCell" vAlign="top">Reads command from
    <span class="docEmphasis">stdin,</span> the default. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–t</span>
    </td>
    <td class="docTableCell" vAlign="top">Causes the shell to exit after
    executing the first command found in shell input and the
    <span class="docEmphasis">–c</span> option is specified. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–u</span>
    </td>
    <td class="docTableCell" vAlign="top">Any reference to an unset variable is
    considered an error. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–v</span>
    </td>
    <td class="docTableCell" vAlign="top">Each line of a script or standard
    input is printed before any parsing, variable substitution, or other
    processing is performed. Output is written to standard error. Used for
    debugging. </td>
  </tr>
  <tr>
    <td class="docTableCell" vAlign="top"><span class="docEmphasis">–x</span>
    </td>
    <td class="docTableCell" vAlign="top">Each line of a script or standard
    input is printed before it is executed. Filename expansion, variable
    substitution, and command substitution are shown in the output. All output
    is prepended with the value of the PS4 prompt, a plus sign followed by a
    space. Lines are written to standard error. </td>
  </tr>
</table>
<h3 class="docSection1Title" id="ch10lev1sec3">KORN SHELL LAB EXERCISES</h3>
<h4 class="docSection2Title" id="ch10lev2sec41">Lab 28: Getting Started</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">What shell are you using? How do you know?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Do you have a <span class="docEmphasis">.profile</span>
    and/or a <span class="docEmphasis">.kshrc</span> file in your home
    directory? What is the difference between the <span class="docEmphasis">
    .profile</span> and <span class="docEmphasis">.kshrc?</span> What is the
    <span class="docEmphasis">ENV</span> file and how can you invoke it if you
    make changes in it?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">What is the default primary prompt? What is the default
    secondary prompt? Change your primary prompt at the command line so that it
    contains your login name.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">What is the purpose of setting each of the following
    variables?</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">set –o ignoreeof</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">set –o noclobber</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">set –o trackall</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">set –o monitor</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList"><span class="docEmphasis">set –o vi</span></span></li>
    </ol>
    </span>
    <p class="docText">Why are these variables set in the
    <span class="docEmphasis">ENV</span> file? What is the purpose of the
    <span class="docEmphasis">PATH?</span> What are the elements of your
    <span class="docEmphasis">PATH</span> variable?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">What is the difference between a local and an environment
    variable? How do you list all your variables? How do you list only
    environment variables? To list all your current option settings, type the
    following:</p>
    <pre>set –o
</pre>
    <p class="docText">Which set options are turned on?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>6:</b></td>
    <td>
    <p class="docText">Create a local variable called <span class="docEmphasis">
    myname</span> that contains your full name. Now <span class="docEmphasis">
    export</span> the variable. Type the following at the prompt:</p>
    <pre>ksh
</pre>
    <p class="docText">Was the variable <span class="docEmphasis">name</span>
    exported? Type <span class="docEmphasis">exit</span> to get back to the
    parent shell. Make the variable <span class="docEmphasis">name</span> r<span class="docEmphasis">eadonly.</span>
    What is a <span class="docEmphasis">readonly</span> variable?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>7:</b></td>
    <td>
    <p class="docText">What are positional parameters normally used for? Type
    the following:</p>
    <pre>set apples pears peaches plums
</pre>
    <p class="docText">Using the positional parameters, print
    <span class="docEmphasis">plums.</span> Print <span class="docEmphasis">
    apples peaches.</span> Print <span class="docEmphasis">apples pears peaches
    plums.</span> Print the number of parameters. Reset the positional
    parameters to a list of veggies. Print the whole list of veggies. What
    happened to the <span class="docEmphasis">fruit</span> list?</p>
    <p class="docText">Type the following:</p>
    <pre>set ––
print $*
</pre>
    <p class="docText">What happened?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>8:</b></td>
    <td>
    <p class="docText">Print the PID of the current shell. Type the following at
    the prompt:</p>
    <pre>grep $LOGNAME /etc/passwd
echo $?
</pre>
    <p class="docText">What does the <span class="docEmphasis">$?</span> tell
    you. What does the exit status tell you about the execution of a command?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>9:</b></td>
    <td>
    <p class="docText">Change both the primary and secondary prompt in your
    <span class="docEmphasis">.profile.</span> How do you reexecute the
    <span class="docEmphasis">.profile</span> file without logging out and
    logging back in?</td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec42">Lab 29: History</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">What is your <span class="docEmphasis">HISTSIZE</span>
    variable set to? What is your <span class="docEmphasis">HISTFILE</span>
    variable set to? Check your <span class="docEmphasis">.kshrc</span> file to
    see if <span class="docEmphasis">set –o vi</span> is there. If it has not
    been set, set it in the <span class="docEmphasis">.kshrc</span> file and
    reexecute the file by typing the following:</p>
    <pre>. .kshrc
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Type the following commands at the command line:</p>
    <pre>ls
date
who
cal 2 1993
date +%T
</pre>
    <p class="docText">Type <span class="docEmphasis">history</span> or
    <span class="docEmphasis">fc –l.</span> What do these commands do? Print
    your history list in reverse. Print your history list without numbers. Print
    the current command and the five preceding it. Print everything from the
    tenth command to the present. Print everything between the most recent
    <span class="docEmphasis">ls</span> command to the most recent
    <span class="docEmphasis">cal</span> command.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">Using the <span class="docEmphasis">r</span> command,
    reexecute the last command. Reexecute the last command that started with the
    letter <span class="docEmphasis">d.</span> Change the
    <span class="docEmphasis">cal</span> command <span class="docEmphasis">year</span>
    output to <span class="docEmphasis">1897.</span> Change the
    <span class="docEmphasis">date</span> command <span class="docEmphasis">+%T</span>
    argument to find the current hour.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">If your history is set, press the Esc key at the command
    line and use the K key to move up through the history list. Change the
    <span class="docEmphasis">ls</span> command to <span class="docEmphasis">ls
    –alF</span> and reexecute it.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">Check to see if the <span class="docEmphasis">FCEDIT</span>
    variable has been set by typing the <span class="docEmphasis">env</span>
    command. If it has not been set, type the following at the command line:</p>
    <pre>export FCEDIT=vi
</pre>
    <p class="docText">Now type the following at the command line:</p>
    <pre>fc –1 –4
</pre>
    <p class="docText">What happened?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>6:</b></td>
    <td>
    <p class="docText">How do you <span class="docEmphasis">comment</span> a
    line from your history list, so that it will be placed on the list without
    being executed?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>7:</b></td>
    <td>
    <p class="docText">At the command line, type the following:</p>
    <pre>touch a1 a2 a3 apples bears balloons a4 a45
</pre>
    <p class="docText">Now using the history Esc sequences shown in
    <a class="docLink" href="#ch10table02">
    Tables 10.2</a> and
    <a class="docLink" href="#ch10table03">10.3</a>,
    print all the files beginning with an <span class="docEmphasis">a.</span></p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print the first file beginning with
      <span class="docEmphasis">a.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print a list of all files beginning with
      <span class="docEmphasis">a.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print the first file beginning with
      <span class="docEmphasis">b.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print a command and comment it.</span></li>
    </ol>
    </span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>8:</b></td>
    <td>
    <p class="docText">At the command line, type the following:</p>
    <pre>print a b c d e
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>9:</b></td>
    <td>
    <p class="docText">Using the history <span class="docEmphasis">Esc
    underscore</span> command, change the command to the following:</p>
    <pre>print e
</pre>
    <p class="docText">Using the history <span class="docEmphasis">Esc
    underscore</span> command, change the first command to output:</p>
    <pre>print c
</pre>
    </td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec43">Lab 30: Aliases and Functions</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">What command lists all the aliases currently set?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">What command lists all the <span class="docEmphasis">
    tracked</span> aliases?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">Create aliases for the following commands:</p>
    <blockquote>

      <p class="docList"><tt>date +%T</tt></p>


      <p class="docList"><tt>history –n</tt></p>


      <p class="docList"><tt>ls –alF</tt></p>


      <p class="docList"><tt>rm –i</tt></p>


      <p class="docList"><tt>cp –i</tt></p>


      <p class="docList"><tt>print</tt></p>

    </blockquote>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">How do you export an alias?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">Create a function that contains the following commands:</p>
    <blockquote>

      <p class="docList"><tt>ls –F</tt></p>


      <p class="docList"><tt>print –n &quot;The time is&quot;</tt></p>


      <p class="docList"><tt>date +%T</tt></p>


      <p class="docList"><tt>print –n &quot;Your present working directory is&quot;</tt></p>


      <p class="docList"><tt>pwd</tt></p>

    </blockquote>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>6:</b></td>
    <td>
    <p class="docText">Execute the function.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>7:</b></td>
    <td>
    <p class="docText">Now create your own functions, using positional
    parameters to pass arguments.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>8:</b></td>
    <td>
    <p class="docText">What command lists the functions and their definitions?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>9:</b></td>
    <td>
    <p class="docText">Try some of the <span class="docEmphasis">print</span>
    options.</td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec44">Lab 31: Shell Metacharacters</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Create a directory called <span class="docEmphasis">meta.</span>
    <span class="docEmphasis">Cd</span> to that directory. Use
    <span class="docEmphasis">touch</span> to create the following files:</p>
    <pre><span class="docEmphasis">abc abc1 abc2 abc2191 Abc1 ab2 ab3 ab345 abc29 abc9 abc91 abc21xyz</span>
<span class="docEmphasis">abc2121 noone nobody nothing nowhere</span>
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Do the following:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files that start with a lower case
      <span class="docEmphasis">a.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files starting with upper case
      <span class="docEmphasis">A</span> followed by two characters.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files that end in a number.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files that match one number after
      <span class="docEmphasis">abc</span>.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files that match <span class="docEmphasis">
      nothing</span> or <span class="docEmphasis">noone</span>.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files that match one or more numbers after
      <span class="docEmphasis">abc</span>.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files that do not contain the pattern
      <span class="docEmphasis">abc</span>.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files that contain <span class="docEmphasis">
      ab</span> followed by a 3 or 4.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all files starting with <span class="docEmphasis">
      a</span> or <span class="docEmphasis">A</span>, followed by
      <span class="docEmphasis">b</span>, and ending in one number.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">What is the error message if there is not a match?</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec45">Lab 32: Tilde Expansion, Quotes, and Command
Substitution</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Use the <span class="docEmphasis">tilde</span> to do the
    following:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print your home directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print your neighbor's home directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print your previous working directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print your current working directory.</span></li>
    </ol>
    </span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">What variable holds the value of your present working
    directory? What variable holds the value of your previous working directory?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">Use the <span class="docEmphStrong">–</span> to go to
    your previous working directory.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">Use the <span class="docEmphasis">print</span> command to
    send the following output to the screen. (The word enclosed in &lt; &gt; is a
    variable name that will be expanded, and words enclosed in [ ] are output of
    commands that have been executed; i.e., use command substitution.)</p>
    <pre>Hi &lt;LOGNAME&gt; how's your day going?
&quot;No, &lt;LOGNAME&gt; you can't use the car tonight!&quot;, she cried.
The time is [ Sun Feb 21 13:19:27 PST 2001 ]
The name of this machine is [ eagle ] and
the time is [ 31:19:27 ]
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">Create a <span class="docEmphasis">file</span> that
    contains a list of user names. Now create a variable called
    <span class="docEmphasis">nlist</span> which contains the list of user
    names, extracted by using command substitution.</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print out the value of the variable. How does command
      substitution affect the formatting of a list?</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Test this by setting a variable to the output of the
      <span class="docEmphasis">ps –eaf</span> command.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">What happened to the formatting?</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec46">Lab 33: Redirection</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Go into the editor and create the following two-line text
    file called <span class="docEmphasis">ex6:</span></p>
    <pre>Last time I went to the beach I found a sea shell.
While in Kansas I found a corn shell.
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Now append this line to your <span class="docEmphasis">
    ex6</span> file: The <span class="docEmphasis">National Enquirer</span> says
    someone gave birth to a shell, called the born shell.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">Mail the <span class="docEmphasis">ex6</span> file to
    yourself.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">Using a pipe, count the number of lines (<span class="docEmphasis">wc
    –l</span>) in your <span class="docEmphasis">ex6</span> file.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">To list all set options, type the following:</p>
    <pre>set –o
</pre>
    <p class="docText">Do you have the <span class="docEmphasis">noclobber</span>
    variable set? If not, type the following:</p>
    <pre>set –o noclobber
</pre>
    <p class="docText">What happened?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>6:</b></td>
    <td>
    <p class="docText">Type the following at the command line:</p>
    <pre>cat &lt;&lt; FINIS
How are you $LOGNAME
The time is 'date'Bye!!
FINIS
</pre>
    <p class="docText">What printed?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>7:</b></td>
    <td>
    <p class="docText">Now try this using tabs:</p>
    <pre>cat &lt;&lt;– END
        hello there
        how are you
END
</pre>
    <p class="docText">What printed?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>8:</b></td>
    <td>
    <p class="docText">Type the following at the command line:</p>
    <pre>kat file 2&gt; error || print kat failed
</pre>
    <p class="docText">What happened? Why?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>9:</b></td>
    <td>
    <p class="docText">Now type the following at the command line:</p>
    <pre>cat zombie 2&gt; errorfile || print cat failed
</pre>
    <p class="docText">What happened? Why? How does the
    <span class="docEmphasis">&amp;&amp;</span> operator work? Try your own command to
    test it.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>10:</b></td>
    <td>
    <p class="docText">Use the <span class="docEmphasis">find</span> command to
    print all files that begin with an <span class="docEmphasis">a</span> from
    the root directory down. Put the standard output in a file called
    <span class="docEmphasis">foundit</span> and send the errors to
    <span class="docEmphasis">/dev/null.</span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec47">Lab 34: Job Control</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">At the command line type the following:</p>
    <pre>mail &lt;user&gt;Press control–z
</pre>
    <p class="docText">Now type:</p>
    <pre>jobs
</pre>
    <p class="docText">What is the number in the square brackets?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Now type:</p>
    <pre>sleep 300
jobs
bg
</pre>
    <p class="docText">What does <span class="docEmphasis">bg</span> do? What do
    the + and – signs indicate?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">Kill the <span class="docEmphasis">mail</span> job using
    job control.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">Go into the editor. Type <span class="docEmphasis">^Z</span>
    to stop the job.</p>
    <p class="docText">Now bring the stopped <span class="docEmphasis">vi</span>
    job back into the <span class="docEmphasis">foreground</span><span class="docEmphStrong">.</span>
    What command did you type?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">Type the following command:</p>
    <pre>jobs –l
</pre>
    <p class="docText">What is the output?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>6:</b></td>
    <td>
    <p class="docText">What is the <span class="docEmphasis">TMOUT</span>
    variable used for?</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>7:</b></td>
    <td>
    <p class="docText">How much time was spent by the kernel when executing the
    following command:</p>
    <pre>(sleep 5 ; ps –eaf )
</pre>
    </td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec48">Lab 35: Writing the <span class="docEmphasis">info</span>
Shell Script</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Write a program called <span class="docEmphasis">info.</span>
    Make sure you make the program executable with the <span class="docEmphasis">
    chmod</span> command before you try to execute it.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">The program should contain <span class="docEmphasis">
    comments.</span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">The program should do the following when executed:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Output the number of users logged on.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Output the time and date.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Output the present working directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">List all directory files in the parent directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print out the name of the shell being used.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print a line from the password file containing your
      login name.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print your user ID.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print the name of this machine.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print your disk usage.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print a calendar for this month.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Tell the user <span class="docEmphasis">good bye</span>
      and print the hour in nonmilitary time.</span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec49">Lab 36: Variable Expansion of Substrings</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Write a script that will do the following:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Set a variable called <span class="docEmphasis">mypath</span>
      to your home directory.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print the value of <span class="docEmphasis">mypath.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print just the last element of the path in
      <span class="docEmphasis">mypath.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print the first element of the path in
      <span class="docEmphasis">mypath.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print all but the last element of the variable
      <span class="docEmphasis">mypath.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec50">Lab 37: The <span class="docEmphasis">lookup</span>
Script</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Create a file called <span class="docEmphasis">datafile</span>
    if it has not been provided for you on the CD. It will consist of
    colon-separated fields:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">First and last name</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Phone number</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Address (street, city, state, and zip)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Birth date (04/12/66)</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Salary</span></li>
    </ol>
    </span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Put 10 entries in your file. Write a script called
    <span class="docEmphasis">lookup</span> that will do the following:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Welcome the user.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print the names and phone numbers for all the users in
      the <span class="docEmphasis">datafile.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Print the number of lines in the
      <span class="docEmphasis">datafile.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Tell the user <span class="docEmphasis">good bye.</span></span></li>
    </ol>
    </span></td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec51">Lab 38: Using <span class="docEmphasis">typeset</span></h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Write a script that will do the following:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Ask the user to type in his or her first and last name.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Store the answers in two variables.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Use the new <span class="docEmphasis">ksh read</span>
      command.</span></li>
    </ol>
    </span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Use the <span class="docEmphasis">typeset</span> command
    to convert the first and last name variables to all lowercase letters.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">Test to see if the person's name is t<span class="docEmphasis">om
    jones.</span> If it is, print <span class="docEmphasis">Welcome, Tom Jones;</span>
    if it is not, print, <span class="docEmphasis">Are you happy today,
    FIRSTNAME LASTNAME?.</span> (The user's first and last names are converted
    to uppercase letters.)</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">Have the user type in an answer to the question and use
    the new <span class="docEmphasis">ksh test</span> command to see whether the
    answer is <span class="docEmphasis">yes</span> or <span class="docEmphasis">
    no.</span> If <span class="docEmphasis">yes,</span> have your script say
    something nice to him or her, and if <span class="docEmphasis">no,</span>
    tell the user to go home and give the current time of day.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">Rewrite the <span class="docEmphasis">lookup</span>
    script<span class="docEmphasis">.</span></p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The script will ask the user if he or she would like to
      add an entry to the <span class="docEmphasis">datafile.</span></span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">If the user answers <span class="docEmphasis">yes</span>
      or <span class="docEmphasis">y,</span> ask for the following input:</p>
      <p class="docList">Name</p>
      <p class="docList">Phone number</p>
      <p class="docList">Address</p>
      <p class="docList">Birth date</p>
      <p class="docList">Salary</span></li>
    </ol>
    </span>
    <p class="docText">A variable for each item will be assigned the user input.</p>
    <pre><span class="docEmphasis">print –n</span> &quot;What is the name of the person you are adding to the file?&quot;
<span class="docEmphasis">read name</span> The information will be appended to the datafile.
</pre>
    </td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec52">Lab 39: The <span class="docEmphasis">if/else</span>
Construct and the <span class="docEmphasis">let</span> Command</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Write a script called <span class="docEmphasis">grades</span>
    that will ask the user for his or her numeric grade on a test<span class="docEmphasis">.</span></p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The script will test that the grade is within the
      possible grade range, 0 to 100.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">The script will tell the user if he or she got an A, B,
      C, D, or F.</span></li>
    </ol>
    </span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Write a script called <span class="docEmphasis">calc</span>
    that will perform the functions of a simple calculator. The script will
    provide a simple menu:</p>
    <p class="docText"><br>
    [a]&nbsp;Add<br>
    [s]&nbsp;Subtract<br>
    [m]&nbsp;Multiply<br>
    [d]&nbsp;Divide<br>
    [r]&nbsp;Remainder<br>
&nbsp;</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">The user will choose one of the letters from the menu.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">The user will then be asked to enter two integers between
    0 and 100.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">If the numbers are out of the range, an error message
    will be printed and the script will exit.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>6:</b></td>
    <td>
    <p class="docText">The program will perform the arithmetic on the two
    integers.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>7:</b></td>
    <td>
    <p class="docText">The answer will be printed in base 10, 8, and 16.</td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec53">Lab 40: The <span class="docEmphasis">case</span>
Statement</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Write a script <span class="docEmphasis">timegreet</span>
    that will do the following:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Provide a comment section at the top of the script,
      with your name, the date, and the purpose of this program.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Convert the following program using
      <span class="docEmphasis">case</span> statements:</p>
      <pre><span class="docEmphasis"># The timegreet script by Ellie Quigley</span>
you=$LOGNAME
hour='date | awk '{print substr($4, 1, 2)}''
print &quot;The time is: $(date)&quot;
if (( hour &gt; 0 &amp;&amp; $hour &lt; 12 ))
then
   print &quot;Good morning, $you!&quot;
elif (( hour == 12 ))
then
   print &quot;Lunch time!&quot;
elif (( hour &gt; 12 &amp;&amp; $hour &lt; 16 ))
then
   print &quot;Good afternoon, $you!&quot;
else
   print &quot;Good night, $you!&quot;
fi
</pre>
      </span></li>
    </ol>
    </span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Rewrite the <span class="docEmphasis">lookup</span>
    script, replacing the <span class="docEmphasis">if/elif</span> construct
    with the <span class="docEmphasis">case</span> command. Add one more menu
    item:</p>
    <p class="docText"><br>
    1)&nbsp;Add&nbsp;Entry<br>
    2)&nbsp;Delete&nbsp;Entry<br>
    3)&nbsp;Update&nbsp;Entry<br>
    4)&nbsp;View&nbsp;Entry<br>
    5)&nbsp;Exit<br>
&nbsp;</td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec54">Lab 41: The <span class="docEmphasis">select</span>
Loop</h4>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Write a script that will do the following:</p>
    <span style="FONT-WEIGHT: bold">
    <ol class="docList" type="a">
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Provide a comment section at the top of the script,
      with your name, the date, and the purpose of this program.</span></li>
      <li><span style="FONT-WEIGHT: normal">
      <p class="docList">Use the <span class="docEmphasis">select</span> loop to
      provide a menu of foods. The output will resemble the following:</p>
      <pre>$ foods
1) steak and potatoes
2) fish and chips
3) soup and salad
Please make a selection. 1
Stick to your ribs
Watch your cholesterol
<span class="docEmphasis">Enjoy your meal.</span>

$ foods
1) steak and potatoes
2) fish and chips
3) soup and salad
Please make a selection. 2
British are coming
<span class="docEmphasis">Enjoy your meal.</span>

$ foods
1) steak and potatoes
2) fish and chips
3) soup and salad
Please make a selection. 3
Health foods…
Dieting is so boring.
<span class="docEmphasis">Enjoy your meal.</span>

$ foods
1) steak and potatoes
2) fish and chips
3) soup and salad
Please make a selection. 5
Not on the menu today!
</pre>
      </span></li>
    </ol>
    </span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Rewrite the <span class="docEmphasis">lookup</span>
    script using the <span class="docEmphasis">select</span> command to create a
    main menu and a sub menu. The menu will resemble the following:</p>
    <pre>1) Add Entry
2) Delete Entry
3) Update Entry
4) View Entry
     a) Name
     b) Phone
     c) Address
     d) Birthday
     e) Salary
5) Exit
</pre>
    </td>
  </tr>
</table>

<h4 class="docSection2Title" id="ch10lev2sec55">Lab 42: Autoloading Functions</h4>
<p class="docText">Steps for autoloading a function:</p>

<table cellSpacing="16" cellpadding="5" border="0">
  <tr vAlign="top">
    <td class="docText" align="right"><b>1:</b></td>
    <td>
    <p class="docText">Make a directory called <span class="docEmphasis">
    myfunctions.</span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>2:</b></td>
    <td>
    <p class="docText">Change directory to <span class="docEmphasis">myfunctions</span>
    and use the editor to create a file called <span class="docEmphasis">
    goodbye.</span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>3:</b></td>
    <td>
    <p class="docText">Insert in the <span class="docEmphasis">goodbye</span>
    file a function called <span class="docEmphasis">goodbye,</span> spelled
    exactly the same as the filename.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>4:</b></td>
    <td>
    <p class="docText">The <span class="docEmphasis">goodbye</span> function
    contains:</p>
    <pre>function goodbye {
print The current time is $(date)
print &quot;The name of this script is $0&quot;
print See you later $1
print Your machine is 'uname –n'
}
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>5:</b></td>
    <td>
    <p class="docText">Write and quit the editor. You now have a file containing
    a function with the same name.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>6:</b></td>
    <td>
    <p class="docText">Go to your home directory. Modify the
    <span class="docEmphasis">.kshrc</span> file in the editor by typing the
    following line:</p>
    <pre>FPATH=$HOME/myfunctions
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>7:</b></td>
    <td>
    <p class="docText">Exit the editor, and to execute the
    <span class="docEmphasis">.kshrc</span> in the current environment, use the
    <span class="docEmphasis">dot</span> command.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>8:</b></td>
    <td>
    <p class="docText">In the <span class="docEmphasis">timegreet</span> script
    you have already written, include the following lines:</p>
    <pre>autoload goodbye
goodbye $LOGNAME
</pre>
    </td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>9:</b></td>
    <td>
    <p class="docText">Run the <span class="docEmphasis">timegreet</span>
    script. The <span class="docEmphasis">goodbye</span> function output will
    appear.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>10:</b></td>
    <td>
    <p class="docText">Create functions for each of the menu items in the
    <span class="docEmphasis">lookup</span> script. Store the functions in a
    file called <span class="docEmphasis">lookup_functions</span> in a directory
    called <span class="docEmphasis">myfunctions.</span></td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>11:</b></td>
    <td>
    <p class="docText">Autoload the functions in your <span class="docEmphasis">
    lookup</span> script and make the function calls for the corresponding
    cases.</td>
  </tr>
  <tr vAlign="top">
    <td class="docText" align="right"><b>12:</b></td>
    <td>
    <p class="docText">Use the <span class="docEmphasis">trap</span> command so
    that if the user enters a menu selection other than an integer value, the
    <span class="docEmphasis">trap</span> command will print an error to the
    screen, and cause the script to ask the user to reenter the correct data
    type.</td>
  </tr>
</table>

<blockquote>
<p class="docFootnote" id="EN10-1"><a class="docLink" href="#ENB10-1">[1]</a>&nbsp;&nbsp;A built-in
  command will override a function; therefore, an alias must be defined to the
  name of the function. (See &quot;<a class="docLink" href="#ch10lev2sec8">Aliases</a>&quot;.)
  In the 1994 version of the Korn shell, the order of processing functions and
  built-ins was reversed, thus alleviating this problem.</p><p class="docFootnote" id="EN10-2"><a class="docLink" href="#ENB10-2">[2]</a>&nbsp;&nbsp;On versions of
  the Korn shell newer than 1988, the <span class="docEmphasis">FCEDIT</span>
  variable has been renamed <span class="docEmphasis">HISTEDIT,</span> and the
  <span class="docEmphasis">fc</span> command has been renamed
  <span class="docEmphasis">hist.</span></p><p class="docFootnote" id="EN10-3"><a class="docLink" href="#ENB10-3">[3]</a>&nbsp;&nbsp;Tracked aliases
  will be undefined if the <span class="docEmphasis">PATH</span> variable is
  reset.</p><p class="docFootnote" id="EN10-4"><a class="docLink" href="#ENB10-4">[4]</a>&nbsp;&nbsp;Using backquotes
  for command substitution is an old form still used in the Bourne and C shells.
  Although still legal syntax, the Korn shell introduces a new method shown in
  this section.</p><p class="docFootnote" id="EN10-5"><a class="docLink" href="#ENB10-5">[5]</a>&nbsp;&nbsp;The POSIX
      standard defines functions with the Bourne shell syntax, but variables and
      traps cannot be local in scope, as with the new Korn shell definition.</p><p class="docFootnote" id="EN10-6"><a class="docLink" href="#ENB10-6">[6]</a>&nbsp;&nbsp;Bases greater
  than 36 are available on versions of the Korn shell that are newer than 1988.</p><p class="docFootnote" id="EN10-7"><a class="docLink" href="#ENB10-7">[7]</a>&nbsp;&nbsp;If you want the
  menu to reappear when the loop starts again, set the <span class="docEmphasis">
  REPLY</span> variable to null just before the <span class="docEmphasis">done</span>
  keyword.</p><p class="docFootnote" id="EN10-8"><a class="docLink" href="#ENB10-8">[8]</a>&nbsp;&nbsp;<span style="FONT-WEIGHT: bold">
<span style="FONT-WEIGHT: normal">
Korn, David G.,
    and Bolsky, Morris I., <i>The Korn Shell Command and Programming Language</i>
    (Englewood Cliffs, NJ: Prentice-Hall, Inc., 1988), p. 77.</span></span></p><p class="docFootnote" id="EN10-9"><a class="docLink" href="#ENB10-9">[9]</a>&nbsp;&nbsp;Bolsky, Morris,
  and Korn, David, <i>The New Kornshell.</i> (Upper Saddle River, NJ: Prentice
  Hall, 1995), p. 78.</p><p class="docFootnote" id="EN10-10"><a class="docLink" href="#ENB10-10">[10]</a>&nbsp;&nbsp;Bolsky, Morris
  I., and Korn, David G., <i>The New KornShell Command and Programming Language</i>
  (Englewood Cliffs, NJ: Prentice Hall PTR, 1995), p. 327.</p><p class="docFootnote" id="EN10-11"><a class="docLink" href="#ENB10-11">[11]</a>&nbsp;&nbsp;See Section 3 of
  the UNIX manual for the C library function <span class="docEmphasis">getopt.</span></p></blockquote>

<table width="100%" border="1" bgcolor="#EBEBFF"><tr><td width="5%" align="left" valign="middle"><a href="_chapter 9.htm"><img src="Larrow.gif" width="17" height="19" border="0"></a></td><td align="center" valign="middle"><a class="docLink" href="Front matter.htm">CONTENTS</a></td><td width="5%" align="right" valign="middle"><a href="_chapter 11.htm"><img src="Rarrow.gif" width="17" height="19" border="0"></a></td></tr></table></body>

</html>